# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pylint: disable=all
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
import sys
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)

if sys.version_info >= (3, 9):
    from typing import TypedDict, Literal
else:
    from typing_extensions import TypedDict, Literal

# -- template types.py.jinja --
from .utils import _NoneType



# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = Literal['default', 'insensitive']
SortOrder = Literal['asc', 'desc']


class _DatasourceOverrideOptional(TypedDict, total=False):
    env: str
    name: str


class DatasourceOverride(_DatasourceOverrideOptional):
    url: str


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
            },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
            },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
            },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
            },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                    },
    total=False,
)

    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


BigIntFilter = IntFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)

# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput


# Post types

class PostOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Post create method"""
    id: str
    created_at: datetime.datetime
    updated_at: datetime.datetime
    views: int
    desc: Optional[str]
    author: 'UserCreateNestedWithoutRelationsInput'
    categories: 'CategoryCreateManyNestedWithoutRelationsInput'


class PostCreateInput(PostOptionalCreateInput):
    """Required arguments to the Post create method"""
    title: str
    published: bool


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PostOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Post create method, without relations"""
    id: str
    created_at: datetime.datetime
    updated_at: datetime.datetime
    views: int
    desc: Optional[str]


class PostCreateWithoutRelationsInput(PostOptionalCreateWithoutRelationsInput):
    """Required arguments to the Post create method, without relations"""
    title: str
    published: bool


class PostCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PostCreateWithoutRelationsInput'
    connect: 'PostWhereUniqueInput'


class PostCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PostCreateWithoutRelationsInput', List['PostCreateWithoutRelationsInput']]
    connect: Union['PostWhereUniqueInput', List['PostWhereUniqueInput']]


class PostWhereUniqueInput(TypedDict, total=False):
    """Unique Post arguments for searching"""
    id: str


class PostUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    created_at: datetime.datetime
    updated_at: datetime.datetime
    title: str
    published: bool
    views: Union[AtomicIntInput, int]
    desc: Optional[str]
    author: 'UserUpdateOneWithoutRelationsInput'
    categories: 'CategoryUpdateManyWithoutRelationsInput'


class PostUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: str
    created_at: datetime.datetime
    updated_at: datetime.datetime
    title: str
    published: bool
    views: Union[AtomicIntInput, int]
    desc: Optional[str]
    author: 'UserUpdateOneWithoutRelationsInput'
    categories: 'CategoryUpdateManyWithoutRelationsInput'


class PostUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PostCreateWithoutRelationsInput']
    connect: List['PostWhereUniqueInput']
    set: List['PostWhereUniqueInput']
    disconnect: List['PostWhereUniqueInput']
    delete: List['PostWhereUniqueInput']

    # TODO
    # update: List['PostUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PostUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PostScalarWhereInput']
    # upsert: List['PostUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['PostCreateOrConnectWithoutRelationsInput']


class PostUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PostCreateWithoutRelationsInput'
    connect: 'PostWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PostUpdateInput'
    # upsert: 'PostUpsertWithoutRelationsInput'
    # connectOrCreate: 'PostCreateOrConnectWithoutRelationsInput'


class PostUpsertInput(TypedDict):
    create: 'PostCreateInput'
    update: 'PostUpdateInput'  # pyright: reportIncompatibleMethodOverride=false


class PostOrderByInput(TypedDict, total=False):
    id: 'SortOrder'
    created_at: 'SortOrder'
    updated_at: 'SortOrder'
    title: 'SortOrder'
    published: 'SortOrder'
    views: 'SortOrder'
    desc: 'SortOrder'
    author_id: 'SortOrder'


# recursive Post types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/latest/limitations/

PostRelationFilter = TypedDict(
    'PostRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class PostListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class PostInclude(TypedDict, total=False):
    """Post relational arguments"""
    author: Union[bool, 'UserArgsFromPost']
    categories: Union[bool, 'FindManyCategoryArgsFromPost']


    

class PostIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    author: Union[bool, 'UserArgsFromPostRecursive1']
    categories: Union[bool, 'FindManyCategoryArgsFromPostRecursive1']


class PostIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    author: Union[bool, 'UserArgsFromPostRecursive2']
    categories: Union[bool, 'FindManyCategoryArgsFromPostRecursive2']


class PostIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""
    author: Union[bool, 'UserArgsFromPostRecursive3']
    categories: Union[bool, 'FindManyCategoryArgsFromPostRecursive3']


class PostIncludeFromPostRecursive3(TypedDict, total=False):
    """Relational arguments for Post"""
    author: Union[bool, 'UserArgsFromPostRecursive4']
    categories: Union[bool, 'FindManyCategoryArgsFromPostRecursive4']


class PostIncludeFromPostRecursive4(TypedDict, total=False):
    """Relational arguments for Post"""

    

class PostArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostIncludeFromPostRecursive3'


class PostArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostIncludeFromPostRecursive4'


class PostArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyPostArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive3'


class FindManyPostArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive4'


class FindManyPostArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    
    

class UserIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive1']
    profile: Union[bool, 'ProfileArgsFromPostRecursive1']


class UserIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive2']
    profile: Union[bool, 'ProfileArgsFromPostRecursive2']


class UserIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive3']
    profile: Union[bool, 'ProfileArgsFromPostRecursive3']


class UserIncludeFromPostRecursive3(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive4']
    profile: Union[bool, 'ProfileArgsFromPostRecursive4']


class UserIncludeFromPostRecursive4(TypedDict, total=False):
    """Relational arguments for Post"""

    

class UserArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyUserArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    
    

class CategoryIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive1']


class CategoryIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive2']


class CategoryIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive3']


class CategoryIncludeFromPostRecursive3(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive4']


class CategoryIncludeFromPostRecursive4(TypedDict, total=False):
    """Relational arguments for Post"""

    

class CategoryArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'CategoryIncludeFromCategoryRecursive1'


class CategoryArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'CategoryIncludeFromCategoryRecursive2'


class CategoryArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    include: 'CategoryIncludeFromCategoryRecursive3'


class CategoryArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    include: 'CategoryIncludeFromCategoryRecursive4'


class CategoryArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyCategoryArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive1'


class FindManyCategoryArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive2'


class FindManyCategoryArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive3'


class FindManyCategoryArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive4'


class FindManyCategoryArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    
    

class ProfileIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    user: Union[bool, 'UserArgsFromPostRecursive1']


class ProfileIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    user: Union[bool, 'UserArgsFromPostRecursive2']


class ProfileIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""
    user: Union[bool, 'UserArgsFromPostRecursive3']


class ProfileIncludeFromPostRecursive3(TypedDict, total=False):
    """Relational arguments for Post"""
    user: Union[bool, 'UserArgsFromPostRecursive4']


class ProfileIncludeFromPostRecursive4(TypedDict, total=False):
    """Relational arguments for Post"""

    

class ProfileArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'ProfileIncludeFromProfileRecursive1'


class ProfileArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'ProfileIncludeFromProfileRecursive2'


class ProfileArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    include: 'ProfileIncludeFromProfileRecursive3'


class ProfileArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    include: 'ProfileIncludeFromProfileRecursive4'


class ProfileArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyProfileArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive1'


class FindManyProfileArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive2'


class FindManyProfileArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive3'


class FindManyProfileArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive4'


class FindManyProfileArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    
    

class TypesIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""


class TypesIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""


class TypesIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""


class TypesIncludeFromPostRecursive3(TypedDict, total=False):
    """Relational arguments for Post"""


class TypesIncludeFromPostRecursive4(TypedDict, total=False):
    """Relational arguments for Post"""

    

class TypesArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'TypesIncludeFromTypesRecursive1'


class TypesArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'TypesIncludeFromTypesRecursive2'


class TypesArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    include: 'TypesIncludeFromTypesRecursive3'


class TypesArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    include: 'TypesIncludeFromTypesRecursive4'


class TypesArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyTypesArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'TypesWhereInput'
    cursor: 'TypesWhereUniqueInput'
    include: 'TypesIncludeFromTypesRecursive1'


class FindManyTypesArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'TypesWhereInput'
    cursor: 'TypesWhereUniqueInput'
    include: 'TypesIncludeFromTypesRecursive2'


class FindManyTypesArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'TypesWhereInput'
    cursor: 'TypesWhereUniqueInput'
    include: 'TypesIncludeFromTypesRecursive3'


class FindManyTypesArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'TypesWhereInput'
    cursor: 'TypesWhereUniqueInput'
    include: 'TypesIncludeFromTypesRecursive4'


class FindManyTypesArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'TypesWhereInput'
    cursor: 'TypesWhereUniqueInput'
    


FindManyPostArgs = FindManyPostArgsFromPost
FindFirstPostArgs = FindManyPostArgsFromPost


    

class PostWhereInput(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    title: Union[str, 'types.StringFilter']
    published: Union[bool, 'types.BooleanFilter']
    views: Union[int, 'types.IntFilter']
    desc: Union[str, 'types.StringFilter']
    author: 'UserRelationFilter'
    author_id: Union[str, 'types.StringFilter']
    categories: 'CategoryListRelationFilter'

    # should be noted that AND and NOT should be Union['PostWhereInputRecursive1', List['PostWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['PostWhereInputRecursive1']
    OR: List['PostWhereInputRecursive1']
    NOT: List['PostWhereInputRecursive1']


class PostWhereInputRecursive1(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    title: Union[str, 'types.StringFilter']
    published: Union[bool, 'types.BooleanFilter']
    views: Union[int, 'types.IntFilter']
    desc: Union[str, 'types.StringFilter']
    author: 'UserRelationFilter'
    author_id: Union[str, 'types.StringFilter']
    categories: 'CategoryListRelationFilter'

    # should be noted that AND and NOT should be Union['PostWhereInputRecursive2', List['PostWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['PostWhereInputRecursive2']
    OR: List['PostWhereInputRecursive2']
    NOT: List['PostWhereInputRecursive2']


class PostWhereInputRecursive2(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    title: Union[str, 'types.StringFilter']
    published: Union[bool, 'types.BooleanFilter']
    views: Union[int, 'types.IntFilter']
    desc: Union[str, 'types.StringFilter']
    author: 'UserRelationFilter'
    author_id: Union[str, 'types.StringFilter']
    categories: 'CategoryListRelationFilter'

    # should be noted that AND and NOT should be Union['PostWhereInputRecursive3', List['PostWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['PostWhereInputRecursive3']
    OR: List['PostWhereInputRecursive3']
    NOT: List['PostWhereInputRecursive3']


class PostWhereInputRecursive3(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    title: Union[str, 'types.StringFilter']
    published: Union[bool, 'types.BooleanFilter']
    views: Union[int, 'types.IntFilter']
    desc: Union[str, 'types.StringFilter']
    author: 'UserRelationFilter'
    author_id: Union[str, 'types.StringFilter']
    categories: 'CategoryListRelationFilter'

    # should be noted that AND and NOT should be Union['PostWhereInputRecursive4', List['PostWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['PostWhereInputRecursive4']
    OR: List['PostWhereInputRecursive4']
    NOT: List['PostWhereInputRecursive4']


class PostWhereInputRecursive4(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    title: Union[str, 'types.StringFilter']
    published: Union[bool, 'types.BooleanFilter']
    views: Union[int, 'types.IntFilter']
    desc: Union[str, 'types.StringFilter']
    author: 'UserRelationFilter'
    author_id: Union[str, 'types.StringFilter']
    categories: 'CategoryListRelationFilter'



PostKeys = Literal[
    'id',
    'created_at',
    'updated_at',
    'title',
    'published',
    'views',
    'desc',
    'author',
    'author_id',
    'categories',
]

PostRelationalFieldKeys = Literal[
        'author',
        'categories',
    ]

# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: str
    posts: 'PostCreateManyNestedWithoutRelationsInput'
    profile: 'ProfileCreateNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    name: str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: str


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    name: str


class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]


class UserWhereUniqueInput(TypedDict, total=False):
    """Unique User arguments for searching"""
    id: str


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    name: str
    posts: 'PostUpdateManyWithoutRelationsInput'
    profile: 'ProfileUpdateOneWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: str
    name: str
    posts: 'PostUpdateManyWithoutRelationsInput'
    profile: 'ProfileUpdateOneWithoutRelationsInput'


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['UserCreateOrConnectWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'
    # connectOrCreate: 'UserCreateOrConnectWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: reportIncompatibleMethodOverride=false


class UserOrderByInput(TypedDict, total=False):
    id: 'SortOrder'
    name: 'SortOrder'


# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/latest/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    posts: Union[bool, 'FindManyPostArgsFromUser']
    profile: Union[bool, 'ProfileArgsFromUser']


    

class PostIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    author: Union[bool, 'UserArgsFromUserRecursive1']
    categories: Union[bool, 'FindManyCategoryArgsFromUserRecursive1']


class PostIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    author: Union[bool, 'UserArgsFromUserRecursive2']
    categories: Union[bool, 'FindManyCategoryArgsFromUserRecursive2']


class PostIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    author: Union[bool, 'UserArgsFromUserRecursive3']
    categories: Union[bool, 'FindManyCategoryArgsFromUserRecursive3']


class PostIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    author: Union[bool, 'UserArgsFromUserRecursive4']
    categories: Union[bool, 'FindManyCategoryArgsFromUserRecursive4']


class PostIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class PostArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostIncludeFromPostRecursive3'


class PostArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostIncludeFromPostRecursive4'


class PostArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyPostArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive3'


class FindManyPostArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive4'


class FindManyPostArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    
    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive1']
    profile: Union[bool, 'ProfileArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive2']
    profile: Union[bool, 'ProfileArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive3']
    profile: Union[bool, 'ProfileArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive4']
    profile: Union[bool, 'ProfileArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    
    

class CategoryIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive1']


class CategoryIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive2']


class CategoryIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive3']


class CategoryIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive4']


class CategoryIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class CategoryArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'CategoryIncludeFromCategoryRecursive1'


class CategoryArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'CategoryIncludeFromCategoryRecursive2'


class CategoryArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'CategoryIncludeFromCategoryRecursive3'


class CategoryArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'CategoryIncludeFromCategoryRecursive4'


class CategoryArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyCategoryArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive1'


class FindManyCategoryArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive2'


class FindManyCategoryArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive3'


class FindManyCategoryArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive4'


class FindManyCategoryArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    
    

class ProfileIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class ProfileIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class ProfileIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class ProfileIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class ProfileIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ProfileArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProfileIncludeFromProfileRecursive1'


class ProfileArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProfileIncludeFromProfileRecursive2'


class ProfileArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProfileIncludeFromProfileRecursive3'


class ProfileArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProfileIncludeFromProfileRecursive4'


class ProfileArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyProfileArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive1'


class FindManyProfileArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive2'


class FindManyProfileArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive3'


class FindManyProfileArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive4'


class FindManyProfileArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    
    

class TypesIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""


class TypesIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""


class TypesIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""


class TypesIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""


class TypesIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class TypesArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'TypesIncludeFromTypesRecursive1'


class TypesArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'TypesIncludeFromTypesRecursive2'


class TypesArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'TypesIncludeFromTypesRecursive3'


class TypesArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'TypesIncludeFromTypesRecursive4'


class TypesArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyTypesArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'TypesWhereInput'
    cursor: 'TypesWhereUniqueInput'
    include: 'TypesIncludeFromTypesRecursive1'


class FindManyTypesArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'TypesWhereInput'
    cursor: 'TypesWhereUniqueInput'
    include: 'TypesIncludeFromTypesRecursive2'


class FindManyTypesArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'TypesWhereInput'
    cursor: 'TypesWhereUniqueInput'
    include: 'TypesIncludeFromTypesRecursive3'


class FindManyTypesArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'TypesWhereInput'
    cursor: 'TypesWhereUniqueInput'
    include: 'TypesIncludeFromTypesRecursive4'


class FindManyTypesArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'TypesWhereInput'
    cursor: 'TypesWhereUniqueInput'
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[str, 'types.StringFilter']
    name: Union[str, 'types.StringFilter']
    posts: 'PostListRelationFilter'
    profile: 'ProfileRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[str, 'types.StringFilter']
    name: Union[str, 'types.StringFilter']
    posts: 'PostListRelationFilter'
    profile: 'ProfileRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[str, 'types.StringFilter']
    name: Union[str, 'types.StringFilter']
    posts: 'PostListRelationFilter'
    profile: 'ProfileRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[str, 'types.StringFilter']
    name: Union[str, 'types.StringFilter']
    posts: 'PostListRelationFilter'
    profile: 'ProfileRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[str, 'types.StringFilter']
    name: Union[str, 'types.StringFilter']
    posts: 'PostListRelationFilter'
    profile: 'ProfileRelationFilter'



UserKeys = Literal[
    'id',
    'name',
    'posts',
    'profile',
]

UserRelationalFieldKeys = Literal[
        'posts',
        'profile',
    ]

# Category types

class CategoryOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Category create method"""
    id: int
    posts: 'PostCreateManyNestedWithoutRelationsInput'


class CategoryCreateInput(CategoryOptionalCreateInput):
    """Required arguments to the Category create method"""
    name: str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class CategoryOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Category create method, without relations"""
    id: int


class CategoryCreateWithoutRelationsInput(CategoryOptionalCreateWithoutRelationsInput):
    """Required arguments to the Category create method, without relations"""
    name: str


class CategoryCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'CategoryCreateWithoutRelationsInput'
    connect: 'CategoryWhereUniqueInput'


class CategoryCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['CategoryCreateWithoutRelationsInput', List['CategoryCreateWithoutRelationsInput']]
    connect: Union['CategoryWhereUniqueInput', List['CategoryWhereUniqueInput']]


class CategoryWhereUniqueInput(TypedDict, total=False):
    """Unique Category arguments for searching"""
    id: int


class CategoryUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    posts: 'PostUpdateManyWithoutRelationsInput'
    name: str


class CategoryUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, int]
    posts: 'PostUpdateManyWithoutRelationsInput'
    name: str


class CategoryUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['CategoryCreateWithoutRelationsInput']
    connect: List['CategoryWhereUniqueInput']
    set: List['CategoryWhereUniqueInput']
    disconnect: List['CategoryWhereUniqueInput']
    delete: List['CategoryWhereUniqueInput']

    # TODO
    # update: List['CategoryUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['CategoryUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['CategoryScalarWhereInput']
    # upsert: List['CategoryUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['CategoryCreateOrConnectWithoutRelationsInput']


class CategoryUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'CategoryCreateWithoutRelationsInput'
    connect: 'CategoryWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'CategoryUpdateInput'
    # upsert: 'CategoryUpsertWithoutRelationsInput'
    # connectOrCreate: 'CategoryCreateOrConnectWithoutRelationsInput'


class CategoryUpsertInput(TypedDict):
    create: 'CategoryCreateInput'
    update: 'CategoryUpdateInput'  # pyright: reportIncompatibleMethodOverride=false


class CategoryOrderByInput(TypedDict, total=False):
    id: 'SortOrder'
    name: 'SortOrder'


# recursive Category types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/latest/limitations/

CategoryRelationFilter = TypedDict(
    'CategoryRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class CategoryListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class CategoryInclude(TypedDict, total=False):
    """Category relational arguments"""
    posts: Union[bool, 'FindManyPostArgsFromCategory']


    

class PostIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    author: Union[bool, 'UserArgsFromCategoryRecursive1']
    categories: Union[bool, 'FindManyCategoryArgsFromCategoryRecursive1']


class PostIncludeFromCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for Category"""
    author: Union[bool, 'UserArgsFromCategoryRecursive2']
    categories: Union[bool, 'FindManyCategoryArgsFromCategoryRecursive2']


class PostIncludeFromCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for Category"""
    author: Union[bool, 'UserArgsFromCategoryRecursive3']
    categories: Union[bool, 'FindManyCategoryArgsFromCategoryRecursive3']


class PostIncludeFromCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for Category"""
    author: Union[bool, 'UserArgsFromCategoryRecursive4']
    categories: Union[bool, 'FindManyCategoryArgsFromCategoryRecursive4']


class PostIncludeFromCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for Category"""

    

class PostArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    include: 'PostIncludeFromPostRecursive3'


class PostArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    include: 'PostIncludeFromPostRecursive4'


class PostArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    
    

class FindManyPostArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive3'


class FindManyPostArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive4'


class FindManyPostArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    
    

class UserIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    posts: Union[bool, 'FindManyPostArgsFromCategoryRecursive1']
    profile: Union[bool, 'ProfileArgsFromCategoryRecursive1']


class UserIncludeFromCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for Category"""
    posts: Union[bool, 'FindManyPostArgsFromCategoryRecursive2']
    profile: Union[bool, 'ProfileArgsFromCategoryRecursive2']


class UserIncludeFromCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for Category"""
    posts: Union[bool, 'FindManyPostArgsFromCategoryRecursive3']
    profile: Union[bool, 'ProfileArgsFromCategoryRecursive3']


class UserIncludeFromCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for Category"""
    posts: Union[bool, 'FindManyPostArgsFromCategoryRecursive4']
    profile: Union[bool, 'ProfileArgsFromCategoryRecursive4']


class UserIncludeFromCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for Category"""

    

class UserArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    
    

class FindManyUserArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    
    

class CategoryIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    posts: Union[bool, 'FindManyPostArgsFromCategoryRecursive1']


class CategoryIncludeFromCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for Category"""
    posts: Union[bool, 'FindManyPostArgsFromCategoryRecursive2']


class CategoryIncludeFromCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for Category"""
    posts: Union[bool, 'FindManyPostArgsFromCategoryRecursive3']


class CategoryIncludeFromCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for Category"""
    posts: Union[bool, 'FindManyPostArgsFromCategoryRecursive4']


class CategoryIncludeFromCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for Category"""

    

class CategoryArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CategoryIncludeFromCategoryRecursive1'


class CategoryArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CategoryIncludeFromCategoryRecursive2'


class CategoryArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CategoryIncludeFromCategoryRecursive3'


class CategoryArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CategoryIncludeFromCategoryRecursive4'


class CategoryArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    
    

class FindManyCategoryArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive1'


class FindManyCategoryArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive2'


class FindManyCategoryArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive3'


class FindManyCategoryArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive4'


class FindManyCategoryArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    
    

class ProfileIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    user: Union[bool, 'UserArgsFromCategoryRecursive1']


class ProfileIncludeFromCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for Category"""
    user: Union[bool, 'UserArgsFromCategoryRecursive2']


class ProfileIncludeFromCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for Category"""
    user: Union[bool, 'UserArgsFromCategoryRecursive3']


class ProfileIncludeFromCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for Category"""
    user: Union[bool, 'UserArgsFromCategoryRecursive4']


class ProfileIncludeFromCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for Category"""

    

class ProfileArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'ProfileIncludeFromProfileRecursive1'


class ProfileArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    include: 'ProfileIncludeFromProfileRecursive2'


class ProfileArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    include: 'ProfileIncludeFromProfileRecursive3'


class ProfileArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    include: 'ProfileIncludeFromProfileRecursive4'


class ProfileArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    
    

class FindManyProfileArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive1'


class FindManyProfileArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive2'


class FindManyProfileArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive3'


class FindManyProfileArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive4'


class FindManyProfileArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    
    

class TypesIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""


class TypesIncludeFromCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for Category"""


class TypesIncludeFromCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for Category"""


class TypesIncludeFromCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for Category"""


class TypesIncludeFromCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for Category"""

    

class TypesArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'TypesIncludeFromTypesRecursive1'


class TypesArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    include: 'TypesIncludeFromTypesRecursive2'


class TypesArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    include: 'TypesIncludeFromTypesRecursive3'


class TypesArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    include: 'TypesIncludeFromTypesRecursive4'


class TypesArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    
    

class FindManyTypesArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'TypesWhereInput'
    cursor: 'TypesWhereUniqueInput'
    include: 'TypesIncludeFromTypesRecursive1'


class FindManyTypesArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'TypesWhereInput'
    cursor: 'TypesWhereUniqueInput'
    include: 'TypesIncludeFromTypesRecursive2'


class FindManyTypesArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'TypesWhereInput'
    cursor: 'TypesWhereUniqueInput'
    include: 'TypesIncludeFromTypesRecursive3'


class FindManyTypesArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'TypesWhereInput'
    cursor: 'TypesWhereUniqueInput'
    include: 'TypesIncludeFromTypesRecursive4'


class FindManyTypesArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'TypesWhereInput'
    cursor: 'TypesWhereUniqueInput'
    


FindManyCategoryArgs = FindManyCategoryArgsFromCategory
FindFirstCategoryArgs = FindManyCategoryArgsFromCategory


    

class CategoryWhereInput(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[int, 'types.IntFilter']
    posts: 'PostListRelationFilter'
    name: Union[str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['CategoryWhereInputRecursive1', List['CategoryWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['CategoryWhereInputRecursive1']
    OR: List['CategoryWhereInputRecursive1']
    NOT: List['CategoryWhereInputRecursive1']


class CategoryWhereInputRecursive1(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[int, 'types.IntFilter']
    posts: 'PostListRelationFilter'
    name: Union[str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['CategoryWhereInputRecursive2', List['CategoryWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['CategoryWhereInputRecursive2']
    OR: List['CategoryWhereInputRecursive2']
    NOT: List['CategoryWhereInputRecursive2']


class CategoryWhereInputRecursive2(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[int, 'types.IntFilter']
    posts: 'PostListRelationFilter'
    name: Union[str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['CategoryWhereInputRecursive3', List['CategoryWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['CategoryWhereInputRecursive3']
    OR: List['CategoryWhereInputRecursive3']
    NOT: List['CategoryWhereInputRecursive3']


class CategoryWhereInputRecursive3(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[int, 'types.IntFilter']
    posts: 'PostListRelationFilter'
    name: Union[str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['CategoryWhereInputRecursive4', List['CategoryWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['CategoryWhereInputRecursive4']
    OR: List['CategoryWhereInputRecursive4']
    NOT: List['CategoryWhereInputRecursive4']


class CategoryWhereInputRecursive4(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[int, 'types.IntFilter']
    posts: 'PostListRelationFilter'
    name: Union[str, 'types.StringFilter']



CategoryKeys = Literal[
    'id',
    'posts',
    'name',
]

CategoryRelationalFieldKeys = Literal[
        'posts',
    ]

# Profile types

class ProfileOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Profile create method"""
    id: int
    user: 'UserCreateNestedWithoutRelationsInput'


class ProfileCreateInput(ProfileOptionalCreateInput):
    """Required arguments to the Profile create method"""
    bio: str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ProfileOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Profile create method, without relations"""
    id: int


class ProfileCreateWithoutRelationsInput(ProfileOptionalCreateWithoutRelationsInput):
    """Required arguments to the Profile create method, without relations"""
    bio: str


class ProfileCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ProfileCreateWithoutRelationsInput'
    connect: 'ProfileWhereUniqueInput'


class ProfileCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ProfileCreateWithoutRelationsInput', List['ProfileCreateWithoutRelationsInput']]
    connect: Union['ProfileWhereUniqueInput', List['ProfileWhereUniqueInput']]


class ProfileWhereUniqueInput(TypedDict, total=False):
    """Unique Profile arguments for searching"""
    id: int


class ProfileUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    user: 'UserUpdateOneWithoutRelationsInput'
    bio: str


class ProfileUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, int]
    user: 'UserUpdateOneWithoutRelationsInput'
    bio: str


class ProfileUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ProfileCreateWithoutRelationsInput']
    connect: List['ProfileWhereUniqueInput']
    set: List['ProfileWhereUniqueInput']
    disconnect: List['ProfileWhereUniqueInput']
    delete: List['ProfileWhereUniqueInput']

    # TODO
    # update: List['ProfileUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ProfileUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ProfileScalarWhereInput']
    # upsert: List['ProfileUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['ProfileCreateOrConnectWithoutRelationsInput']


class ProfileUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ProfileCreateWithoutRelationsInput'
    connect: 'ProfileWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ProfileUpdateInput'
    # upsert: 'ProfileUpsertWithoutRelationsInput'
    # connectOrCreate: 'ProfileCreateOrConnectWithoutRelationsInput'


class ProfileUpsertInput(TypedDict):
    create: 'ProfileCreateInput'
    update: 'ProfileUpdateInput'  # pyright: reportIncompatibleMethodOverride=false


class ProfileOrderByInput(TypedDict, total=False):
    id: 'SortOrder'
    user_id: 'SortOrder'
    bio: 'SortOrder'


# recursive Profile types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/latest/limitations/

ProfileRelationFilter = TypedDict(
    'ProfileRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ProfileListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ProfileInclude(TypedDict, total=False):
    """Profile relational arguments"""
    user: Union[bool, 'UserArgsFromProfile']


    

class PostIncludeFromProfile(TypedDict, total=False):
    """Relational arguments for Profile"""
    author: Union[bool, 'UserArgsFromProfileRecursive1']
    categories: Union[bool, 'FindManyCategoryArgsFromProfileRecursive1']


class PostIncludeFromProfileRecursive1(TypedDict, total=False):
    """Relational arguments for Profile"""
    author: Union[bool, 'UserArgsFromProfileRecursive2']
    categories: Union[bool, 'FindManyCategoryArgsFromProfileRecursive2']


class PostIncludeFromProfileRecursive2(TypedDict, total=False):
    """Relational arguments for Profile"""
    author: Union[bool, 'UserArgsFromProfileRecursive3']
    categories: Union[bool, 'FindManyCategoryArgsFromProfileRecursive3']


class PostIncludeFromProfileRecursive3(TypedDict, total=False):
    """Relational arguments for Profile"""
    author: Union[bool, 'UserArgsFromProfileRecursive4']
    categories: Union[bool, 'FindManyCategoryArgsFromProfileRecursive4']


class PostIncludeFromProfileRecursive4(TypedDict, total=False):
    """Relational arguments for Profile"""

    

class PostArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'PostIncludeFromPostRecursive3'


class PostArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'PostIncludeFromPostRecursive4'


class PostArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    
    

class FindManyPostArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive3'


class FindManyPostArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive4'


class FindManyPostArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    
    

class UserIncludeFromProfile(TypedDict, total=False):
    """Relational arguments for Profile"""
    posts: Union[bool, 'FindManyPostArgsFromProfileRecursive1']
    profile: Union[bool, 'ProfileArgsFromProfileRecursive1']


class UserIncludeFromProfileRecursive1(TypedDict, total=False):
    """Relational arguments for Profile"""
    posts: Union[bool, 'FindManyPostArgsFromProfileRecursive2']
    profile: Union[bool, 'ProfileArgsFromProfileRecursive2']


class UserIncludeFromProfileRecursive2(TypedDict, total=False):
    """Relational arguments for Profile"""
    posts: Union[bool, 'FindManyPostArgsFromProfileRecursive3']
    profile: Union[bool, 'ProfileArgsFromProfileRecursive3']


class UserIncludeFromProfileRecursive3(TypedDict, total=False):
    """Relational arguments for Profile"""
    posts: Union[bool, 'FindManyPostArgsFromProfileRecursive4']
    profile: Union[bool, 'ProfileArgsFromProfileRecursive4']


class UserIncludeFromProfileRecursive4(TypedDict, total=False):
    """Relational arguments for Profile"""

    

class UserArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    
    

class FindManyUserArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    
    

class CategoryIncludeFromProfile(TypedDict, total=False):
    """Relational arguments for Profile"""
    posts: Union[bool, 'FindManyPostArgsFromProfileRecursive1']


class CategoryIncludeFromProfileRecursive1(TypedDict, total=False):
    """Relational arguments for Profile"""
    posts: Union[bool, 'FindManyPostArgsFromProfileRecursive2']


class CategoryIncludeFromProfileRecursive2(TypedDict, total=False):
    """Relational arguments for Profile"""
    posts: Union[bool, 'FindManyPostArgsFromProfileRecursive3']


class CategoryIncludeFromProfileRecursive3(TypedDict, total=False):
    """Relational arguments for Profile"""
    posts: Union[bool, 'FindManyPostArgsFromProfileRecursive4']


class CategoryIncludeFromProfileRecursive4(TypedDict, total=False):
    """Relational arguments for Profile"""

    

class CategoryArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'CategoryIncludeFromCategoryRecursive1'


class CategoryArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'CategoryIncludeFromCategoryRecursive2'


class CategoryArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'CategoryIncludeFromCategoryRecursive3'


class CategoryArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'CategoryIncludeFromCategoryRecursive4'


class CategoryArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    
    

class FindManyCategoryArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive1'


class FindManyCategoryArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive2'


class FindManyCategoryArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive3'


class FindManyCategoryArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive4'


class FindManyCategoryArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    
    

class ProfileIncludeFromProfile(TypedDict, total=False):
    """Relational arguments for Profile"""
    user: Union[bool, 'UserArgsFromProfileRecursive1']


class ProfileIncludeFromProfileRecursive1(TypedDict, total=False):
    """Relational arguments for Profile"""
    user: Union[bool, 'UserArgsFromProfileRecursive2']


class ProfileIncludeFromProfileRecursive2(TypedDict, total=False):
    """Relational arguments for Profile"""
    user: Union[bool, 'UserArgsFromProfileRecursive3']


class ProfileIncludeFromProfileRecursive3(TypedDict, total=False):
    """Relational arguments for Profile"""
    user: Union[bool, 'UserArgsFromProfileRecursive4']


class ProfileIncludeFromProfileRecursive4(TypedDict, total=False):
    """Relational arguments for Profile"""

    

class ProfileArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ProfileIncludeFromProfileRecursive1'


class ProfileArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ProfileIncludeFromProfileRecursive2'


class ProfileArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ProfileIncludeFromProfileRecursive3'


class ProfileArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ProfileIncludeFromProfileRecursive4'


class ProfileArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    
    

class FindManyProfileArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive1'


class FindManyProfileArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive2'


class FindManyProfileArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive3'


class FindManyProfileArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive4'


class FindManyProfileArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    
    

class TypesIncludeFromProfile(TypedDict, total=False):
    """Relational arguments for Profile"""


class TypesIncludeFromProfileRecursive1(TypedDict, total=False):
    """Relational arguments for Profile"""


class TypesIncludeFromProfileRecursive2(TypedDict, total=False):
    """Relational arguments for Profile"""


class TypesIncludeFromProfileRecursive3(TypedDict, total=False):
    """Relational arguments for Profile"""


class TypesIncludeFromProfileRecursive4(TypedDict, total=False):
    """Relational arguments for Profile"""

    

class TypesArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'TypesIncludeFromTypesRecursive1'


class TypesArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'TypesIncludeFromTypesRecursive2'


class TypesArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'TypesIncludeFromTypesRecursive3'


class TypesArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'TypesIncludeFromTypesRecursive4'


class TypesArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    
    

class FindManyTypesArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'TypesWhereInput'
    cursor: 'TypesWhereUniqueInput'
    include: 'TypesIncludeFromTypesRecursive1'


class FindManyTypesArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'TypesWhereInput'
    cursor: 'TypesWhereUniqueInput'
    include: 'TypesIncludeFromTypesRecursive2'


class FindManyTypesArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'TypesWhereInput'
    cursor: 'TypesWhereUniqueInput'
    include: 'TypesIncludeFromTypesRecursive3'


class FindManyTypesArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'TypesWhereInput'
    cursor: 'TypesWhereUniqueInput'
    include: 'TypesIncludeFromTypesRecursive4'


class FindManyTypesArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'TypesWhereInput'
    cursor: 'TypesWhereUniqueInput'
    


FindManyProfileArgs = FindManyProfileArgsFromProfile
FindFirstProfileArgs = FindManyProfileArgsFromProfile


    

class ProfileWhereInput(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[int, 'types.IntFilter']
    user: 'UserRelationFilter'
    user_id: Union[str, 'types.StringFilter']
    bio: Union[str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['ProfileWhereInputRecursive1', List['ProfileWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ProfileWhereInputRecursive1']
    OR: List['ProfileWhereInputRecursive1']
    NOT: List['ProfileWhereInputRecursive1']


class ProfileWhereInputRecursive1(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[int, 'types.IntFilter']
    user: 'UserRelationFilter'
    user_id: Union[str, 'types.StringFilter']
    bio: Union[str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['ProfileWhereInputRecursive2', List['ProfileWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ProfileWhereInputRecursive2']
    OR: List['ProfileWhereInputRecursive2']
    NOT: List['ProfileWhereInputRecursive2']


class ProfileWhereInputRecursive2(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[int, 'types.IntFilter']
    user: 'UserRelationFilter'
    user_id: Union[str, 'types.StringFilter']
    bio: Union[str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['ProfileWhereInputRecursive3', List['ProfileWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ProfileWhereInputRecursive3']
    OR: List['ProfileWhereInputRecursive3']
    NOT: List['ProfileWhereInputRecursive3']


class ProfileWhereInputRecursive3(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[int, 'types.IntFilter']
    user: 'UserRelationFilter'
    user_id: Union[str, 'types.StringFilter']
    bio: Union[str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['ProfileWhereInputRecursive4', List['ProfileWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ProfileWhereInputRecursive4']
    OR: List['ProfileWhereInputRecursive4']
    NOT: List['ProfileWhereInputRecursive4']


class ProfileWhereInputRecursive4(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[int, 'types.IntFilter']
    user: 'UserRelationFilter'
    user_id: Union[str, 'types.StringFilter']
    bio: Union[str, 'types.StringFilter']



ProfileKeys = Literal[
    'id',
    'user',
    'user_id',
    'bio',
]

ProfileRelationalFieldKeys = Literal[
        'user',
    ]

# Types types

class TypesOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Types create method"""
    id: int
    bool: bool
    string: str
    bigint: int
    integer: int
    float_: float
    datetime: datetime.datetime


class TypesCreateInput(TypesOptionalCreateInput):
    """Required arguments to the Types create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class TypesOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Types create method, without relations"""
    id: int
    bool: bool
    string: str
    bigint: int
    integer: int
    float_: float
    datetime: datetime.datetime


class TypesCreateWithoutRelationsInput(TypesOptionalCreateWithoutRelationsInput):
    """Required arguments to the Types create method, without relations"""


class TypesCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'TypesCreateWithoutRelationsInput'
    connect: 'TypesWhereUniqueInput'


class TypesCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['TypesCreateWithoutRelationsInput', List['TypesCreateWithoutRelationsInput']]
    connect: Union['TypesWhereUniqueInput', List['TypesWhereUniqueInput']]


class TypesWhereUniqueInput(TypedDict, total=False):
    """Unique Types arguments for searching"""
    id: int


class TypesUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    bool: bool
    string: str
    bigint: Union[AtomicBigIntInput, int]
    integer: Union[AtomicIntInput, int]
    float_: Union[AtomicFloatInput, float]
    datetime: datetime.datetime


class TypesUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, int]
    bool: bool
    string: str
    bigint: Union[AtomicBigIntInput, int]
    integer: Union[AtomicIntInput, int]
    float_: Union[AtomicFloatInput, float]
    datetime: datetime.datetime


class TypesUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['TypesCreateWithoutRelationsInput']
    connect: List['TypesWhereUniqueInput']
    set: List['TypesWhereUniqueInput']
    disconnect: List['TypesWhereUniqueInput']
    delete: List['TypesWhereUniqueInput']

    # TODO
    # update: List['TypesUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['TypesUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['TypesScalarWhereInput']
    # upsert: List['TypesUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['TypesCreateOrConnectWithoutRelationsInput']


class TypesUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'TypesCreateWithoutRelationsInput'
    connect: 'TypesWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'TypesUpdateInput'
    # upsert: 'TypesUpsertWithoutRelationsInput'
    # connectOrCreate: 'TypesCreateOrConnectWithoutRelationsInput'


class TypesUpsertInput(TypedDict):
    create: 'TypesCreateInput'
    update: 'TypesUpdateInput'  # pyright: reportIncompatibleMethodOverride=false


class TypesOrderByInput(TypedDict, total=False):
    id: 'SortOrder'
    bool: 'SortOrder'
    string: 'SortOrder'
    bigint: 'SortOrder'
    integer: 'SortOrder'
    float_: 'SortOrder'
    datetime: 'SortOrder'


# recursive Types types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/latest/limitations/

TypesRelationFilter = TypedDict(
    'TypesRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class TypesListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class TypesInclude(TypedDict, total=False):
    """Types relational arguments"""


    

class PostIncludeFromTypes(TypedDict, total=False):
    """Relational arguments for Types"""
    author: Union[bool, 'UserArgsFromTypesRecursive1']
    categories: Union[bool, 'FindManyCategoryArgsFromTypesRecursive1']


class PostIncludeFromTypesRecursive1(TypedDict, total=False):
    """Relational arguments for Types"""
    author: Union[bool, 'UserArgsFromTypesRecursive2']
    categories: Union[bool, 'FindManyCategoryArgsFromTypesRecursive2']


class PostIncludeFromTypesRecursive2(TypedDict, total=False):
    """Relational arguments for Types"""
    author: Union[bool, 'UserArgsFromTypesRecursive3']
    categories: Union[bool, 'FindManyCategoryArgsFromTypesRecursive3']


class PostIncludeFromTypesRecursive3(TypedDict, total=False):
    """Relational arguments for Types"""
    author: Union[bool, 'UserArgsFromTypesRecursive4']
    categories: Union[bool, 'FindManyCategoryArgsFromTypesRecursive4']


class PostIncludeFromTypesRecursive4(TypedDict, total=False):
    """Relational arguments for Types"""

    

class PostArgsFromTypes(TypedDict, total=False):
    """Arguments for Types"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromTypesRecursive1(TypedDict, total=False):
    """Arguments for Types"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromTypesRecursive2(TypedDict, total=False):
    """Arguments for Types"""
    include: 'PostIncludeFromPostRecursive3'


class PostArgsFromTypesRecursive3(TypedDict, total=False):
    """Arguments for Types"""
    include: 'PostIncludeFromPostRecursive4'


class PostArgsFromTypesRecursive4(TypedDict, total=False):
    """Arguments for Types"""
    
    

class FindManyPostArgsFromTypes(TypedDict, total=False):
    """Arguments for Types"""
    take: int
    skip: int
    order_by: Union['TypesOrderByInput', List['TypesOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromTypesRecursive1(TypedDict, total=False):
    """Arguments for Types"""
    take: int
    skip: int
    order_by: Union['TypesOrderByInput', List['TypesOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromTypesRecursive2(TypedDict, total=False):
    """Arguments for Types"""
    take: int
    skip: int
    order_by: Union['TypesOrderByInput', List['TypesOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive3'


class FindManyPostArgsFromTypesRecursive3(TypedDict, total=False):
    """Arguments for Types"""
    take: int
    skip: int
    order_by: Union['TypesOrderByInput', List['TypesOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive4'


class FindManyPostArgsFromTypesRecursive4(TypedDict, total=False):
    """Arguments for Types"""
    take: int
    skip: int
    order_by: Union['TypesOrderByInput', List['TypesOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    
    

class UserIncludeFromTypes(TypedDict, total=False):
    """Relational arguments for Types"""
    posts: Union[bool, 'FindManyPostArgsFromTypesRecursive1']
    profile: Union[bool, 'ProfileArgsFromTypesRecursive1']


class UserIncludeFromTypesRecursive1(TypedDict, total=False):
    """Relational arguments for Types"""
    posts: Union[bool, 'FindManyPostArgsFromTypesRecursive2']
    profile: Union[bool, 'ProfileArgsFromTypesRecursive2']


class UserIncludeFromTypesRecursive2(TypedDict, total=False):
    """Relational arguments for Types"""
    posts: Union[bool, 'FindManyPostArgsFromTypesRecursive3']
    profile: Union[bool, 'ProfileArgsFromTypesRecursive3']


class UserIncludeFromTypesRecursive3(TypedDict, total=False):
    """Relational arguments for Types"""
    posts: Union[bool, 'FindManyPostArgsFromTypesRecursive4']
    profile: Union[bool, 'ProfileArgsFromTypesRecursive4']


class UserIncludeFromTypesRecursive4(TypedDict, total=False):
    """Relational arguments for Types"""

    

class UserArgsFromTypes(TypedDict, total=False):
    """Arguments for Types"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromTypesRecursive1(TypedDict, total=False):
    """Arguments for Types"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromTypesRecursive2(TypedDict, total=False):
    """Arguments for Types"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromTypesRecursive3(TypedDict, total=False):
    """Arguments for Types"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromTypesRecursive4(TypedDict, total=False):
    """Arguments for Types"""
    
    

class FindManyUserArgsFromTypes(TypedDict, total=False):
    """Arguments for Types"""
    take: int
    skip: int
    order_by: Union['TypesOrderByInput', List['TypesOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromTypesRecursive1(TypedDict, total=False):
    """Arguments for Types"""
    take: int
    skip: int
    order_by: Union['TypesOrderByInput', List['TypesOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromTypesRecursive2(TypedDict, total=False):
    """Arguments for Types"""
    take: int
    skip: int
    order_by: Union['TypesOrderByInput', List['TypesOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromTypesRecursive3(TypedDict, total=False):
    """Arguments for Types"""
    take: int
    skip: int
    order_by: Union['TypesOrderByInput', List['TypesOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromTypesRecursive4(TypedDict, total=False):
    """Arguments for Types"""
    take: int
    skip: int
    order_by: Union['TypesOrderByInput', List['TypesOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    
    

class CategoryIncludeFromTypes(TypedDict, total=False):
    """Relational arguments for Types"""
    posts: Union[bool, 'FindManyPostArgsFromTypesRecursive1']


class CategoryIncludeFromTypesRecursive1(TypedDict, total=False):
    """Relational arguments for Types"""
    posts: Union[bool, 'FindManyPostArgsFromTypesRecursive2']


class CategoryIncludeFromTypesRecursive2(TypedDict, total=False):
    """Relational arguments for Types"""
    posts: Union[bool, 'FindManyPostArgsFromTypesRecursive3']


class CategoryIncludeFromTypesRecursive3(TypedDict, total=False):
    """Relational arguments for Types"""
    posts: Union[bool, 'FindManyPostArgsFromTypesRecursive4']


class CategoryIncludeFromTypesRecursive4(TypedDict, total=False):
    """Relational arguments for Types"""

    

class CategoryArgsFromTypes(TypedDict, total=False):
    """Arguments for Types"""
    include: 'CategoryIncludeFromCategoryRecursive1'


class CategoryArgsFromTypesRecursive1(TypedDict, total=False):
    """Arguments for Types"""
    include: 'CategoryIncludeFromCategoryRecursive2'


class CategoryArgsFromTypesRecursive2(TypedDict, total=False):
    """Arguments for Types"""
    include: 'CategoryIncludeFromCategoryRecursive3'


class CategoryArgsFromTypesRecursive3(TypedDict, total=False):
    """Arguments for Types"""
    include: 'CategoryIncludeFromCategoryRecursive4'


class CategoryArgsFromTypesRecursive4(TypedDict, total=False):
    """Arguments for Types"""
    
    

class FindManyCategoryArgsFromTypes(TypedDict, total=False):
    """Arguments for Types"""
    take: int
    skip: int
    order_by: Union['TypesOrderByInput', List['TypesOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive1'


class FindManyCategoryArgsFromTypesRecursive1(TypedDict, total=False):
    """Arguments for Types"""
    take: int
    skip: int
    order_by: Union['TypesOrderByInput', List['TypesOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive2'


class FindManyCategoryArgsFromTypesRecursive2(TypedDict, total=False):
    """Arguments for Types"""
    take: int
    skip: int
    order_by: Union['TypesOrderByInput', List['TypesOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive3'


class FindManyCategoryArgsFromTypesRecursive3(TypedDict, total=False):
    """Arguments for Types"""
    take: int
    skip: int
    order_by: Union['TypesOrderByInput', List['TypesOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive4'


class FindManyCategoryArgsFromTypesRecursive4(TypedDict, total=False):
    """Arguments for Types"""
    take: int
    skip: int
    order_by: Union['TypesOrderByInput', List['TypesOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    
    

class ProfileIncludeFromTypes(TypedDict, total=False):
    """Relational arguments for Types"""
    user: Union[bool, 'UserArgsFromTypesRecursive1']


class ProfileIncludeFromTypesRecursive1(TypedDict, total=False):
    """Relational arguments for Types"""
    user: Union[bool, 'UserArgsFromTypesRecursive2']


class ProfileIncludeFromTypesRecursive2(TypedDict, total=False):
    """Relational arguments for Types"""
    user: Union[bool, 'UserArgsFromTypesRecursive3']


class ProfileIncludeFromTypesRecursive3(TypedDict, total=False):
    """Relational arguments for Types"""
    user: Union[bool, 'UserArgsFromTypesRecursive4']


class ProfileIncludeFromTypesRecursive4(TypedDict, total=False):
    """Relational arguments for Types"""

    

class ProfileArgsFromTypes(TypedDict, total=False):
    """Arguments for Types"""
    include: 'ProfileIncludeFromProfileRecursive1'


class ProfileArgsFromTypesRecursive1(TypedDict, total=False):
    """Arguments for Types"""
    include: 'ProfileIncludeFromProfileRecursive2'


class ProfileArgsFromTypesRecursive2(TypedDict, total=False):
    """Arguments for Types"""
    include: 'ProfileIncludeFromProfileRecursive3'


class ProfileArgsFromTypesRecursive3(TypedDict, total=False):
    """Arguments for Types"""
    include: 'ProfileIncludeFromProfileRecursive4'


class ProfileArgsFromTypesRecursive4(TypedDict, total=False):
    """Arguments for Types"""
    
    

class FindManyProfileArgsFromTypes(TypedDict, total=False):
    """Arguments for Types"""
    take: int
    skip: int
    order_by: Union['TypesOrderByInput', List['TypesOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive1'


class FindManyProfileArgsFromTypesRecursive1(TypedDict, total=False):
    """Arguments for Types"""
    take: int
    skip: int
    order_by: Union['TypesOrderByInput', List['TypesOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive2'


class FindManyProfileArgsFromTypesRecursive2(TypedDict, total=False):
    """Arguments for Types"""
    take: int
    skip: int
    order_by: Union['TypesOrderByInput', List['TypesOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive3'


class FindManyProfileArgsFromTypesRecursive3(TypedDict, total=False):
    """Arguments for Types"""
    take: int
    skip: int
    order_by: Union['TypesOrderByInput', List['TypesOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive4'


class FindManyProfileArgsFromTypesRecursive4(TypedDict, total=False):
    """Arguments for Types"""
    take: int
    skip: int
    order_by: Union['TypesOrderByInput', List['TypesOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    
    

class TypesIncludeFromTypes(TypedDict, total=False):
    """Relational arguments for Types"""


class TypesIncludeFromTypesRecursive1(TypedDict, total=False):
    """Relational arguments for Types"""


class TypesIncludeFromTypesRecursive2(TypedDict, total=False):
    """Relational arguments for Types"""


class TypesIncludeFromTypesRecursive3(TypedDict, total=False):
    """Relational arguments for Types"""


class TypesIncludeFromTypesRecursive4(TypedDict, total=False):
    """Relational arguments for Types"""

    

class TypesArgsFromTypes(TypedDict, total=False):
    """Arguments for Types"""
    include: 'TypesIncludeFromTypesRecursive1'


class TypesArgsFromTypesRecursive1(TypedDict, total=False):
    """Arguments for Types"""
    include: 'TypesIncludeFromTypesRecursive2'


class TypesArgsFromTypesRecursive2(TypedDict, total=False):
    """Arguments for Types"""
    include: 'TypesIncludeFromTypesRecursive3'


class TypesArgsFromTypesRecursive3(TypedDict, total=False):
    """Arguments for Types"""
    include: 'TypesIncludeFromTypesRecursive4'


class TypesArgsFromTypesRecursive4(TypedDict, total=False):
    """Arguments for Types"""
    
    

class FindManyTypesArgsFromTypes(TypedDict, total=False):
    """Arguments for Types"""
    take: int
    skip: int
    order_by: Union['TypesOrderByInput', List['TypesOrderByInput']]
    where: 'TypesWhereInput'
    cursor: 'TypesWhereUniqueInput'
    include: 'TypesIncludeFromTypesRecursive1'


class FindManyTypesArgsFromTypesRecursive1(TypedDict, total=False):
    """Arguments for Types"""
    take: int
    skip: int
    order_by: Union['TypesOrderByInput', List['TypesOrderByInput']]
    where: 'TypesWhereInput'
    cursor: 'TypesWhereUniqueInput'
    include: 'TypesIncludeFromTypesRecursive2'


class FindManyTypesArgsFromTypesRecursive2(TypedDict, total=False):
    """Arguments for Types"""
    take: int
    skip: int
    order_by: Union['TypesOrderByInput', List['TypesOrderByInput']]
    where: 'TypesWhereInput'
    cursor: 'TypesWhereUniqueInput'
    include: 'TypesIncludeFromTypesRecursive3'


class FindManyTypesArgsFromTypesRecursive3(TypedDict, total=False):
    """Arguments for Types"""
    take: int
    skip: int
    order_by: Union['TypesOrderByInput', List['TypesOrderByInput']]
    where: 'TypesWhereInput'
    cursor: 'TypesWhereUniqueInput'
    include: 'TypesIncludeFromTypesRecursive4'


class FindManyTypesArgsFromTypesRecursive4(TypedDict, total=False):
    """Arguments for Types"""
    take: int
    skip: int
    order_by: Union['TypesOrderByInput', List['TypesOrderByInput']]
    where: 'TypesWhereInput'
    cursor: 'TypesWhereUniqueInput'
    


FindManyTypesArgs = FindManyTypesArgsFromTypes
FindFirstTypesArgs = FindManyTypesArgsFromTypes


    

class TypesWhereInput(TypedDict, total=False):
    """Types arguments for searching"""
    id: Union[int, 'types.IntFilter']
    bool: Union[bool, 'types.BooleanFilter']
    string: Union[str, 'types.StringFilter']
    bigint: Union[int, 'types.BigIntFilter']
    integer: Union[int, 'types.IntFilter']
    float_: Union[float, 'types.FloatFilter']
    datetime: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['TypesWhereInputRecursive1', List['TypesWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['TypesWhereInputRecursive1']
    OR: List['TypesWhereInputRecursive1']
    NOT: List['TypesWhereInputRecursive1']


class TypesWhereInputRecursive1(TypedDict, total=False):
    """Types arguments for searching"""
    id: Union[int, 'types.IntFilter']
    bool: Union[bool, 'types.BooleanFilter']
    string: Union[str, 'types.StringFilter']
    bigint: Union[int, 'types.BigIntFilter']
    integer: Union[int, 'types.IntFilter']
    float_: Union[float, 'types.FloatFilter']
    datetime: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['TypesWhereInputRecursive2', List['TypesWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['TypesWhereInputRecursive2']
    OR: List['TypesWhereInputRecursive2']
    NOT: List['TypesWhereInputRecursive2']


class TypesWhereInputRecursive2(TypedDict, total=False):
    """Types arguments for searching"""
    id: Union[int, 'types.IntFilter']
    bool: Union[bool, 'types.BooleanFilter']
    string: Union[str, 'types.StringFilter']
    bigint: Union[int, 'types.BigIntFilter']
    integer: Union[int, 'types.IntFilter']
    float_: Union[float, 'types.FloatFilter']
    datetime: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['TypesWhereInputRecursive3', List['TypesWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['TypesWhereInputRecursive3']
    OR: List['TypesWhereInputRecursive3']
    NOT: List['TypesWhereInputRecursive3']


class TypesWhereInputRecursive3(TypedDict, total=False):
    """Types arguments for searching"""
    id: Union[int, 'types.IntFilter']
    bool: Union[bool, 'types.BooleanFilter']
    string: Union[str, 'types.StringFilter']
    bigint: Union[int, 'types.BigIntFilter']
    integer: Union[int, 'types.IntFilter']
    float_: Union[float, 'types.FloatFilter']
    datetime: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['TypesWhereInputRecursive4', List['TypesWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['TypesWhereInputRecursive4']
    OR: List['TypesWhereInputRecursive4']
    NOT: List['TypesWhereInputRecursive4']


class TypesWhereInputRecursive4(TypedDict, total=False):
    """Types arguments for searching"""
    id: Union[int, 'types.IntFilter']
    bool: Union[bool, 'types.BooleanFilter']
    string: Union[str, 'types.StringFilter']
    bigint: Union[int, 'types.BigIntFilter']
    integer: Union[int, 'types.IntFilter']
    float_: Union[float, 'types.FloatFilter']
    datetime: Union[datetime.datetime, 'types.DateTimeFilter']



TypesKeys = Literal[
    'id',
    'bool',
    'string',
    'bigint',
    'integer',
    'float_',
    'datetime',
]

TypesRelationalFieldKeys = _NoneType



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields