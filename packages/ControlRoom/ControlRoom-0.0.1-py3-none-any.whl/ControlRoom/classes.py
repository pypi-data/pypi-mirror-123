# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
import _ControlRoom
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


from units import *


def registerPythonUnitsClass(*args):
  return _ControlRoom.registerPythonUnitsClass(*args)
registerPythonUnitsClass = _ControlRoom.registerPythonUnitsClass

def registerPythonScalarClass(*args):
  return _ControlRoom.registerPythonScalarClass(*args)
registerPythonScalarClass = _ControlRoom.registerPythonScalarClass

def registerPythonVectorClass(*args):
  return _ControlRoom.registerPythonVectorClass(*args)
registerPythonVectorClass = _ControlRoom.registerPythonVectorClass
class EnergyRange(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ControlRoom.delete_EnergyRange
    __del__ = lambda self : None;
EnergyRange_swigregister = _ControlRoom.EnergyRange_swigregister
EnergyRange_swigregister(EnergyRange)

class SpeedRange(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ControlRoom.delete_SpeedRange
    __del__ = lambda self : None;
SpeedRange_swigregister = _ControlRoom.SpeedRange_swigregister
SpeedRange_swigregister(SpeedRange)

class AngleRange(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ControlRoom.delete_AngleRange
    __del__ = lambda self : None;
AngleRange_swigregister = _ControlRoom.AngleRange_swigregister
AngleRange_swigregister(AngleRange)

class DoubleRange(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ControlRoom.delete_DoubleRange
    __del__ = lambda self : None;
DoubleRange_swigregister = _ControlRoom.DoubleRange_swigregister
DoubleRange_swigregister(DoubleRange)

class Spectrum(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ControlRoom.new_Spectrum(*args)
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(self, *args): return _ControlRoom.Spectrum___getitem__(self, *args)
    def bin(self, *args): return _ControlRoom.Spectrum_bin(self, *args)
    def __setitem__(self, *args): return _ControlRoom.Spectrum___setitem__(self, *args)
    def Emin(self): return _ControlRoom.Spectrum_Emin(self)
    def Emax(self): return _ControlRoom.Spectrum_Emax(self)
    def bins(self): return _ControlRoom.Spectrum_bins(self)
    def binWidth(self): return _ControlRoom.Spectrum_binWidth(self)
    def total(self): return _ControlRoom.Spectrum_total(self)
    def __sum(self, *args): return _ControlRoom.Spectrum___sum(self, *args)
    def sum(self,Emin=None,Emax=None):
        if Emin is None: Emin = self.Emin()
        if Emax is None: Emax = self.Emax()
        return self.__sum(Emin,Emax)

    def mean(self): return _ControlRoom.Spectrum_mean(self)
    def stdDeviation(self): return _ControlRoom.Spectrum_stdDeviation(self)
    def skewness(self): return _ControlRoom.Spectrum_skewness(self)
    def clear(self): return _ControlRoom.Spectrum_clear(self)
    def rebin(self, *args): return _ControlRoom.Spectrum_rebin(self, *args)
    def __iter__(self):
        E = self.Emin() + self.binWidth()/2
        dE = self.binWidth()
        i = 0
        while E < self.Emax():
            yield E, self.bin(i)
            E += dE
            i += 1

    __safe_for_unpickling__ = 1
    def __reduce__(self):
        state = [ ((E/MeV).value, counts.value) for E,counts in self ]
        return (Spectrum,
                (self.Emin(), self.Emax(), self.bins()),
                state)
    def __setstate__(self,state):
        for (E,counts) in state:
            self[E*MeV] = counts/(meter**3 * second)
    def __export__(self,file):
        data = [ ((E/MeV).value, counts.value) for E,counts in self ]
        file.write('# Emin\t\tEmax\t\tbins\n')
        file.write('# %f\t%f\t%d\n' % (self.Emin()/MeV,
                                       self.Emax()/MeV, self.bins()))
        file.write('# Energy\tcounts\n')
        for E,c in data:
            file.write('%f\t%g\n' % (E,c))

    def __add__(self, *args): return _ControlRoom.Spectrum___add__(self, *args)
    def __sub__(self, *args): return _ControlRoom.Spectrum___sub__(self, *args)
    def __mul__(self, *args): return _ControlRoom.Spectrum___mul__(self, *args)
    def __rmul__(self, *args): return _ControlRoom.Spectrum___rmul__(self, *args)
    def __div__(self, *args): return _ControlRoom.Spectrum___div__(self, *args)
    __swig_destroy__ = _ControlRoom.delete_Spectrum
    __del__ = lambda self : None;
Spectrum_swigregister = _ControlRoom.Spectrum_swigregister
Spectrum_swigregister(Spectrum)

class VolumeSpectrum(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ControlRoom.new_VolumeSpectrum(*args)
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(self, *args): return _ControlRoom.VolumeSpectrum___getitem__(self, *args)
    def bin(self, *args): return _ControlRoom.VolumeSpectrum_bin(self, *args)
    def __setitem__(self, *args): return _ControlRoom.VolumeSpectrum___setitem__(self, *args)
    def Emin(self): return _ControlRoom.VolumeSpectrum_Emin(self)
    def Emax(self): return _ControlRoom.VolumeSpectrum_Emax(self)
    def bins(self): return _ControlRoom.VolumeSpectrum_bins(self)
    def binWidth(self): return _ControlRoom.VolumeSpectrum_binWidth(self)
    def total(self): return _ControlRoom.VolumeSpectrum_total(self)
    def __sum(self, *args): return _ControlRoom.VolumeSpectrum___sum(self, *args)
    def sum(self,Emin=None,Emax=None):
        if Emin is None: Emin = self.Emin()
        if Emax is None: Emax = self.Emax()
        return self.__sum(Emin,Emax)

    def mean(self): return _ControlRoom.VolumeSpectrum_mean(self)
    def stdDeviation(self): return _ControlRoom.VolumeSpectrum_stdDeviation(self)
    def skewness(self): return _ControlRoom.VolumeSpectrum_skewness(self)
    def clear(self): return _ControlRoom.VolumeSpectrum_clear(self)
    def rebin(self, *args): return _ControlRoom.VolumeSpectrum_rebin(self, *args)
    def __iter__(self):
        E = self.Emin() + self.binWidth()/2
        dE = self.binWidth()
        i = 0
        while E < self.Emax():
            yield E, self.bin(i)
            E += dE
            i += 1

    __safe_for_unpickling__ = 1
    def __reduce__(self):
        state = [ ((E/MeV).value, counts.value) for E,counts in self ]
        return (VolumeSpectrum,
                (self.Emin(), self.Emax(), self.bins()),
                state)
    def __setstate__(self,state):
        for (E,counts) in state:
            self[E*MeV] = counts/second
    def __export__(self,file):
        data = [ ((E/MeV).value, counts.value) for E,counts in self ]
        file.write('# Emin\t\tEmax\t\tbins\n')
        file.write('# %f\t%f\t%d\n' % (self.Emin()/MeV,
                                       self.Emax()/MeV, self.bins()))
        file.write('# Energy\tcounts\n')
        for E,c in data:
            file.write('%f\t%g\n' % (E,c))

    def __add__(self, *args): return _ControlRoom.VolumeSpectrum___add__(self, *args)
    def __sub__(self, *args): return _ControlRoom.VolumeSpectrum___sub__(self, *args)
    def __mul__(self, *args): return _ControlRoom.VolumeSpectrum___mul__(self, *args)
    def __rmul__(self, *args): return _ControlRoom.VolumeSpectrum___rmul__(self, *args)
    def __div__(self, *args): return _ControlRoom.VolumeSpectrum___div__(self, *args)
    __swig_destroy__ = _ControlRoom.delete_VolumeSpectrum
    __del__ = lambda self : None;
VolumeSpectrum_swigregister = _ControlRoom.VolumeSpectrum_swigregister
VolumeSpectrum_swigregister(VolumeSpectrum)

class Particle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _ControlRoom.new_Particle(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    def m(self): return _ControlRoom.Particle_m(self)
    def q(self): return _ControlRoom.Particle_q(self)
    def Z(self): return _ControlRoom.Particle_Z(self)
    m = property(m,None,None)
    q = property(q,None,None)
    Z = property(Z,None,None)
    def __eq__(self,other):
        return self.m == other.m and self.Z == other.Z
    def __ne__(self,other):
        return self.m != other.m or self.Z != other.Z

    __swig_destroy__ = _ControlRoom.delete_Particle
    __del__ = lambda self : None;
Particle_swigregister = _ControlRoom.Particle_swigregister
Particle_swigregister(Particle)

class Nucleus(Particle):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _ControlRoom.new_Nucleus(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    def A(self): return _ControlRoom.Nucleus_A(self)
    A = property(A,None,None)

    __swig_destroy__ = _ControlRoom.delete_Nucleus
    __del__ = lambda self : None;
Nucleus_swigregister = _ControlRoom.Nucleus_swigregister
Nucleus_swigregister(Nucleus)

class Electron(Particle):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ControlRoom.new_Electron()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_Electron
    __del__ = lambda self : None;
Electron_swigregister = _ControlRoom.Electron_swigregister
Electron_swigregister(Electron)

class Neutron(Nucleus):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ControlRoom.new_Neutron()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_Neutron
    __del__ = lambda self : None;
Neutron_swigregister = _ControlRoom.Neutron_swigregister
Neutron_swigregister(Neutron)

class Proton(Nucleus):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ControlRoom.new_Proton()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_Proton
    __del__ = lambda self : None;
Proton_swigregister = _ControlRoom.Proton_swigregister
Proton_swigregister(Proton)

class Deuteron(Nucleus):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ControlRoom.new_Deuteron()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_Deuteron
    __del__ = lambda self : None;
Deuteron_swigregister = _ControlRoom.Deuteron_swigregister
Deuteron_swigregister(Deuteron)

class Triton(Nucleus):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ControlRoom.new_Triton()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_Triton
    __del__ = lambda self : None;
Triton_swigregister = _ControlRoom.Triton_swigregister
Triton_swigregister(Triton)

class Helium3(Nucleus):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ControlRoom.new_Helium3()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_Helium3
    __del__ = lambda self : None;
Helium3_swigregister = _ControlRoom.Helium3_swigregister
Helium3_swigregister(Helium3)

class Alpha(Nucleus):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ControlRoom.new_Alpha()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_Alpha
    __del__ = lambda self : None;
Alpha_swigregister = _ControlRoom.Alpha_swigregister
Alpha_swigregister(Alpha)

class Lithium6(Nucleus):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ControlRoom.new_Lithium6()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_Lithium6
    __del__ = lambda self : None;
Lithium6_swigregister = _ControlRoom.Lithium6_swigregister
Lithium6_swigregister(Lithium6)

class Lithium7(Nucleus):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ControlRoom.new_Lithium7()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_Lithium7
    __del__ = lambda self : None;
Lithium7_swigregister = _ControlRoom.Lithium7_swigregister
Lithium7_swigregister(Lithium7)

class Beryllium9(Nucleus):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ControlRoom.new_Beryllium9()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_Beryllium9
    __del__ = lambda self : None;
Beryllium9_swigregister = _ControlRoom.Beryllium9_swigregister
Beryllium9_swigregister(Beryllium9)

class Boron10(Nucleus):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ControlRoom.new_Boron10()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_Boron10
    __del__ = lambda self : None;
Boron10_swigregister = _ControlRoom.Boron10_swigregister
Boron10_swigregister(Boron10)

class Boron11(Nucleus):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ControlRoom.new_Boron11()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_Boron11
    __del__ = lambda self : None;
Boron11_swigregister = _ControlRoom.Boron11_swigregister
Boron11_swigregister(Boron11)

class Carbon12(Nucleus):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ControlRoom.new_Carbon12()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_Carbon12
    __del__ = lambda self : None;
Carbon12_swigregister = _ControlRoom.Carbon12_swigregister
Carbon12_swigregister(Carbon12)

class Carbon13(Nucleus):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ControlRoom.new_Carbon13()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_Carbon13
    __del__ = lambda self : None;
Carbon13_swigregister = _ControlRoom.Carbon13_swigregister
Carbon13_swigregister(Carbon13)

class CrossSection(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __call__(self, *args): return _ControlRoom.CrossSection___call__(self, *args)
    def sigmaTot(self, *args): return _ControlRoom.CrossSection_sigmaTot(self, *args)
    __swig_destroy__ = _ControlRoom.delete_CrossSection
    __del__ = lambda self : None;
CrossSection_swigregister = _ControlRoom.CrossSection_swigregister
CrossSection_swigregister(CrossSection)

class ConstantCrossSection(CrossSection):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ControlRoom.new_ConstantCrossSection(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_ConstantCrossSection
    __del__ = lambda self : None;
ConstantCrossSection_swigregister = _ControlRoom.ConstantCrossSection_swigregister
ConstantCrossSection_swigregister(ConstantCrossSection)

class CoulombCrossSection(CrossSection):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ControlRoom.new_CoulombCrossSection(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_CoulombCrossSection
    __del__ = lambda self : None;
CoulombCrossSection_swigregister = _ControlRoom.CoulombCrossSection_swigregister
CoulombCrossSection_swigregister(CoulombCrossSection)

class DTCrossSection(CrossSection):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ControlRoom.new_DTCrossSection()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_DTCrossSection
    __del__ = lambda self : None;
DTCrossSection_swigregister = _ControlRoom.DTCrossSection_swigregister
DTCrossSection_swigregister(DTCrossSection)

class DDN3HeCrossSection(CrossSection):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ControlRoom.new_DDN3HeCrossSection()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_DDN3HeCrossSection
    __del__ = lambda self : None;
DDN3HeCrossSection_swigregister = _ControlRoom.DDN3HeCrossSection_swigregister
DDN3HeCrossSection_swigregister(DDN3HeCrossSection)

class AlphaTCrossSection(CrossSection):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ControlRoom.new_AlphaTCrossSection()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_AlphaTCrossSection
    __del__ = lambda self : None;
AlphaTCrossSection_swigregister = _ControlRoom.AlphaTCrossSection_swigregister
AlphaTCrossSection_swigregister(AlphaTCrossSection)

class AlphaDCrossSection(CrossSection):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ControlRoom.new_AlphaDCrossSection()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_AlphaDCrossSection
    __del__ = lambda self : None;
AlphaDCrossSection_swigregister = _ControlRoom.AlphaDCrossSection_swigregister
AlphaDCrossSection_swigregister(AlphaDCrossSection)

class DPCrossSection(CrossSection):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ControlRoom.new_DPCrossSection()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_DPCrossSection
    __del__ = lambda self : None;
DPCrossSection_swigregister = _ControlRoom.DPCrossSection_swigregister
DPCrossSection_swigregister(DPCrossSection)

class D3HeAlphaPCrossSection(CrossSection):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ControlRoom.new_D3HeAlphaPCrossSection()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_D3HeAlphaPCrossSection
    __del__ = lambda self : None;
D3HeAlphaPCrossSection_swigregister = _ControlRoom.D3HeAlphaPCrossSection_swigregister
D3HeAlphaPCrossSection_swigregister(D3HeAlphaPCrossSection)

class D3HeCrossSection(CrossSection):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ControlRoom.new_D3HeCrossSection()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_D3HeCrossSection
    __del__ = lambda self : None;
D3HeCrossSection_swigregister = _ControlRoom.D3HeCrossSection_swigregister
D3HeCrossSection_swigregister(D3HeCrossSection)

class ReactionResults(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    E1 = _swig_property(_ControlRoom.ReactionResults_E1_get)
    E2 = _swig_property(_ControlRoom.ReactionResults_E2_get)
    E3 = _swig_property(_ControlRoom.ReactionResults_E3_get)
    v3CM = _swig_property(_ControlRoom.ReactionResults_v3CM_get)
    cosTheta1 = _swig_property(_ControlRoom.ReactionResults_cosTheta1_get)
    cosTheta2 = _swig_property(_ControlRoom.ReactionResults_cosTheta2_get)
    vRel = _swig_property(_ControlRoom.ReactionResults_vRel_get)
    vCM = _swig_property(_ControlRoom.ReactionResults_vCM_get)
    K = _swig_property(_ControlRoom.ReactionResults_K_get)
    def __init__(self): 
        this = _ControlRoom.new_ReactionResults()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_ReactionResults
    __del__ = lambda self : None;
ReactionResults_swigregister = _ControlRoom.ReactionResults_swigregister
ReactionResults_swigregister(ReactionResults)

class Reaction(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ControlRoom.new_Reaction(*args)
        try: self.this.append(this)
        except: self.this = this
    def reactant1(self): return _ControlRoom.Reaction_reactant1(self)
    def reactant2(self): return _ControlRoom.Reaction_reactant2(self)
    def product1(self): return _ControlRoom.Reaction_product1(self)
    def product2(self): return _ControlRoom.Reaction_product2(self)
    def Q(self): return _ControlRoom.Reaction_Q(self)
    def sigmaTot(self, *args): return _ControlRoom.Reaction_sigmaTot(self, *args)
    def sigma(self, *args): return _ControlRoom.Reaction_sigma(self, *args)
    reactant1 = property(reactant1,None,None)
    reactant2 = property(reactant2,None,None)
    product1 = property(product1,None,None)
    product2 = property(product2,None,None)
    Q = property(Q,None,None)

    def results(self, *args): return _ControlRoom.Reaction_results(self, *args)
    __swig_destroy__ = _ControlRoom.delete_Reaction
    __del__ = lambda self : None;
Reaction_swigregister = _ControlRoom.Reaction_swigregister
Reaction_swigregister(Reaction)

class Scattering(Reaction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _ControlRoom.new_Scattering(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_Scattering
    __del__ = lambda self : None;
Scattering_swigregister = _ControlRoom.Scattering_swigregister
Scattering_swigregister(Scattering)

class DDN3HeReaction(Reaction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ControlRoom.new_DDN3HeReaction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_DDN3HeReaction
    __del__ = lambda self : None;
DDN3HeReaction_swigregister = _ControlRoom.DDN3HeReaction_swigregister
DDN3HeReaction_swigregister(DDN3HeReaction)

class DTReaction(Reaction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ControlRoom.new_DTReaction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_DTReaction
    __del__ = lambda self : None;
DTReaction_swigregister = _ControlRoom.DTReaction_swigregister
DTReaction_swigregister(DTReaction)

class D3HeAlphaPReaction(Reaction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ControlRoom.new_D3HeAlphaPReaction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_D3HeAlphaPReaction
    __del__ = lambda self : None;
D3HeAlphaPReaction_swigregister = _ControlRoom.D3HeAlphaPReaction_swigregister
D3HeAlphaPReaction_swigregister(D3HeAlphaPReaction)

class AlphaDScattering(Reaction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _ControlRoom.new_AlphaDScattering(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_AlphaDScattering
    __del__ = lambda self : None;
AlphaDScattering_swigregister = _ControlRoom.AlphaDScattering_swigregister
AlphaDScattering_swigregister(AlphaDScattering)

class AlphaTScattering(Reaction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _ControlRoom.new_AlphaTScattering(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_AlphaTScattering
    __del__ = lambda self : None;
AlphaTScattering_swigregister = _ControlRoom.AlphaTScattering_swigregister
AlphaTScattering_swigregister(AlphaTScattering)

class DPScattering(Reaction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _ControlRoom.new_DPScattering(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_DPScattering
    __del__ = lambda self : None;
DPScattering_swigregister = _ControlRoom.DPScattering_swigregister
DPScattering_swigregister(DPScattering)

class D3HeScattering(Reaction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _ControlRoom.new_D3HeScattering(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_D3HeScattering
    __del__ = lambda self : None;
D3HeScattering_swigregister = _ControlRoom.D3HeScattering_swigregister
D3HeScattering_swigregister(D3HeScattering)

class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ControlRoom.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _ControlRoom.SwigPyIterator_value(self)
    def incr(self, n = 1): return _ControlRoom.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _ControlRoom.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _ControlRoom.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _ControlRoom.SwigPyIterator_equal(self, *args)
    def copy(self): return _ControlRoom.SwigPyIterator_copy(self)
    def next(self): return _ControlRoom.SwigPyIterator_next(self)
    def __next__(self): return _ControlRoom.SwigPyIterator___next__(self)
    def previous(self): return _ControlRoom.SwigPyIterator_previous(self)
    def advance(self, *args): return _ControlRoom.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _ControlRoom.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _ControlRoom.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _ControlRoom.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _ControlRoom.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _ControlRoom.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _ControlRoom.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _ControlRoom.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class DoubleVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self): return _ControlRoom.DoubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ControlRoom.DoubleVector___nonzero__(self)
    def __bool__(self): return _ControlRoom.DoubleVector___bool__(self)
    def __len__(self): return _ControlRoom.DoubleVector___len__(self)
    def pop(self): return _ControlRoom.DoubleVector_pop(self)
    def __getslice__(self, *args): return _ControlRoom.DoubleVector___getslice__(self, *args)
    def __setslice__(self, *args): return _ControlRoom.DoubleVector___setslice__(self, *args)
    def __delslice__(self, *args): return _ControlRoom.DoubleVector___delslice__(self, *args)
    def __delitem__(self, *args): return _ControlRoom.DoubleVector___delitem__(self, *args)
    def __getitem__(self, *args): return _ControlRoom.DoubleVector___getitem__(self, *args)
    def __setitem__(self, *args): return _ControlRoom.DoubleVector___setitem__(self, *args)
    def append(self, *args): return _ControlRoom.DoubleVector_append(self, *args)
    def empty(self): return _ControlRoom.DoubleVector_empty(self)
    def size(self): return _ControlRoom.DoubleVector_size(self)
    def clear(self): return _ControlRoom.DoubleVector_clear(self)
    def swap(self, *args): return _ControlRoom.DoubleVector_swap(self, *args)
    def get_allocator(self): return _ControlRoom.DoubleVector_get_allocator(self)
    def begin(self): return _ControlRoom.DoubleVector_begin(self)
    def end(self): return _ControlRoom.DoubleVector_end(self)
    def rbegin(self): return _ControlRoom.DoubleVector_rbegin(self)
    def rend(self): return _ControlRoom.DoubleVector_rend(self)
    def pop_back(self): return _ControlRoom.DoubleVector_pop_back(self)
    def erase(self, *args): return _ControlRoom.DoubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _ControlRoom.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ControlRoom.DoubleVector_push_back(self, *args)
    def front(self): return _ControlRoom.DoubleVector_front(self)
    def back(self): return _ControlRoom.DoubleVector_back(self)
    def assign(self, *args): return _ControlRoom.DoubleVector_assign(self, *args)
    def resize(self, *args): return _ControlRoom.DoubleVector_resize(self, *args)
    def insert(self, *args): return _ControlRoom.DoubleVector_insert(self, *args)
    def reserve(self, *args): return _ControlRoom.DoubleVector_reserve(self, *args)
    def capacity(self): return _ControlRoom.DoubleVector_capacity(self)
    __swig_destroy__ = _ControlRoom.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _ControlRoom.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class PlasmaParameters(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ControlRoom.new_PlasmaParameters(*args)
        try: self.this.append(this)
        except: self.this = this
    Te = _swig_property(_ControlRoom.PlasmaParameters_Te_get)
    Ti = _swig_property(_ControlRoom.PlasmaParameters_Ti_get)
    ne = _swig_property(_ControlRoom.PlasmaParameters_ne_get)
    def _addIonSpecies(self, *args): return _ControlRoom.PlasmaParameters__addIonSpecies(self, *args)
    _old_init_ = __init__
    def __init__(self, Te, Ti, ne, ions):
        self._old_init_(Te,Ti,ne)
        for i,n in ions:
            self._addIonSpecies(i,n)

    __swig_destroy__ = _ControlRoom.delete_PlasmaParameters
    __del__ = lambda self : None;
PlasmaParameters_swigregister = _ControlRoom.PlasmaParameters_swigregister
PlasmaParameters_swigregister(PlasmaParameters)

class Distribution(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __call__(self, *args): return _ControlRoom.Distribution___call__(self, *args)
    def species(self): return _ControlRoom.Distribution_species(self)
    def setSpecies(self, *args): return _ControlRoom.Distribution_setSpecies(self, *args)
    species = property(species,setSpecies,None)

    def energyRange(self): return _ControlRoom.Distribution_energyRange(self)
    def velocityRange(self): return _ControlRoom.Distribution_velocityRange(self)
    def cosineRange(self): return _ControlRoom.Distribution_cosineRange(self)

    __swig_destroy__ = _ControlRoom.delete_Distribution
    __del__ = lambda self : None;
Distribution_swigregister = _ControlRoom.Distribution_swigregister
Distribution_swigregister(Distribution)

class MonoenergeticDistribution(Distribution):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _ControlRoom.new_MonoenergeticDistribution(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_MonoenergeticDistribution
    __del__ = lambda self : None;
MonoenergeticDistribution_swigregister = _ControlRoom.MonoenergeticDistribution_swigregister
MonoenergeticDistribution_swigregister(MonoenergeticDistribution)

class ColdDistribution(Distribution):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ControlRoom.new_ColdDistribution()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_ColdDistribution
    __del__ = lambda self : None;
ColdDistribution_swigregister = _ControlRoom.ColdDistribution_swigregister
ColdDistribution_swigregister(ColdDistribution)

class BeamDistribution(Distribution):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _ControlRoom.new_BeamDistribution(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_BeamDistribution
    __del__ = lambda self : None;
BeamDistribution_swigregister = _ControlRoom.BeamDistribution_swigregister
BeamDistribution_swigregister(BeamDistribution)

class Maxwellian(Distribution):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _ControlRoom.new_Maxwellian(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_Maxwellian
    __del__ = lambda self : None;
Maxwellian_swigregister = _ControlRoom.Maxwellian_swigregister
Maxwellian_swigregister(Maxwellian)

class BiMaxwellian(Distribution):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _ControlRoom.new_BiMaxwellian(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_BiMaxwellian
    __del__ = lambda self : None;
BiMaxwellian_swigregister = _ControlRoom.BiMaxwellian_swigregister
BiMaxwellian_swigregister(BiMaxwellian)

class HalfBoxDistribution(Distribution):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _ControlRoom.new_HalfBoxDistribution(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __old_init__ = __init__
    def __init__(self,
                 Emax,
                 Emin = None,
                 thetaRange = (0*degrees,180*degrees)):
        if Emin is None:
            Emin = Emax/2
        Erange = (Emin, Emax)
        muRange = (cos(thetaRange[1]),cos(thetaRange[0]))
        return self.__old_init__(Erange,muRange)

    __swig_destroy__ = _ControlRoom.delete_HalfBoxDistribution
    __del__ = lambda self : None;
HalfBoxDistribution_swigregister = _ControlRoom.HalfBoxDistribution_swigregister
HalfBoxDistribution_swigregister(HalfBoxDistribution)

class TabulatedDistribution(Distribution):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def integral(self): return _ControlRoom.TabulatedDistribution_integral(self)
    def __init__(self, *args): 
        this = _ControlRoom.new_TabulatedDistribution(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_TabulatedDistribution
    __del__ = lambda self : None;
TabulatedDistribution_swigregister = _ControlRoom.TabulatedDistribution_swigregister
TabulatedDistribution_swigregister(TabulatedDistribution)

class SlowingDownDistribution(Distribution):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ControlRoom.new_SlowingDownDistribution(*args)
        try: self.this.append(this)
        except: self.this = this
    _old_init_ = __init__
    def __init__(self,particle, source, Te, Ti, ne, ions, points):
        self._old_init_(particle, source,
                        PlasmaParameters(Te,Ti,ne,ions),
                        points)

    def n(self): return _ControlRoom.SlowingDownDistribution_n(self)
    __swig_destroy__ = _ControlRoom.delete_SlowingDownDistribution
    __del__ = lambda self : None;
SlowingDownDistribution_swigregister = _ControlRoom.SlowingDownDistribution_swigregister
SlowingDownDistribution_swigregister(SlowingDownDistribution)

class SimpleSlowingDownDistribution(Distribution):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _ControlRoom.new_SimpleSlowingDownDistribution(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_SimpleSlowingDownDistribution
    __del__ = lambda self : None;
SimpleSlowingDownDistribution_swigregister = _ControlRoom.SimpleSlowingDownDistribution_swigregister
SimpleSlowingDownDistribution_swigregister(SimpleSlowingDownDistribution)

class Cell(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _ControlRoom.new_Cell(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    f1 = _swig_property(_ControlRoom.Cell_f1_get, _ControlRoom.Cell_f1_set)
    f2 = _swig_property(_ControlRoom.Cell_f2_get, _ControlRoom.Cell_f2_set)
    position = _swig_property(_ControlRoom.Cell_position_get, _ControlRoom.Cell_position_set)
    solidAngle = _swig_property(_ControlRoom.Cell_solidAngle_get, _ControlRoom.Cell_solidAngle_set)
    lineOfSight = _swig_property(_ControlRoom.Cell_lineOfSight_get, _ControlRoom.Cell_lineOfSight_set)
    volume = _swig_property(_ControlRoom.Cell_volume_get, _ControlRoom.Cell_volume_set)
    n1 = _swig_property(_ControlRoom.Cell_n1_get, _ControlRoom.Cell_n1_set)
    n2 = _swig_property(_ControlRoom.Cell_n2_get, _ControlRoom.Cell_n2_set)
    weight = _swig_property(_ControlRoom.Cell_weight_get, _ControlRoom.Cell_weight_set)
    __swig_destroy__ = _ControlRoom.delete_Cell
    __del__ = lambda self : None;
Cell_swigregister = _ControlRoom.Cell_swigregister
Cell_swigregister(Cell)

class CellSampler(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ControlRoom.new_CellSampler(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self): return _ControlRoom.CellSampler_next(self)
    def find(self, *args): return _ControlRoom.CellSampler_find(self, *args)
    __swig_destroy__ = _ControlRoom.delete_CellSampler
    __del__ = lambda self : None;
CellSampler_swigregister = _ControlRoom.CellSampler_swigregister
CellSampler_swigregister(CellSampler)

class SWILL(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    init = staticmethod(_ControlRoom.SWILL_init)
    __swig_destroy__ = _ControlRoom.delete_SWILL
    __del__ = lambda self : None;
SWILL_swigregister = _ControlRoom.SWILL_swigregister
SWILL_swigregister(SWILL)

def SWILL_init(*args):
  return _ControlRoom.SWILL_init(*args)
SWILL_init = _ControlRoom.SWILL_init


def _CalculateSpectrum(*args):
  return _ControlRoom._CalculateSpectrum(*args)
_CalculateSpectrum = _ControlRoom._CalculateSpectrum
def CalculateSpectrum(reaction, product,
                      f1, n1, f2, n2,
                      Emin, Emax, bins, samples,
                      E1range = (0.0*MeV, 2.0*MeV),
                      E2range = (0.0*MeV, 2.0*MeV),
                      theta1range = (0*degrees, 180*degrees),
                      theta2range = (0*degrees, 180*degrees),
                      viewAngle = radial, solidAngle = 4*pi*steradians,
                      vCollective = None,
                      vCollective1 = Vector(0,0,0)*meter/second,
                      vCollective2 = Vector(0,0,0)*meter/second,
                      tag = None):
    if type(product) is not int:
        if product == reaction.product1:
            product = 1
        elif product == reaction.product2:
            product = 2
        else:
            raise RuntimeError("invalid product")
    if vCollective is not None:
        return _CalculateSpectrum(reaction, product, 
                                  f1, E1range, theta1range, n1,
                                  f2, E2range, theta2range, n2,
                                  Emin, Emax, bins, samples, 
                                  viewAngle, solidAngle,
                                  vCollective, vCollective,
                                  tag or "run")
    else:
        return _CalculateSpectrum(reaction, product, 
                                  f1, E1range, theta1range, n1,
                                  f2, E2range, theta2range, n2,
                                  Emin, Emax, bins, samples, 
                                  viewAngle, solidAngle,
                                  vCollective1, vCollective2,
                                  tag or "run")

Clockwise = _ControlRoom.Clockwise
Counterclockwise = _ControlRoom.Counterclockwise

def _CalculateVolumeSpectrum(*args):
  return _ControlRoom._CalculateVolumeSpectrum(*args)
_CalculateVolumeSpectrum = _ControlRoom._CalculateVolumeSpectrum
def CalculateVolumeSpectrum(reaction, product, cells,
                            Emin, Emax, bins, samples,
                            E1range = (0.0*MeV, 2.0*MeV),
                            E2range = (0.0*MeV, 2.0*MeV),
                            theta1range = (0*degrees, 180*degrees),
                            theta2range = (0*degrees, 180*degrees),
                            Bdirection = Clockwise,
                            vCollective = None,
                            vCollective1 = Vector(0,0,0)*meter/second,
                            vCollective2 = Vector(0,0,0)*meter/second,
                            tag = None):
    if type(product) is not int:
        if product == reaction.product1:
            product = 1
        elif product == reaction.product2:
            product = 2
        else:
            raise RuntimeError("invalid product")
    if vCollective is not None:
        return _CalculateVolumeSpectrum(reaction, product,
                                        cells, Bdirection,
                                        E1range, theta1range,
                                        E2range, theta2range,
                                        Emin, Emax, bins, samples, 
                                        vCollective, vCollective,
                                        tag or "run")
    else:
        return _CalculateVolumeSpectrum(reaction, product,
                                        cells, Bdirection,
                                        E1range, theta1range,
                                        E2range, theta2range,
                                        Emin, Emax, bins, samples, 
                                        vCollective1, vCollective2,
                                        tag or "run")

class Constants(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    c = staticmethod(_ControlRoom.Constants_c)
    e = staticmethod(_ControlRoom.Constants_e)
    epsilon_0 = staticmethod(_ControlRoom.Constants_epsilon_0)
    h = staticmethod(_ControlRoom.Constants_h)
    hBar = staticmethod(_ControlRoom.Constants_hBar)
    def __init__(self): 
        this = _ControlRoom.new_Constants()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_Constants
    __del__ = lambda self : None;
Constants_swigregister = _ControlRoom.Constants_swigregister
Constants_swigregister(Constants)

def Constants_c():
  return _ControlRoom.Constants_c()
Constants_c = _ControlRoom.Constants_c

def Constants_e():
  return _ControlRoom.Constants_e()
Constants_e = _ControlRoom.Constants_e

def Constants_epsilon_0():
  return _ControlRoom.Constants_epsilon_0()
Constants_epsilon_0 = _ControlRoom.Constants_epsilon_0

def Constants_h():
  return _ControlRoom.Constants_h()
Constants_h = _ControlRoom.Constants_h

def Constants_hBar():
  return _ControlRoom.Constants_hBar()
Constants_hBar = _ControlRoom.Constants_hBar

class FourMomentum(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ControlRoom.new_FourMomentum(*args)
        try: self.this.append(this)
        except: self.this = this
    def E(self): return _ControlRoom.FourMomentum_E(self)
    def p(self): return _ControlRoom.FourMomentum_p(self)
    def m(self): return _ControlRoom.FourMomentum_m(self)
    def __abs__(self): return _ControlRoom.FourMomentum___abs__(self)
    E = property(E,None,None)
    p = property(p,None,None)
    m = property(m,None,None)

    def toFrame(self, *args): return _ControlRoom.FourMomentum_toFrame(self, *args)
    def fromFrame(self, *args): return _ControlRoom.FourMomentum_fromFrame(self, *args)
    def __eq__(self, *args): return _ControlRoom.FourMomentum___eq__(self, *args)
    def __ne__(self, *args): return _ControlRoom.FourMomentum___ne__(self, *args)
    __swig_destroy__ = _ControlRoom.delete_FourMomentum
    __del__ = lambda self : None;
FourMomentum_swigregister = _ControlRoom.FourMomentum_swigregister
FourMomentum_swigregister(FourMomentum)

class Polynomial(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ControlRoom.new_Polynomial(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _ControlRoom.Polynomial___call__(self, *args)
    __swig_destroy__ = _ControlRoom.delete_Polynomial
    __del__ = lambda self : None;
Polynomial_swigregister = _ControlRoom.Polynomial_swigregister
Polynomial_swigregister(Polynomial)

class LegendrePolynomial(Polynomial):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, order = 0): 
        this = _ControlRoom.new_LegendrePolynomial(order)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_LegendrePolynomial
    __del__ = lambda self : None;
LegendrePolynomial_swigregister = _ControlRoom.LegendrePolynomial_swigregister
LegendrePolynomial_swigregister(LegendrePolynomial)

class LinearInterpolation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ControlRoom.new_LinearInterpolation(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _ControlRoom.LinearInterpolation___call__(self, *args)
    __swig_destroy__ = _ControlRoom.delete_LinearInterpolation
    __del__ = lambda self : None;
LinearInterpolation_swigregister = _ControlRoom.LinearInterpolation_swigregister
LinearInterpolation_swigregister(LinearInterpolation)

class BilinearInterpolation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ControlRoom.new_BilinearInterpolation(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _ControlRoom.BilinearInterpolation___call__(self, *args)
    __swig_destroy__ = _ControlRoom.delete_BilinearInterpolation
    __del__ = lambda self : None;
BilinearInterpolation_swigregister = _ControlRoom.BilinearInterpolation_swigregister
BilinearInterpolation_swigregister(BilinearInterpolation)

class Randomizer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    seed = staticmethod(_ControlRoom.Randomizer_seed)
    next = staticmethod(_ControlRoom.Randomizer_next)
    def __init__(self): 
        this = _ControlRoom.new_Randomizer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_Randomizer
    __del__ = lambda self : None;
Randomizer_swigregister = _ControlRoom.Randomizer_swigregister
Randomizer_swigregister(Randomizer)

def Randomizer_seed(*args):
  return _ControlRoom.Randomizer_seed(*args)
Randomizer_seed = _ControlRoom.Randomizer_seed

def Randomizer_next():
  return _ControlRoom.Randomizer_next()
Randomizer_next = _ControlRoom.Randomizer_next

class DTReactivity(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __call__(self, *args): return _ControlRoom.DTReactivity___call__(self, *args)
    def __init__(self): 
        this = _ControlRoom.new_DTReactivity()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_DTReactivity
    __del__ = lambda self : None;
DTReactivity_swigregister = _ControlRoom.DTReactivity_swigregister
DTReactivity_swigregister(DTReactivity)

class DDN3HeReactivity(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __call__(self, *args): return _ControlRoom.DDN3HeReactivity___call__(self, *args)
    def __init__(self): 
        this = _ControlRoom.new_DDN3HeReactivity()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_DDN3HeReactivity
    __del__ = lambda self : None;
DDN3HeReactivity_swigregister = _ControlRoom.DDN3HeReactivity_swigregister
DDN3HeReactivity_swigregister(DDN3HeReactivity)

class DDPTReactivity(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __call__(self, *args): return _ControlRoom.DDPTReactivity___call__(self, *args)
    def __init__(self): 
        this = _ControlRoom.new_DDPTReactivity()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_DDPTReactivity
    __del__ = lambda self : None;
DDPTReactivity_swigregister = _ControlRoom.DDPTReactivity_swigregister
DDPTReactivity_swigregister(DDPTReactivity)

class Sample(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    p = _swig_property(_ControlRoom.Sample_p_get, _ControlRoom.Sample_p_set)
    weight = _swig_property(_ControlRoom.Sample_weight_get, _ControlRoom.Sample_weight_set)
    def __init__(self): 
        this = _ControlRoom.new_Sample()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_Sample
    __del__ = lambda self : None;
Sample_swigregister = _ControlRoom.Sample_swigregister
Sample_swigregister(Sample)

class Sampler(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def next(self): return _ControlRoom.Sampler_next(self)
    __swig_destroy__ = _ControlRoom.delete_Sampler
    __del__ = lambda self : None;
Sampler_swigregister = _ControlRoom.Sampler_swigregister
Sampler_swigregister(Sampler)

class UniformSampler(Sampler):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ControlRoom.new_UniformSampler(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_UniformSampler
    __del__ = lambda self : None;
UniformSampler_swigregister = _ControlRoom.UniformSampler_swigregister
UniformSampler_swigregister(UniformSampler)

class Kinematics(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    CLASSICAL = _ControlRoom.Kinematics_CLASSICAL
    RELATIVISTIC = _ControlRoom.Kinematics_RELATIVISTIC
    currentMode = staticmethod(_ControlRoom.Kinematics_currentMode)
    setMode = staticmethod(_ControlRoom.Kinematics_setMode)
    def __init__(self): 
        this = _ControlRoom.new_Kinematics()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete_Kinematics
    __del__ = lambda self : None;
Kinematics_swigregister = _ControlRoom.Kinematics_swigregister
Kinematics_swigregister(Kinematics)

def Kinematics_currentMode():
  return _ControlRoom.Kinematics_currentMode()
Kinematics_currentMode = _ControlRoom.Kinematics_currentMode

def Kinematics_setMode(*args):
  return _ControlRoom.Kinematics_setMode(*args)
Kinematics_setMode = _ControlRoom.Kinematics_setMode

CLASSICAL = Kinematics.CLASSICAL
RELATIVISTIC = Kinematics.RELATIVISTIC

class _FileFinder(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def _getDataDir(self): return _ControlRoom._FileFinder__getDataDir(self)
    def _setDataDir(self, *args): return _ControlRoom._FileFinder__setDataDir(self, *args)
    dataDir = property(_getDataDir, _setDataDir)
    def find(self,dir,file):
        import os
        path = os.path.join(self.dataDir,dir,file)
        try:
            open(path)
            return path
        except:
            return None

    def __init__(self): 
        this = _ControlRoom.new__FileFinder()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ControlRoom.delete__FileFinder
    __del__ = lambda self : None;
_FileFinder_swigregister = _ControlRoom._FileFinder_swigregister
_FileFinder_swigregister(_FileFinder)

Files = _FileFinder()


def SpitzerTime(*args):
  return _ControlRoom.SpitzerTime(*args)
SpitzerTime = _ControlRoom.SpitzerTime

def CriticalVelocity(*args):
  return _ControlRoom.CriticalVelocity(*args)
CriticalVelocity = _ControlRoom.CriticalVelocity

def CoulombLogarithm(*args):
  return _ControlRoom.CoulombLogarithm(*args)
CoulombLogarithm = _ControlRoom.CoulombLogarithm
class Torus(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _ControlRoom.new_Torus(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    def R(self): return _ControlRoom.Torus_R(self)
    def k(self): return _ControlRoom.Torus_k(self)
    def toToroidal(self, *args): return _ControlRoom.Torus_toToroidal(self, *args)
    def toCartesian(self, *args): return _ControlRoom.Torus_toCartesian(self, *args)
    __swig_destroy__ = _ControlRoom.delete_Torus
    __del__ = lambda self : None;
Torus_swigregister = _ControlRoom.Torus_swigregister
Torus_swigregister(Torus)



