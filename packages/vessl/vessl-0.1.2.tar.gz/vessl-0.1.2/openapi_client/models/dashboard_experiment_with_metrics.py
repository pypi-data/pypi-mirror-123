# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class DashboardExperimentWithMetrics(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'experiment_metrics': 'dict(str, list[DashboardExperimentMetric])',
        'id': 'int',
        'name': 'str',
        'status': 'str',
        'system_metrics': 'dict(str, list[DashboardSystemMetric])'
    }

    attribute_map = {
        'experiment_metrics': 'experiment_metrics',
        'id': 'id',
        'name': 'name',
        'status': 'status',
        'system_metrics': 'system_metrics'
    }

    def __init__(self, experiment_metrics=None, id=None, name=None, status=None, system_metrics=None, local_vars_configuration=None):  # noqa: E501
        """DashboardExperimentWithMetrics - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._experiment_metrics = None
        self._id = None
        self._name = None
        self._status = None
        self._system_metrics = None
        self.discriminator = None

        self.experiment_metrics = experiment_metrics
        self.id = id
        self.name = name
        self.status = status
        self.system_metrics = system_metrics

    @property
    def experiment_metrics(self):
        """Gets the experiment_metrics of this DashboardExperimentWithMetrics.  # noqa: E501


        :return: The experiment_metrics of this DashboardExperimentWithMetrics.  # noqa: E501
        :rtype: dict(str, list[DashboardExperimentMetric])
        """
        return self._experiment_metrics

    @experiment_metrics.setter
    def experiment_metrics(self, experiment_metrics):
        """Sets the experiment_metrics of this DashboardExperimentWithMetrics.


        :param experiment_metrics: The experiment_metrics of this DashboardExperimentWithMetrics.  # noqa: E501
        :type experiment_metrics: dict(str, list[DashboardExperimentMetric])
        """
        if self.local_vars_configuration.client_side_validation and experiment_metrics is None:  # noqa: E501
            raise ValueError("Invalid value for `experiment_metrics`, must not be `None`")  # noqa: E501

        self._experiment_metrics = experiment_metrics

    @property
    def id(self):
        """Gets the id of this DashboardExperimentWithMetrics.  # noqa: E501


        :return: The id of this DashboardExperimentWithMetrics.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DashboardExperimentWithMetrics.


        :param id: The id of this DashboardExperimentWithMetrics.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this DashboardExperimentWithMetrics.  # noqa: E501


        :return: The name of this DashboardExperimentWithMetrics.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DashboardExperimentWithMetrics.


        :param name: The name of this DashboardExperimentWithMetrics.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def status(self):
        """Gets the status of this DashboardExperimentWithMetrics.  # noqa: E501


        :return: The status of this DashboardExperimentWithMetrics.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DashboardExperimentWithMetrics.


        :param status: The status of this DashboardExperimentWithMetrics.  # noqa: E501
        :type status: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def system_metrics(self):
        """Gets the system_metrics of this DashboardExperimentWithMetrics.  # noqa: E501


        :return: The system_metrics of this DashboardExperimentWithMetrics.  # noqa: E501
        :rtype: dict(str, list[DashboardSystemMetric])
        """
        return self._system_metrics

    @system_metrics.setter
    def system_metrics(self, system_metrics):
        """Sets the system_metrics of this DashboardExperimentWithMetrics.


        :param system_metrics: The system_metrics of this DashboardExperimentWithMetrics.  # noqa: E501
        :type system_metrics: dict(str, list[DashboardSystemMetric])
        """
        if self.local_vars_configuration.client_side_validation and system_metrics is None:  # noqa: E501
            raise ValueError("Invalid value for `system_metrics`, must not be `None`")  # noqa: E501

        self._system_metrics = system_metrics

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardExperimentWithMetrics):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DashboardExperimentWithMetrics):
            return True

        return self.to_dict() != other.to_dict()
