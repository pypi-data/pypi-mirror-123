# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class V1ServiceSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'allocate_load_balancer_node_ports': 'bool',
        'cluster_ip': 'str',
        'cluster_ips': 'list[str]',
        'external_ips': 'list[str]',
        'external_name': 'str',
        'external_traffic_policy': 'str',
        'health_check_node_port': 'int',
        'internal_traffic_policy': 'str',
        'ip_families': 'list[str]',
        'ip_family_policy': 'str',
        'load_balancer_class': 'str',
        'load_balancer_ip': 'str',
        'load_balancer_source_ranges': 'list[str]',
        'ports': 'list[V1ServicePort]',
        'publish_not_ready_addresses': 'bool',
        'selector': 'dict(str, str)',
        'session_affinity': 'str',
        'session_affinity_config': 'V1SessionAffinityConfig',
        'topology_keys': 'list[str]',
        'type': 'str'
    }

    attribute_map = {
        'allocate_load_balancer_node_ports': 'allocateLoadBalancerNodePorts',
        'cluster_ip': 'clusterIP',
        'cluster_ips': 'clusterIPs',
        'external_ips': 'externalIPs',
        'external_name': 'externalName',
        'external_traffic_policy': 'externalTrafficPolicy',
        'health_check_node_port': 'healthCheckNodePort',
        'internal_traffic_policy': 'internalTrafficPolicy',
        'ip_families': 'ipFamilies',
        'ip_family_policy': 'ipFamilyPolicy',
        'load_balancer_class': 'loadBalancerClass',
        'load_balancer_ip': 'loadBalancerIP',
        'load_balancer_source_ranges': 'loadBalancerSourceRanges',
        'ports': 'ports',
        'publish_not_ready_addresses': 'publishNotReadyAddresses',
        'selector': 'selector',
        'session_affinity': 'sessionAffinity',
        'session_affinity_config': 'sessionAffinityConfig',
        'topology_keys': 'topologyKeys',
        'type': 'type'
    }

    def __init__(self, allocate_load_balancer_node_ports=None, cluster_ip=None, cluster_ips=None, external_ips=None, external_name=None, external_traffic_policy=None, health_check_node_port=None, internal_traffic_policy=None, ip_families=None, ip_family_policy=None, load_balancer_class=None, load_balancer_ip=None, load_balancer_source_ranges=None, ports=None, publish_not_ready_addresses=None, selector=None, session_affinity=None, session_affinity_config=None, topology_keys=None, type=None, local_vars_configuration=None):  # noqa: E501
        """V1ServiceSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._allocate_load_balancer_node_ports = None
        self._cluster_ip = None
        self._cluster_ips = None
        self._external_ips = None
        self._external_name = None
        self._external_traffic_policy = None
        self._health_check_node_port = None
        self._internal_traffic_policy = None
        self._ip_families = None
        self._ip_family_policy = None
        self._load_balancer_class = None
        self._load_balancer_ip = None
        self._load_balancer_source_ranges = None
        self._ports = None
        self._publish_not_ready_addresses = None
        self._selector = None
        self._session_affinity = None
        self._session_affinity_config = None
        self._topology_keys = None
        self._type = None
        self.discriminator = None

        self.allocate_load_balancer_node_ports = allocate_load_balancer_node_ports
        if cluster_ip is not None:
            self.cluster_ip = cluster_ip
        if cluster_ips is not None:
            self.cluster_ips = cluster_ips
        if external_ips is not None:
            self.external_ips = external_ips
        if external_name is not None:
            self.external_name = external_name
        if external_traffic_policy is not None:
            self.external_traffic_policy = external_traffic_policy
        if health_check_node_port is not None:
            self.health_check_node_port = health_check_node_port
        self.internal_traffic_policy = internal_traffic_policy
        if ip_families is not None:
            self.ip_families = ip_families
        self.ip_family_policy = ip_family_policy
        self.load_balancer_class = load_balancer_class
        if load_balancer_ip is not None:
            self.load_balancer_ip = load_balancer_ip
        if load_balancer_source_ranges is not None:
            self.load_balancer_source_ranges = load_balancer_source_ranges
        if ports is not None:
            self.ports = ports
        if publish_not_ready_addresses is not None:
            self.publish_not_ready_addresses = publish_not_ready_addresses
        if selector is not None:
            self.selector = selector
        if session_affinity is not None:
            self.session_affinity = session_affinity
        if session_affinity_config is not None:
            self.session_affinity_config = session_affinity_config
        if topology_keys is not None:
            self.topology_keys = topology_keys
        if type is not None:
            self.type = type

    @property
    def allocate_load_balancer_node_ports(self):
        """Gets the allocate_load_balancer_node_ports of this V1ServiceSpec.  # noqa: E501


        :return: The allocate_load_balancer_node_ports of this V1ServiceSpec.  # noqa: E501
        :rtype: bool
        """
        return self._allocate_load_balancer_node_ports

    @allocate_load_balancer_node_ports.setter
    def allocate_load_balancer_node_ports(self, allocate_load_balancer_node_ports):
        """Sets the allocate_load_balancer_node_ports of this V1ServiceSpec.


        :param allocate_load_balancer_node_ports: The allocate_load_balancer_node_ports of this V1ServiceSpec.  # noqa: E501
        :type allocate_load_balancer_node_ports: bool
        """

        self._allocate_load_balancer_node_ports = allocate_load_balancer_node_ports

    @property
    def cluster_ip(self):
        """Gets the cluster_ip of this V1ServiceSpec.  # noqa: E501


        :return: The cluster_ip of this V1ServiceSpec.  # noqa: E501
        :rtype: str
        """
        return self._cluster_ip

    @cluster_ip.setter
    def cluster_ip(self, cluster_ip):
        """Sets the cluster_ip of this V1ServiceSpec.


        :param cluster_ip: The cluster_ip of this V1ServiceSpec.  # noqa: E501
        :type cluster_ip: str
        """

        self._cluster_ip = cluster_ip

    @property
    def cluster_ips(self):
        """Gets the cluster_ips of this V1ServiceSpec.  # noqa: E501


        :return: The cluster_ips of this V1ServiceSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._cluster_ips

    @cluster_ips.setter
    def cluster_ips(self, cluster_ips):
        """Sets the cluster_ips of this V1ServiceSpec.


        :param cluster_ips: The cluster_ips of this V1ServiceSpec.  # noqa: E501
        :type cluster_ips: list[str]
        """

        self._cluster_ips = cluster_ips

    @property
    def external_ips(self):
        """Gets the external_ips of this V1ServiceSpec.  # noqa: E501


        :return: The external_ips of this V1ServiceSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._external_ips

    @external_ips.setter
    def external_ips(self, external_ips):
        """Sets the external_ips of this V1ServiceSpec.


        :param external_ips: The external_ips of this V1ServiceSpec.  # noqa: E501
        :type external_ips: list[str]
        """

        self._external_ips = external_ips

    @property
    def external_name(self):
        """Gets the external_name of this V1ServiceSpec.  # noqa: E501


        :return: The external_name of this V1ServiceSpec.  # noqa: E501
        :rtype: str
        """
        return self._external_name

    @external_name.setter
    def external_name(self, external_name):
        """Sets the external_name of this V1ServiceSpec.


        :param external_name: The external_name of this V1ServiceSpec.  # noqa: E501
        :type external_name: str
        """

        self._external_name = external_name

    @property
    def external_traffic_policy(self):
        """Gets the external_traffic_policy of this V1ServiceSpec.  # noqa: E501


        :return: The external_traffic_policy of this V1ServiceSpec.  # noqa: E501
        :rtype: str
        """
        return self._external_traffic_policy

    @external_traffic_policy.setter
    def external_traffic_policy(self, external_traffic_policy):
        """Sets the external_traffic_policy of this V1ServiceSpec.


        :param external_traffic_policy: The external_traffic_policy of this V1ServiceSpec.  # noqa: E501
        :type external_traffic_policy: str
        """

        self._external_traffic_policy = external_traffic_policy

    @property
    def health_check_node_port(self):
        """Gets the health_check_node_port of this V1ServiceSpec.  # noqa: E501


        :return: The health_check_node_port of this V1ServiceSpec.  # noqa: E501
        :rtype: int
        """
        return self._health_check_node_port

    @health_check_node_port.setter
    def health_check_node_port(self, health_check_node_port):
        """Sets the health_check_node_port of this V1ServiceSpec.


        :param health_check_node_port: The health_check_node_port of this V1ServiceSpec.  # noqa: E501
        :type health_check_node_port: int
        """

        self._health_check_node_port = health_check_node_port

    @property
    def internal_traffic_policy(self):
        """Gets the internal_traffic_policy of this V1ServiceSpec.  # noqa: E501


        :return: The internal_traffic_policy of this V1ServiceSpec.  # noqa: E501
        :rtype: str
        """
        return self._internal_traffic_policy

    @internal_traffic_policy.setter
    def internal_traffic_policy(self, internal_traffic_policy):
        """Sets the internal_traffic_policy of this V1ServiceSpec.


        :param internal_traffic_policy: The internal_traffic_policy of this V1ServiceSpec.  # noqa: E501
        :type internal_traffic_policy: str
        """

        self._internal_traffic_policy = internal_traffic_policy

    @property
    def ip_families(self):
        """Gets the ip_families of this V1ServiceSpec.  # noqa: E501


        :return: The ip_families of this V1ServiceSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._ip_families

    @ip_families.setter
    def ip_families(self, ip_families):
        """Sets the ip_families of this V1ServiceSpec.


        :param ip_families: The ip_families of this V1ServiceSpec.  # noqa: E501
        :type ip_families: list[str]
        """

        self._ip_families = ip_families

    @property
    def ip_family_policy(self):
        """Gets the ip_family_policy of this V1ServiceSpec.  # noqa: E501


        :return: The ip_family_policy of this V1ServiceSpec.  # noqa: E501
        :rtype: str
        """
        return self._ip_family_policy

    @ip_family_policy.setter
    def ip_family_policy(self, ip_family_policy):
        """Sets the ip_family_policy of this V1ServiceSpec.


        :param ip_family_policy: The ip_family_policy of this V1ServiceSpec.  # noqa: E501
        :type ip_family_policy: str
        """

        self._ip_family_policy = ip_family_policy

    @property
    def load_balancer_class(self):
        """Gets the load_balancer_class of this V1ServiceSpec.  # noqa: E501


        :return: The load_balancer_class of this V1ServiceSpec.  # noqa: E501
        :rtype: str
        """
        return self._load_balancer_class

    @load_balancer_class.setter
    def load_balancer_class(self, load_balancer_class):
        """Sets the load_balancer_class of this V1ServiceSpec.


        :param load_balancer_class: The load_balancer_class of this V1ServiceSpec.  # noqa: E501
        :type load_balancer_class: str
        """

        self._load_balancer_class = load_balancer_class

    @property
    def load_balancer_ip(self):
        """Gets the load_balancer_ip of this V1ServiceSpec.  # noqa: E501


        :return: The load_balancer_ip of this V1ServiceSpec.  # noqa: E501
        :rtype: str
        """
        return self._load_balancer_ip

    @load_balancer_ip.setter
    def load_balancer_ip(self, load_balancer_ip):
        """Sets the load_balancer_ip of this V1ServiceSpec.


        :param load_balancer_ip: The load_balancer_ip of this V1ServiceSpec.  # noqa: E501
        :type load_balancer_ip: str
        """

        self._load_balancer_ip = load_balancer_ip

    @property
    def load_balancer_source_ranges(self):
        """Gets the load_balancer_source_ranges of this V1ServiceSpec.  # noqa: E501


        :return: The load_balancer_source_ranges of this V1ServiceSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._load_balancer_source_ranges

    @load_balancer_source_ranges.setter
    def load_balancer_source_ranges(self, load_balancer_source_ranges):
        """Sets the load_balancer_source_ranges of this V1ServiceSpec.


        :param load_balancer_source_ranges: The load_balancer_source_ranges of this V1ServiceSpec.  # noqa: E501
        :type load_balancer_source_ranges: list[str]
        """

        self._load_balancer_source_ranges = load_balancer_source_ranges

    @property
    def ports(self):
        """Gets the ports of this V1ServiceSpec.  # noqa: E501


        :return: The ports of this V1ServiceSpec.  # noqa: E501
        :rtype: list[V1ServicePort]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this V1ServiceSpec.


        :param ports: The ports of this V1ServiceSpec.  # noqa: E501
        :type ports: list[V1ServicePort]
        """

        self._ports = ports

    @property
    def publish_not_ready_addresses(self):
        """Gets the publish_not_ready_addresses of this V1ServiceSpec.  # noqa: E501


        :return: The publish_not_ready_addresses of this V1ServiceSpec.  # noqa: E501
        :rtype: bool
        """
        return self._publish_not_ready_addresses

    @publish_not_ready_addresses.setter
    def publish_not_ready_addresses(self, publish_not_ready_addresses):
        """Sets the publish_not_ready_addresses of this V1ServiceSpec.


        :param publish_not_ready_addresses: The publish_not_ready_addresses of this V1ServiceSpec.  # noqa: E501
        :type publish_not_ready_addresses: bool
        """

        self._publish_not_ready_addresses = publish_not_ready_addresses

    @property
    def selector(self):
        """Gets the selector of this V1ServiceSpec.  # noqa: E501


        :return: The selector of this V1ServiceSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this V1ServiceSpec.


        :param selector: The selector of this V1ServiceSpec.  # noqa: E501
        :type selector: dict(str, str)
        """

        self._selector = selector

    @property
    def session_affinity(self):
        """Gets the session_affinity of this V1ServiceSpec.  # noqa: E501


        :return: The session_affinity of this V1ServiceSpec.  # noqa: E501
        :rtype: str
        """
        return self._session_affinity

    @session_affinity.setter
    def session_affinity(self, session_affinity):
        """Sets the session_affinity of this V1ServiceSpec.


        :param session_affinity: The session_affinity of this V1ServiceSpec.  # noqa: E501
        :type session_affinity: str
        """

        self._session_affinity = session_affinity

    @property
    def session_affinity_config(self):
        """Gets the session_affinity_config of this V1ServiceSpec.  # noqa: E501


        :return: The session_affinity_config of this V1ServiceSpec.  # noqa: E501
        :rtype: V1SessionAffinityConfig
        """
        return self._session_affinity_config

    @session_affinity_config.setter
    def session_affinity_config(self, session_affinity_config):
        """Sets the session_affinity_config of this V1ServiceSpec.


        :param session_affinity_config: The session_affinity_config of this V1ServiceSpec.  # noqa: E501
        :type session_affinity_config: V1SessionAffinityConfig
        """

        self._session_affinity_config = session_affinity_config

    @property
    def topology_keys(self):
        """Gets the topology_keys of this V1ServiceSpec.  # noqa: E501


        :return: The topology_keys of this V1ServiceSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._topology_keys

    @topology_keys.setter
    def topology_keys(self, topology_keys):
        """Sets the topology_keys of this V1ServiceSpec.


        :param topology_keys: The topology_keys of this V1ServiceSpec.  # noqa: E501
        :type topology_keys: list[str]
        """

        self._topology_keys = topology_keys

    @property
    def type(self):
        """Gets the type of this V1ServiceSpec.  # noqa: E501


        :return: The type of this V1ServiceSpec.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V1ServiceSpec.


        :param type: The type of this V1ServiceSpec.  # noqa: E501
        :type type: str
        """

        self._type = type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ServiceSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1ServiceSpec):
            return True

        return self.to_dict() != other.to_dict()
