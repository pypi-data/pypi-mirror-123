# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class V1VolumeSnapshotStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bound_volume_snapshot_content_name': 'str',
        'creation_time': 'object',
        'error': 'V1VolumeSnapshotError',
        'ready_to_use': 'bool',
        'restore_size': 'object'
    }

    attribute_map = {
        'bound_volume_snapshot_content_name': 'boundVolumeSnapshotContentName',
        'creation_time': 'creationTime',
        'error': 'error',
        'ready_to_use': 'readyToUse',
        'restore_size': 'restoreSize'
    }

    def __init__(self, bound_volume_snapshot_content_name=None, creation_time=None, error=None, ready_to_use=None, restore_size=None, local_vars_configuration=None):  # noqa: E501
        """V1VolumeSnapshotStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._bound_volume_snapshot_content_name = None
        self._creation_time = None
        self._error = None
        self._ready_to_use = None
        self._restore_size = None
        self.discriminator = None

        self.bound_volume_snapshot_content_name = bound_volume_snapshot_content_name
        if creation_time is not None:
            self.creation_time = creation_time
        if error is not None:
            self.error = error
        self.ready_to_use = ready_to_use
        if restore_size is not None:
            self.restore_size = restore_size

    @property
    def bound_volume_snapshot_content_name(self):
        """Gets the bound_volume_snapshot_content_name of this V1VolumeSnapshotStatus.  # noqa: E501


        :return: The bound_volume_snapshot_content_name of this V1VolumeSnapshotStatus.  # noqa: E501
        :rtype: str
        """
        return self._bound_volume_snapshot_content_name

    @bound_volume_snapshot_content_name.setter
    def bound_volume_snapshot_content_name(self, bound_volume_snapshot_content_name):
        """Sets the bound_volume_snapshot_content_name of this V1VolumeSnapshotStatus.


        :param bound_volume_snapshot_content_name: The bound_volume_snapshot_content_name of this V1VolumeSnapshotStatus.  # noqa: E501
        :type bound_volume_snapshot_content_name: str
        """

        self._bound_volume_snapshot_content_name = bound_volume_snapshot_content_name

    @property
    def creation_time(self):
        """Gets the creation_time of this V1VolumeSnapshotStatus.  # noqa: E501


        :return: The creation_time of this V1VolumeSnapshotStatus.  # noqa: E501
        :rtype: object
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this V1VolumeSnapshotStatus.


        :param creation_time: The creation_time of this V1VolumeSnapshotStatus.  # noqa: E501
        :type creation_time: object
        """

        self._creation_time = creation_time

    @property
    def error(self):
        """Gets the error of this V1VolumeSnapshotStatus.  # noqa: E501


        :return: The error of this V1VolumeSnapshotStatus.  # noqa: E501
        :rtype: V1VolumeSnapshotError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this V1VolumeSnapshotStatus.


        :param error: The error of this V1VolumeSnapshotStatus.  # noqa: E501
        :type error: V1VolumeSnapshotError
        """

        self._error = error

    @property
    def ready_to_use(self):
        """Gets the ready_to_use of this V1VolumeSnapshotStatus.  # noqa: E501


        :return: The ready_to_use of this V1VolumeSnapshotStatus.  # noqa: E501
        :rtype: bool
        """
        return self._ready_to_use

    @ready_to_use.setter
    def ready_to_use(self, ready_to_use):
        """Sets the ready_to_use of this V1VolumeSnapshotStatus.


        :param ready_to_use: The ready_to_use of this V1VolumeSnapshotStatus.  # noqa: E501
        :type ready_to_use: bool
        """

        self._ready_to_use = ready_to_use

    @property
    def restore_size(self):
        """Gets the restore_size of this V1VolumeSnapshotStatus.  # noqa: E501


        :return: The restore_size of this V1VolumeSnapshotStatus.  # noqa: E501
        :rtype: object
        """
        return self._restore_size

    @restore_size.setter
    def restore_size(self, restore_size):
        """Sets the restore_size of this V1VolumeSnapshotStatus.


        :param restore_size: The restore_size of this V1VolumeSnapshotStatus.  # noqa: E501
        :type restore_size: object
        """

        self._restore_size = restore_size

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1VolumeSnapshotStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1VolumeSnapshotStatus):
            return True

        return self.to_dict() != other.to_dict()
