# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class KubernetesWorkloadKubernetesResource(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'configmaps': 'list[V1ConfigMap]',
        'ingresses': 'list[V1beta1Ingress]',
        'jobs': 'list[V1Job]',
        'persistent_volume_claims': 'list[V1PersistentVolumeClaim]',
        'persistent_volumes': 'list[V1PersistentVolume]',
        'secrets': 'list[V1Secret]',
        'services': 'list[V1Service]',
        'statefulsets': 'list[V1StatefulSet]',
        'volume_snapshots': 'list[V1VolumeSnapshot]'
    }

    attribute_map = {
        'configmaps': 'configmaps',
        'ingresses': 'ingresses',
        'jobs': 'jobs',
        'persistent_volume_claims': 'persistent_volume_claims',
        'persistent_volumes': 'persistent_volumes',
        'secrets': 'secrets',
        'services': 'services',
        'statefulsets': 'statefulsets',
        'volume_snapshots': 'volume_snapshots'
    }

    def __init__(self, configmaps=None, ingresses=None, jobs=None, persistent_volume_claims=None, persistent_volumes=None, secrets=None, services=None, statefulsets=None, volume_snapshots=None, local_vars_configuration=None):  # noqa: E501
        """KubernetesWorkloadKubernetesResource - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._configmaps = None
        self._ingresses = None
        self._jobs = None
        self._persistent_volume_claims = None
        self._persistent_volumes = None
        self._secrets = None
        self._services = None
        self._statefulsets = None
        self._volume_snapshots = None
        self.discriminator = None

        if configmaps is not None:
            self.configmaps = configmaps
        if ingresses is not None:
            self.ingresses = ingresses
        if jobs is not None:
            self.jobs = jobs
        if persistent_volume_claims is not None:
            self.persistent_volume_claims = persistent_volume_claims
        if persistent_volumes is not None:
            self.persistent_volumes = persistent_volumes
        if secrets is not None:
            self.secrets = secrets
        if services is not None:
            self.services = services
        if statefulsets is not None:
            self.statefulsets = statefulsets
        if volume_snapshots is not None:
            self.volume_snapshots = volume_snapshots

    @property
    def configmaps(self):
        """Gets the configmaps of this KubernetesWorkloadKubernetesResource.  # noqa: E501


        :return: The configmaps of this KubernetesWorkloadKubernetesResource.  # noqa: E501
        :rtype: list[V1ConfigMap]
        """
        return self._configmaps

    @configmaps.setter
    def configmaps(self, configmaps):
        """Sets the configmaps of this KubernetesWorkloadKubernetesResource.


        :param configmaps: The configmaps of this KubernetesWorkloadKubernetesResource.  # noqa: E501
        :type configmaps: list[V1ConfigMap]
        """

        self._configmaps = configmaps

    @property
    def ingresses(self):
        """Gets the ingresses of this KubernetesWorkloadKubernetesResource.  # noqa: E501


        :return: The ingresses of this KubernetesWorkloadKubernetesResource.  # noqa: E501
        :rtype: list[V1beta1Ingress]
        """
        return self._ingresses

    @ingresses.setter
    def ingresses(self, ingresses):
        """Sets the ingresses of this KubernetesWorkloadKubernetesResource.


        :param ingresses: The ingresses of this KubernetesWorkloadKubernetesResource.  # noqa: E501
        :type ingresses: list[V1beta1Ingress]
        """

        self._ingresses = ingresses

    @property
    def jobs(self):
        """Gets the jobs of this KubernetesWorkloadKubernetesResource.  # noqa: E501


        :return: The jobs of this KubernetesWorkloadKubernetesResource.  # noqa: E501
        :rtype: list[V1Job]
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs):
        """Sets the jobs of this KubernetesWorkloadKubernetesResource.


        :param jobs: The jobs of this KubernetesWorkloadKubernetesResource.  # noqa: E501
        :type jobs: list[V1Job]
        """

        self._jobs = jobs

    @property
    def persistent_volume_claims(self):
        """Gets the persistent_volume_claims of this KubernetesWorkloadKubernetesResource.  # noqa: E501


        :return: The persistent_volume_claims of this KubernetesWorkloadKubernetesResource.  # noqa: E501
        :rtype: list[V1PersistentVolumeClaim]
        """
        return self._persistent_volume_claims

    @persistent_volume_claims.setter
    def persistent_volume_claims(self, persistent_volume_claims):
        """Sets the persistent_volume_claims of this KubernetesWorkloadKubernetesResource.


        :param persistent_volume_claims: The persistent_volume_claims of this KubernetesWorkloadKubernetesResource.  # noqa: E501
        :type persistent_volume_claims: list[V1PersistentVolumeClaim]
        """

        self._persistent_volume_claims = persistent_volume_claims

    @property
    def persistent_volumes(self):
        """Gets the persistent_volumes of this KubernetesWorkloadKubernetesResource.  # noqa: E501


        :return: The persistent_volumes of this KubernetesWorkloadKubernetesResource.  # noqa: E501
        :rtype: list[V1PersistentVolume]
        """
        return self._persistent_volumes

    @persistent_volumes.setter
    def persistent_volumes(self, persistent_volumes):
        """Sets the persistent_volumes of this KubernetesWorkloadKubernetesResource.


        :param persistent_volumes: The persistent_volumes of this KubernetesWorkloadKubernetesResource.  # noqa: E501
        :type persistent_volumes: list[V1PersistentVolume]
        """

        self._persistent_volumes = persistent_volumes

    @property
    def secrets(self):
        """Gets the secrets of this KubernetesWorkloadKubernetesResource.  # noqa: E501


        :return: The secrets of this KubernetesWorkloadKubernetesResource.  # noqa: E501
        :rtype: list[V1Secret]
        """
        return self._secrets

    @secrets.setter
    def secrets(self, secrets):
        """Sets the secrets of this KubernetesWorkloadKubernetesResource.


        :param secrets: The secrets of this KubernetesWorkloadKubernetesResource.  # noqa: E501
        :type secrets: list[V1Secret]
        """

        self._secrets = secrets

    @property
    def services(self):
        """Gets the services of this KubernetesWorkloadKubernetesResource.  # noqa: E501


        :return: The services of this KubernetesWorkloadKubernetesResource.  # noqa: E501
        :rtype: list[V1Service]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this KubernetesWorkloadKubernetesResource.


        :param services: The services of this KubernetesWorkloadKubernetesResource.  # noqa: E501
        :type services: list[V1Service]
        """

        self._services = services

    @property
    def statefulsets(self):
        """Gets the statefulsets of this KubernetesWorkloadKubernetesResource.  # noqa: E501


        :return: The statefulsets of this KubernetesWorkloadKubernetesResource.  # noqa: E501
        :rtype: list[V1StatefulSet]
        """
        return self._statefulsets

    @statefulsets.setter
    def statefulsets(self, statefulsets):
        """Sets the statefulsets of this KubernetesWorkloadKubernetesResource.


        :param statefulsets: The statefulsets of this KubernetesWorkloadKubernetesResource.  # noqa: E501
        :type statefulsets: list[V1StatefulSet]
        """

        self._statefulsets = statefulsets

    @property
    def volume_snapshots(self):
        """Gets the volume_snapshots of this KubernetesWorkloadKubernetesResource.  # noqa: E501


        :return: The volume_snapshots of this KubernetesWorkloadKubernetesResource.  # noqa: E501
        :rtype: list[V1VolumeSnapshot]
        """
        return self._volume_snapshots

    @volume_snapshots.setter
    def volume_snapshots(self, volume_snapshots):
        """Sets the volume_snapshots of this KubernetesWorkloadKubernetesResource.


        :param volume_snapshots: The volume_snapshots of this KubernetesWorkloadKubernetesResource.  # noqa: E501
        :type volume_snapshots: list[V1VolumeSnapshot]
        """

        self._volume_snapshots = volume_snapshots

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KubernetesWorkloadKubernetesResource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KubernetesWorkloadKubernetesResource):
            return True

        return self.to_dict() != other.to_dict()
