# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class V1ConfigMap(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'annotations': 'dict(str, str)',
        'api_version': 'str',
        'binary_data': 'dict(str, list[int])',
        'cluster_name': 'str',
        'creation_timestamp': 'object',
        'data': 'dict(str, str)',
        'deletion_grace_period_seconds': 'int',
        'deletion_timestamp': 'object',
        'finalizers': 'list[str]',
        'generate_name': 'str',
        'generation': 'int',
        'immutable': 'bool',
        'kind': 'str',
        'labels': 'dict(str, str)',
        'managed_fields': 'list[V1ManagedFieldsEntry]',
        'name': 'str',
        'namespace': 'str',
        'owner_references': 'list[V1OwnerReference]',
        'resource_version': 'str',
        'self_link': 'str',
        'uid': 'str'
    }

    attribute_map = {
        'annotations': 'annotations',
        'api_version': 'apiVersion',
        'binary_data': 'binaryData',
        'cluster_name': 'clusterName',
        'creation_timestamp': 'creationTimestamp',
        'data': 'data',
        'deletion_grace_period_seconds': 'deletionGracePeriodSeconds',
        'deletion_timestamp': 'deletionTimestamp',
        'finalizers': 'finalizers',
        'generate_name': 'generateName',
        'generation': 'generation',
        'immutable': 'immutable',
        'kind': 'kind',
        'labels': 'labels',
        'managed_fields': 'managedFields',
        'name': 'name',
        'namespace': 'namespace',
        'owner_references': 'ownerReferences',
        'resource_version': 'resourceVersion',
        'self_link': 'selfLink',
        'uid': 'uid'
    }

    def __init__(self, annotations=None, api_version=None, binary_data=None, cluster_name=None, creation_timestamp=None, data=None, deletion_grace_period_seconds=None, deletion_timestamp=None, finalizers=None, generate_name=None, generation=None, immutable=None, kind=None, labels=None, managed_fields=None, name=None, namespace=None, owner_references=None, resource_version=None, self_link=None, uid=None, local_vars_configuration=None):  # noqa: E501
        """V1ConfigMap - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._annotations = None
        self._api_version = None
        self._binary_data = None
        self._cluster_name = None
        self._creation_timestamp = None
        self._data = None
        self._deletion_grace_period_seconds = None
        self._deletion_timestamp = None
        self._finalizers = None
        self._generate_name = None
        self._generation = None
        self._immutable = None
        self._kind = None
        self._labels = None
        self._managed_fields = None
        self._name = None
        self._namespace = None
        self._owner_references = None
        self._resource_version = None
        self._self_link = None
        self._uid = None
        self.discriminator = None

        if annotations is not None:
            self.annotations = annotations
        if api_version is not None:
            self.api_version = api_version
        if binary_data is not None:
            self.binary_data = binary_data
        if cluster_name is not None:
            self.cluster_name = cluster_name
        if creation_timestamp is not None:
            self.creation_timestamp = creation_timestamp
        if data is not None:
            self.data = data
        self.deletion_grace_period_seconds = deletion_grace_period_seconds
        if deletion_timestamp is not None:
            self.deletion_timestamp = deletion_timestamp
        if finalizers is not None:
            self.finalizers = finalizers
        if generate_name is not None:
            self.generate_name = generate_name
        if generation is not None:
            self.generation = generation
        self.immutable = immutable
        if kind is not None:
            self.kind = kind
        if labels is not None:
            self.labels = labels
        if managed_fields is not None:
            self.managed_fields = managed_fields
        if name is not None:
            self.name = name
        if namespace is not None:
            self.namespace = namespace
        if owner_references is not None:
            self.owner_references = owner_references
        if resource_version is not None:
            self.resource_version = resource_version
        if self_link is not None:
            self.self_link = self_link
        if uid is not None:
            self.uid = uid

    @property
    def annotations(self):
        """Gets the annotations of this V1ConfigMap.  # noqa: E501


        :return: The annotations of this V1ConfigMap.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this V1ConfigMap.


        :param annotations: The annotations of this V1ConfigMap.  # noqa: E501
        :type annotations: dict(str, str)
        """

        self._annotations = annotations

    @property
    def api_version(self):
        """Gets the api_version of this V1ConfigMap.  # noqa: E501


        :return: The api_version of this V1ConfigMap.  # noqa: E501
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this V1ConfigMap.


        :param api_version: The api_version of this V1ConfigMap.  # noqa: E501
        :type api_version: str
        """

        self._api_version = api_version

    @property
    def binary_data(self):
        """Gets the binary_data of this V1ConfigMap.  # noqa: E501


        :return: The binary_data of this V1ConfigMap.  # noqa: E501
        :rtype: dict(str, list[int])
        """
        return self._binary_data

    @binary_data.setter
    def binary_data(self, binary_data):
        """Sets the binary_data of this V1ConfigMap.


        :param binary_data: The binary_data of this V1ConfigMap.  # noqa: E501
        :type binary_data: dict(str, list[int])
        """

        self._binary_data = binary_data

    @property
    def cluster_name(self):
        """Gets the cluster_name of this V1ConfigMap.  # noqa: E501


        :return: The cluster_name of this V1ConfigMap.  # noqa: E501
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this V1ConfigMap.


        :param cluster_name: The cluster_name of this V1ConfigMap.  # noqa: E501
        :type cluster_name: str
        """

        self._cluster_name = cluster_name

    @property
    def creation_timestamp(self):
        """Gets the creation_timestamp of this V1ConfigMap.  # noqa: E501


        :return: The creation_timestamp of this V1ConfigMap.  # noqa: E501
        :rtype: object
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):
        """Sets the creation_timestamp of this V1ConfigMap.


        :param creation_timestamp: The creation_timestamp of this V1ConfigMap.  # noqa: E501
        :type creation_timestamp: object
        """

        self._creation_timestamp = creation_timestamp

    @property
    def data(self):
        """Gets the data of this V1ConfigMap.  # noqa: E501


        :return: The data of this V1ConfigMap.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this V1ConfigMap.


        :param data: The data of this V1ConfigMap.  # noqa: E501
        :type data: dict(str, str)
        """

        self._data = data

    @property
    def deletion_grace_period_seconds(self):
        """Gets the deletion_grace_period_seconds of this V1ConfigMap.  # noqa: E501


        :return: The deletion_grace_period_seconds of this V1ConfigMap.  # noqa: E501
        :rtype: int
        """
        return self._deletion_grace_period_seconds

    @deletion_grace_period_seconds.setter
    def deletion_grace_period_seconds(self, deletion_grace_period_seconds):
        """Sets the deletion_grace_period_seconds of this V1ConfigMap.


        :param deletion_grace_period_seconds: The deletion_grace_period_seconds of this V1ConfigMap.  # noqa: E501
        :type deletion_grace_period_seconds: int
        """

        self._deletion_grace_period_seconds = deletion_grace_period_seconds

    @property
    def deletion_timestamp(self):
        """Gets the deletion_timestamp of this V1ConfigMap.  # noqa: E501


        :return: The deletion_timestamp of this V1ConfigMap.  # noqa: E501
        :rtype: object
        """
        return self._deletion_timestamp

    @deletion_timestamp.setter
    def deletion_timestamp(self, deletion_timestamp):
        """Sets the deletion_timestamp of this V1ConfigMap.


        :param deletion_timestamp: The deletion_timestamp of this V1ConfigMap.  # noqa: E501
        :type deletion_timestamp: object
        """

        self._deletion_timestamp = deletion_timestamp

    @property
    def finalizers(self):
        """Gets the finalizers of this V1ConfigMap.  # noqa: E501


        :return: The finalizers of this V1ConfigMap.  # noqa: E501
        :rtype: list[str]
        """
        return self._finalizers

    @finalizers.setter
    def finalizers(self, finalizers):
        """Sets the finalizers of this V1ConfigMap.


        :param finalizers: The finalizers of this V1ConfigMap.  # noqa: E501
        :type finalizers: list[str]
        """

        self._finalizers = finalizers

    @property
    def generate_name(self):
        """Gets the generate_name of this V1ConfigMap.  # noqa: E501


        :return: The generate_name of this V1ConfigMap.  # noqa: E501
        :rtype: str
        """
        return self._generate_name

    @generate_name.setter
    def generate_name(self, generate_name):
        """Sets the generate_name of this V1ConfigMap.


        :param generate_name: The generate_name of this V1ConfigMap.  # noqa: E501
        :type generate_name: str
        """

        self._generate_name = generate_name

    @property
    def generation(self):
        """Gets the generation of this V1ConfigMap.  # noqa: E501


        :return: The generation of this V1ConfigMap.  # noqa: E501
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this V1ConfigMap.


        :param generation: The generation of this V1ConfigMap.  # noqa: E501
        :type generation: int
        """

        self._generation = generation

    @property
    def immutable(self):
        """Gets the immutable of this V1ConfigMap.  # noqa: E501


        :return: The immutable of this V1ConfigMap.  # noqa: E501
        :rtype: bool
        """
        return self._immutable

    @immutable.setter
    def immutable(self, immutable):
        """Sets the immutable of this V1ConfigMap.


        :param immutable: The immutable of this V1ConfigMap.  # noqa: E501
        :type immutable: bool
        """

        self._immutable = immutable

    @property
    def kind(self):
        """Gets the kind of this V1ConfigMap.  # noqa: E501


        :return: The kind of this V1ConfigMap.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this V1ConfigMap.


        :param kind: The kind of this V1ConfigMap.  # noqa: E501
        :type kind: str
        """

        self._kind = kind

    @property
    def labels(self):
        """Gets the labels of this V1ConfigMap.  # noqa: E501


        :return: The labels of this V1ConfigMap.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this V1ConfigMap.


        :param labels: The labels of this V1ConfigMap.  # noqa: E501
        :type labels: dict(str, str)
        """

        self._labels = labels

    @property
    def managed_fields(self):
        """Gets the managed_fields of this V1ConfigMap.  # noqa: E501


        :return: The managed_fields of this V1ConfigMap.  # noqa: E501
        :rtype: list[V1ManagedFieldsEntry]
        """
        return self._managed_fields

    @managed_fields.setter
    def managed_fields(self, managed_fields):
        """Sets the managed_fields of this V1ConfigMap.


        :param managed_fields: The managed_fields of this V1ConfigMap.  # noqa: E501
        :type managed_fields: list[V1ManagedFieldsEntry]
        """

        self._managed_fields = managed_fields

    @property
    def name(self):
        """Gets the name of this V1ConfigMap.  # noqa: E501


        :return: The name of this V1ConfigMap.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1ConfigMap.


        :param name: The name of this V1ConfigMap.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this V1ConfigMap.  # noqa: E501


        :return: The namespace of this V1ConfigMap.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this V1ConfigMap.


        :param namespace: The namespace of this V1ConfigMap.  # noqa: E501
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def owner_references(self):
        """Gets the owner_references of this V1ConfigMap.  # noqa: E501


        :return: The owner_references of this V1ConfigMap.  # noqa: E501
        :rtype: list[V1OwnerReference]
        """
        return self._owner_references

    @owner_references.setter
    def owner_references(self, owner_references):
        """Sets the owner_references of this V1ConfigMap.


        :param owner_references: The owner_references of this V1ConfigMap.  # noqa: E501
        :type owner_references: list[V1OwnerReference]
        """

        self._owner_references = owner_references

    @property
    def resource_version(self):
        """Gets the resource_version of this V1ConfigMap.  # noqa: E501


        :return: The resource_version of this V1ConfigMap.  # noqa: E501
        :rtype: str
        """
        return self._resource_version

    @resource_version.setter
    def resource_version(self, resource_version):
        """Sets the resource_version of this V1ConfigMap.


        :param resource_version: The resource_version of this V1ConfigMap.  # noqa: E501
        :type resource_version: str
        """

        self._resource_version = resource_version

    @property
    def self_link(self):
        """Gets the self_link of this V1ConfigMap.  # noqa: E501


        :return: The self_link of this V1ConfigMap.  # noqa: E501
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this V1ConfigMap.


        :param self_link: The self_link of this V1ConfigMap.  # noqa: E501
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def uid(self):
        """Gets the uid of this V1ConfigMap.  # noqa: E501


        :return: The uid of this V1ConfigMap.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this V1ConfigMap.


        :param uid: The uid of this V1ConfigMap.  # noqa: E501
        :type uid: str
        """

        self._uid = uid

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ConfigMap):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1ConfigMap):
            return True

        return self.to_dict() != other.to_dict()
