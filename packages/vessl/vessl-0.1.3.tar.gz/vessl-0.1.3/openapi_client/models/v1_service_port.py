# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class V1ServicePort(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'app_protocol': 'str',
        'name': 'str',
        'node_port': 'int',
        'port': 'int',
        'protocol': 'str',
        'target_port': 'IntstrIntOrString'
    }

    attribute_map = {
        'app_protocol': 'appProtocol',
        'name': 'name',
        'node_port': 'nodePort',
        'port': 'port',
        'protocol': 'protocol',
        'target_port': 'targetPort'
    }

    def __init__(self, app_protocol=None, name=None, node_port=None, port=None, protocol=None, target_port=None, local_vars_configuration=None):  # noqa: E501
        """V1ServicePort - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._app_protocol = None
        self._name = None
        self._node_port = None
        self._port = None
        self._protocol = None
        self._target_port = None
        self.discriminator = None

        self.app_protocol = app_protocol
        if name is not None:
            self.name = name
        if node_port is not None:
            self.node_port = node_port
        if port is not None:
            self.port = port
        if protocol is not None:
            self.protocol = protocol
        if target_port is not None:
            self.target_port = target_port

    @property
    def app_protocol(self):
        """Gets the app_protocol of this V1ServicePort.  # noqa: E501


        :return: The app_protocol of this V1ServicePort.  # noqa: E501
        :rtype: str
        """
        return self._app_protocol

    @app_protocol.setter
    def app_protocol(self, app_protocol):
        """Sets the app_protocol of this V1ServicePort.


        :param app_protocol: The app_protocol of this V1ServicePort.  # noqa: E501
        :type app_protocol: str
        """

        self._app_protocol = app_protocol

    @property
    def name(self):
        """Gets the name of this V1ServicePort.  # noqa: E501


        :return: The name of this V1ServicePort.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1ServicePort.


        :param name: The name of this V1ServicePort.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def node_port(self):
        """Gets the node_port of this V1ServicePort.  # noqa: E501


        :return: The node_port of this V1ServicePort.  # noqa: E501
        :rtype: int
        """
        return self._node_port

    @node_port.setter
    def node_port(self, node_port):
        """Sets the node_port of this V1ServicePort.


        :param node_port: The node_port of this V1ServicePort.  # noqa: E501
        :type node_port: int
        """

        self._node_port = node_port

    @property
    def port(self):
        """Gets the port of this V1ServicePort.  # noqa: E501


        :return: The port of this V1ServicePort.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this V1ServicePort.


        :param port: The port of this V1ServicePort.  # noqa: E501
        :type port: int
        """

        self._port = port

    @property
    def protocol(self):
        """Gets the protocol of this V1ServicePort.  # noqa: E501


        :return: The protocol of this V1ServicePort.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this V1ServicePort.


        :param protocol: The protocol of this V1ServicePort.  # noqa: E501
        :type protocol: str
        """

        self._protocol = protocol

    @property
    def target_port(self):
        """Gets the target_port of this V1ServicePort.  # noqa: E501


        :return: The target_port of this V1ServicePort.  # noqa: E501
        :rtype: IntstrIntOrString
        """
        return self._target_port

    @target_port.setter
    def target_port(self, target_port):
        """Sets the target_port of this V1ServicePort.


        :param target_port: The target_port of this V1ServicePort.  # noqa: E501
        :type target_port: IntstrIntOrString
        """

        self._target_port = target_port

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ServicePort):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1ServicePort):
            return True

        return self.to_dict() != other.to_dict()
