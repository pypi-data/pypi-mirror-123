Normal:
     name: Normal
     spec: ('mu', float32), ('sigma', float32)
     pyname: norm
     loc: self.mu
     scale: self.sigma
     shape: None
     mean: self.mu
     median: self.quantile(.5)
     mode: self.mu
     var: self.sigma ** 2
     std: self.sigma
     skewness: 0.0
     kurtosis: 0.0
     entropy: 0.5 * (np.log(2*np.pi) + 1.0) + np.log(self.sigma)
     mgf: np.exp(x * mu + 0.5 * sigma**2 * x**2)
     cf: np.exp(1j * x * mu - 0.5 * sigma**2 * x**2)
     insupport: -np.inf < x < np.inf
     name_doc: Normal
     pdf_tex: p(x;\mu,\sigma)=\frac{1}{\sigma \sqrt{2\pi}}
               e^{-\frac{(x-\mu)^2}{2\sigma^2}}
     param_names: ["mu", "sigma"]
     param_descrs: ["mean of the distribution",
                    "Standard deviation of the distribution"]
     string: Normal(mu=%.5f, sigma=%.5f)

Chisq:
     name: Chisq
     spec: ('v', int32)
     pyname: chisq
     loc: None
     scale: None
     shape: self.v
     mean: self.v
     median: self.quantile(.5)
     mode: max(self.v - 2, 0)
     var: self.v * 2.0
     std: np.sqrt(self.v * 2.0)
     skewness: np.sqrt(8.0 / self.v)
     kurtosis: 12.0 / self.v
     entropy: .5 * self.v +  np.log(2.0) + lgamma(.5 * self.v) +
               (1.0 - .5 * self.v) * digamma(.5 * self.v)
     mgf: (1.0 - 2.0 * x)**(-v * 0.5)
     cf: (1.0 - 2.0 * 1j * x)**(-v * 0.5)
     insupport: 0 <= x < np.inf
     name_doc: Chi squared
     pdf_tex: p(x; k)= \frac{x^{k/2 - 1} e^{-x/2}}{2^{k/2}
               \Gamma(k/2)}, x > 0
     param_names: ["k"]
     param_descrs: ["Degrees of Freedom"]
     string: ChiSquared(k=%.5f)


Uniform:
     name: Uniform
     spec: ('a', float32), ('b', float32)
     pyname: unif
     loc: self.a
     scale: self.b - self.a
     shape: None
     mean: .5 * (self.a + self.b)
     median: .5 * (self.a + self.b)
     mode: None
     var: (self.b - self.a)**2/12
     std: (self.b - self.a)/np.sqrt(12)
     skewness: 0
     kurtosis: -1.2
     entropy: np.log(self.b - self.a)
     mgf: (np.exp(x * b) - np.exp(x * a))/(x * (b - a)) if x != 0 else 1
     cf: (np.exp(1j * x * b) - np.exp(1j * x * a))/(1j * x * (b - a))
     insupport: a <= x < b
     name_doc: Uniform
     pdf_tex: p(x; a, b) = \frac{1}{b-a}; a \leq x \leq b
     param_names: ["a", "b"]
     param_descrs: ["Lower Bound", "Upper Bound"]
     string: Uniform(a=%.5f, b=%.5f)

T:
     name: T
     spec: ('v', int32)
     pyname: tdist
     loc: None
     scale: None
     shape: self.v
     mean: 0
     median: 0
     mode: 0
     var: self.v/(self.v - 2) if self.v > 2 else np.inf
     std: np.sqrt(self.v/(self.v - 2)) if self.v > 2 else np.inf
     skewness: 0 if self.v > 3 else None
     kurtosis: 6/(self.v - 4) if self.v > 4 else np.inf
     entropy: .5*(self.v + 1)*(digamma(.5*(self.v + 1)) -
               digamma(.5*self.v)) + np.log(np.sqrt(self.v) *
               beta(.5*self.v, .5))
     mgf: None
     cf: bessel_k(v/2, np.sqrt(v)*abs(x))*(np.sqrt(v)*abs(x))**(v/2)/
          (gamma(v/2)*2**(v/2 - 1))
     insupport: -np.inf <= x < np.inf
     name_doc: T
     pdf_tex: p(x;df)= \frac{G \left(\frac{df+1}{2}\right)}{\sqrt{df\pi}
                G\left(\frac{df}{2} \right)}
                \left(1 + \frac{x^2}{df} \right)^{- \frac{df+1}{2}}
                \n where :math:`G(\cdot)` is the Gamma function
     param_names: ["df"]
     param_descrs: ["Degrees of freedom (real, >0)"]
     string: T(df=%.5f)

LogNormal:
     name: LogNormal
     spec: ('mu', float32), ('sigma', float32)
     pyname: lnorm
     loc: self.mu
     scale: self.sigma
     shape: None
     mean: np.exp(self.mu + .5* self.sigma**2)
     median: np.exp(self.mu)
     mode: np.exp(self.mu - self.sigma**2)
     var: (np.exp(self.sigma**2) - 1) * np.exp(2*self.mu + self.sigma**2)
     std: np.sqrt(self.var)
     skewness: (np.exp(self.sigma**2) + 2) * np.sqrt(np.exp(self.sigma**2) - 1)
     kurtosis: np.exp(4*self.sigma**2) + 2*np.exp(3*self.sigma**2)
               + 3*np.exp(2*self.sigma**2) - 6
     entropy: np.log(self.sigma*np.exp(self.mu + .5)*np.sqrt(2*np.pi))
     mgf: None
     cf: None
     insupport: 0 < x < np.inf
     name_doc: Log-normal
     pdf_tex: p(x; \mu, \sigma) = \frac{1}{x \sqrt{2 \pi \sigma^2}}
               \exp \left( - \frac{(\log(x) - \mu)^2}{2 \sigma^2}\right)
     param_names: ["mu", "sigma"]
     param_descrs: ["Log-scale (mean of log of RV)",
                    "Shape parameter (must be >0, std. of log of RV)"]
     string: LogNormal(mu=%.5f, sigma=%.5f)

F:
     name: F
     spec: ('v1', float32), ('v2', float32)
     pyname: fdist
     loc: None
     scale: None
     shape: (self.v1, self.v2)
     mean: self.v2/(self.v2 - 2) if self.v2 > 2 else np.inf
     median: None
     mode: (self.v1 - 2)/self.v1 * self.v2/(self.v2 + 2) if self.v1 > 2 else np.inf
     var: 2*self.v2**2*(self.v1 + self.v2 - 2)/
          (self.v1*(self.v2 - 2)**2*(self.v2 - 4)) if self.v2 > 4 else np.inf
     std: np.sqrt(self.var)
     skewness: (2*self.v1 + self.v2 - 2)*np.sqrt(8*(self.v2 - 4))/
               ((self.v2 - 6)*np.sqrt(self.v1*(self.v1+self.v2-2)))
               if self.v2 > 6 else np.inf
     kurtosis: 3 + 12*(self.v1*(5*self.v2 - 22)*(self.v1+self.v2-2) +
               (self.v2 - 4)*(self.v2 - 2)**2)/
               (self.v1*(self.v2-6)*(self.v2-8)*(self.v1+self.v2-2))
     entropy: None
     mgf: None
     cf: None
     insupport: 0 <= x < np.inf
     name_doc: F
     pdf_tex: p(x; d_1, d_2) = \frac{1}{x B(d_1/2, d_2/2)}
               \sqrt{\frac{(d_1 x)^{d_1} \cdot
               d_2^{d_2}}{(d_1 x + d_2)^{d_1 + d_2}}}
     param_names: ["d1", "d2"]
     param_descrs: ["Numerator degrees of freedom (must be >0)",
                    "Denominator degrees of freedom (must be >0)"]
     string: F(d1=%.5f, d2=%.5f)

Gamma:
     name: Gamma
     spec: ('alpha', float32), ('beta', float32)
     pyname: gamma
     loc: None
     scale: self.beta
     shape: self.alpha
     rate: 1/self.beta
     mean: self.alpha*self.beta
     median: None
     mode: (self.alpha - 1) * self.beta if self.alpha >= 1 else None
     var: self.alpha * (self.beta**2)
     std: np.sqrt(self.var)
     skewness: 2/(np.sqrt(self.alpha))
     kurtosis: 3 + 6/self.alpha
     entropy: self.alpha - np.log(self.beta) + np.log(gamma(self.alpha))
               + (1 - self.alpha)*digamma(self.alpha)
     mgf: (1 - x/beta)**(-alpha) if x < beta else None
     cf: (1 - (1j * x)/beta)**(-alpha)
     insupport: 0 < x < np.inf
     name_doc: Gamma
     pdf_tex: p(x;\alpha,\beta)=\frac{x^{\alpha-1} e^{-x/\beta}}
                {\Gamma(\alpha) \beta^\alpha}
     param_names: ["alpha", "beta"]
     param_descrs: ["Shape parameter", "Scale parameter"]
     string: Gamma(alpha=%.5f, beta=%.5f)

Beta:
     name: Beta
     spec: ('alpha', float32), ('beta', float32)
     pyname: beta
     loc: None
     scale: None
     shape: (self.alpha, self.beta)
     mean: self.alpha/(self.alpha + self.beta)
     median: (self.alpha - 1/3)/(self.alpha + self.beta - 2/3)
                if self.alpha >=1 and self.beta >= 1 else None
     mode: (self.alpha - 1)/(self.alpha + self.beta - 2)
                if self.alpha > 1 and self.beta > 1 else None
     var: (self.alpha * self.beta)/
               ((self.alpha + self.beta)**2 * (self.alpha + self.beta + 1))
     std: np.sqrt(self.var)
     skewness: 2 * (self.beta - self.alpha) * np.sqrt(self.alpha + self.beta + 1)/
               ((self.alpha + self.beta + 2) * np.sqrt(self.alpha * self.beta))
     kurtosis: 3 + 6 * ((self.alpha - self.beta)**2*(self.alpha + self.beta + 1) -
                self.alpha * self.beta * (self.alpha + self.beta + 2) )/
               (self.alpha * self.beta * (self.alpha + self.beta + 2) *
               (self.alpha + self.beta + 3))
     entropy: np.log(beta(self.alpha, self.beta)) - (self.alpha - 1)*
               digamma(self.alpha) - (self.beta - 1)*digamma(self.beta) +
               (self.alpha + self.beta - 2)*digamma(self.alpha + self.beta)
     mgf: None
     cf: None
     insupport: 0 < x < 1
     name_doc: Beta
     pdf_tex: p(x; \alpha, \beta) = \frac{1}{B(\alpha, \beta)}
               x^{\alpha - 1} (1 - x)^{\beta - 1}, \quad x \in (0, 1)
     param_names: ["alpha", "beta"]
     param_descrs: ["First shape parameter (must be >0)",
                    "Second shape parameter (must be >0)"]
     string: Beta(alpha=%.5f, beta=%.5f)

Exponential:
     name: Exponential
     spec: ('theta', float32)
     pyname: exp
     loc: None
     scale: 1/self.theta
     shape: None
     mean: 1/self.theta
     median: 1/self.theta * np.log(2)
     mode: 0
     var: self.theta**(-2)
     std: np.sqrt(self.var)
     skewness: 2
     kurtosis: 9
     entropy: 1 - np.log(self.theta)
     mgf: theta/(theta - x) if x < theta else None
     cf: theta/(theta - 1j*x)
     insupport: 0 <= x < np.inf
     name_doc: Exponential
     pdf_tex: p(x; \theta) = \theta e^{-\theta x}
     param_names: ["theta"]
     param_descrs: ["Rate parameter"]
     string: Exponential(theta=%.5f)

Cauchy:
     name: Cauchy
     spec: ('mu', float32), ('sigma', float32)
     pyname: cauchy
     loc: self.mu
     scale: self.sigma
     shape: None
     mean: None
     median: self.mu
     mode: self.mu
     var: None
     std: None
     skewness: None
     kurtosis: 0
     entropy: np.log(self.sigma) + np.log(4*np.pi)
     mgf: None
     cf: np.exp(mu*1j*x - sigma*np.abs(x))
     insupport: -np.inf < x < np.inf
     name_doc: Cauchy
     pdf_tex: p(x; \mu, \sigma) = \frac{1}{\pi \sigma (1 +
               (\frac{x - \mu}{\sigma})^2)}
     param_names: ["mu", "sigma"]
     param_descrs: ["Location parameter", "Scale parameter"]
     string: Cauchy(mu=%.5f, sigma=%.5f)

Poisson:
     name: Poisson
     spec: ('mu', float32)
     pyname: pois
     loc: None
     scale: None
     shape: self.mu
     mean: self.mu
     median: np.floor(self.mu + 1/3 - 0.02/self.mu)
     mode: (np.ceil(self.mu) - 1, np.floor(self.mu))
     var: self.mu
     std: np.sqrt(self.var)
     skewness: self.mu**(.5)
     kurtosis: 1/self.mu
     entropy: .5*np.log(2*np.pi*np.e*self.mu) - 1/(12*self.mu) -
               1/(24*self.mu**2) - 19/(360*self.mu**3)
     mgf: np.exp(mu*(np.exp(x) - 1))
     cf: np.exp(mu*(np.exp(1j*x) - 1))
     insupport: isinstance(x, int)
     name_doc: Poisson
     pdf_tex: p(x; \mu) = e^{-\mu} * \frac{\mu^k}{k!}
     param_names: ["mu"]
     param_descrs: ["Shape parameter"]
     string: Poisson(mu=%.5f)

Geometric:
     name: Geometric
     spec: ('p', float32)
     pyname: geom
     loc: None
     scale: None
     shape: None
     mean: 1/self.p
     median: np.ceil(-1/(np.log2(1-self.p)))
     mode: 1
     var: (1 - self.p)/(self.p**2)
     std: np.sqrt(self.var)
     skewness: (2 - self.p)/(np.sqrt(1 - self.p))
     kurtosis: 9 + self.p/((1 - self.p)**2)
     entropy: (-(1 - self.p)*np.log2(1 - self.p) -
               self.p*np.log2(self.p))/self.p
     mgf: p*np.exp(x)/(1 - (1 - p)*np.exp(x))
          if x < -np.log(1-p) else None
     cf: p*np.exp(x*1j)/(1 - (1 - p)*np.exp(x*1j))
     insupport: isinstance(x, int)
     name_doc: Geometric
     pdf_tex: p(x; p) = (1 - p)^{x-1} * p
     param_names: ["p"]
     param_descrs: ["Succes probability"]
     string: Geometric(p=%.5f)

Binomial:
     name: Binomial
     spec: ('n', int32), ("p", float32)
     pyname: binom
     loc: None
     scale: None
     shape: None
     mean: self.n*self.p
     median: (np.floor(self.n*self.p), np.ceil(self.n*self.p))
     mode: (np.floor((self.n + 1)*self.p), np.ceil((self.n + 1)*self.p) - 1)
     var: self.n*self.p*(1 - self.p)
     std: np.sqrt(self.var)
     skewness: (1 - 2*self.p)/(np.sqrt(self.n*self.p*(1 - self.p)))
     kurtosis: 3 + (1 - 6*self.p*(1 - self.p))/(self.n*self.p*(1 - self.p))
     entropy: .5*np.log(2*np.pi*np.e*self.n*self.p*(1 - self.p))
     mgf: (1 - p + p*np.exp(x))**n
     cf: (1 - p + p*np.exp(x*1j))**n
     insupport: isinstance(x, int)
     name_doc: Binomial
     pdf_tex: p(x; p) = \binom{n}{k}p^k (1 - p)^{n-k}
     param_names: ["n", "p"]
     param_descrs: ["Number of trials", "Succes probability"]
     string: Binomial(n=%.5f, p=%.5f)

Logistic:
     name: Logistic
     spec: ('mu', float32), ("theta", float32)
     pyname: logis
     loc: self.mu
     scale: self.theta
     shape: None
     mean: self.mu
     median: self.mu
     mode: self.mu
     var: (self.theta**2 * np.pi**2)/3
     std: np.sqrt(self.var)
     skewness: 0
     kurtosis: 3 + 1.2
     entropy: np.log(self.theta) + 2
     mgf: np.exp(mu*x)*beta(1 - theta*x, 1 + theta*x)
     cf: np.exp(mu*x*1j)*np.pi*theta*x/np.sinh(np.pi*theta*x)
     insupport: -np.inf < x < np.inf
     name_doc: Logistic
     pdf_tex: p(x; \mu, \theta) = \frac{1}{4\theta}
               \text{sech}^2\left(\frac{x - \mu}{2\theta}\right)
     param_names: ["mu", "theta"]
     param_descrs: ["Location parameter", "Scale parameter"]
     string: Logistic(mu=%.5f, theta=%.5f)

Weibull:
     name: Weibull
     spec: ('alpha', float32), ("theta", float32)
     pyname: weibull
     loc: None
     scale: self.alpha
     shape: self.theta
     mean: self.alpha*gamma(1 + 1/self.theta)
     median: self.alpha*(np.log(2))**(1/self.theta)
     mode: self.alpha*((self.theta - 1)/self.theta)**(1/self.theta)
     var: self.alpha**2*(gamma(1 + 2/self.theta) - (gamma(1 + 1/self.theta))**2)
     std: np.sqrt(self.var)
     skewness: (gamma(1 + 3/self.theta)*self.alpha**3 - 3*self.mean*self.var -
               self.mean**3)/(self.var**(3/2))
     kurtosis: (self.alpha**4*gamma(1 + 4/self.theta) - 4*self.skewness*
               self.var**(3/2)*self.mean - 6*self.mean**2*self.var -
               self.mean**4)/(self.var**2)
     entropy: 0.577215664901532860606512090082 * (1 - 1/self.theta) +
               np.log(self.alpha/self.theta) + 1
     mgf: None
     cf: None
     insupport: 0 <= x < np.inf
     name_doc: Weibull
     pdf_tex: p(x; \alpha, \theta) = \frac{\theta}{\alha}
               \left(\frac{x}{\alpha}\right)^{\theta}
               e^{-(x/\alpha)^{\theta}}
     param_names: ["alpha", "theta"]
     param_descrs: ["Scale parameter", "Shape parameter"]
     string: Weibull(alpha=%.5f, theta=%.5f)

Hypergeometric:
     name: Hypergeometric
     spec: ('s', int32), ("f", int32), ("n", int32)
     pyname: hyper
     loc: None
     scale: None
     shape: None
     mean: self.n*(self.s/(self.s + self.f))
     median: None
     mode: np.floor((self.n + 1)*(self.s + 1)/(self.s + self.f + 2))
     var: self.n*(self.s/(self.s + self.f))*(self.f/(self.s + self.f))*
          (self.s + self.f - self.n)/(self.s + self.f - 1)
     std: np.sqrt(self.var)
     skewness: ((self.f)*(self.s + self.f - 1)**(.5)*
               (self.s + self.f - 2*self.n))/(((self.n*self.s*self.s*
               (self.s + self.f - self.n))**(.5)*(self.s + self.f - 2)))
     kurtosis: 3 + 1/(self.n*self.s*self.f*(self.s + self.f - self.n)*
               (self.s + self.f - 2)*(self.s + self.f - 3))*
               ((self.s + self.f - 1)*(self.s + self.f)**2*((self.s + self.f)*
               (self.s + self.f + 1) - 6*self.s*self.f - 6*self.n*
               (self.s + self.f -self.n)) + 6*self.n*self.s*self.f*
               (self.s + self.f - self.n)*(5*(self.s + self.f) - 6))
     entropy: None
     mgf: None
     cf: None
     insupport: isinstance(x, int)
     name_doc: Hypergeometric
     pdf_tex: p(x; s, f, n) = \frac{\binom{s}{x}
               \binom{f}{n - x}}{\binom{s + f}{n}}
     param_names: ["s", "f", "n"]
     param_descrs: ["Number of successes in population",
                    "Number of failures in population", "Number of trials"]
     string: Hypergeometric(s=%.5f, f=%.5f, n=%.5f)

NegativeBinomial:
     name: NegativeBinomial
     spec: ('r', int32), ("p", float32)
     pyname: nbinom
     loc: None
     scale: None
     shape: None
     mean: (1 - self.p)*self.r/self.p
     median: None
     mode: np.floor((1 - self.p)*(self.r - 1 )/self.p)
     var: (1 - self.p)*self.r/self.p**2
     std: np.sqrt(self.var)
     skewness: (2 - self.p)/(np.sqrt((1 - self.p)*self.r))
     kurtosis: 6/self.r + self.p**2/((1 - self.p)*self.r)
     entropy: None
     mgf: (p/(1 - (1 - p)*np.exp(x)))**r
     cf: (p/(1 - (1 - p)*np.exp(x*1j)))**r
     insupport: isinstance(x, int)
     name_doc: Negative Binomial
     pdf_tex: p(x; r, p) = \binom{x + r - 1}{x} p^r (1 - p)^x
     param_names: ["r", "p"]
     param_descrs: ["Number of failures before experiment stops",
                    "Success probability"]
     string: NegativeBinomial(r=%.5f, p=%.5f)
