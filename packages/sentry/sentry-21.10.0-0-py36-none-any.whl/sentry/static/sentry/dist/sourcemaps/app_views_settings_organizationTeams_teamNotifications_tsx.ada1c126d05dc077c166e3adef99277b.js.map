{"version":3,"file":"chunks/app_views_settings_organizationTeams_teamNotifications_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"qaAQe,MAAMA,UAGXC,EAAAA,EACRC,WACE,MAAO,GAGTC,SACE,MAAMC,EAAQC,KAAKH,WACnB,OACE,QAAC,IAAD,CAAeE,MAAK,UAAKA,EAAQ,GAAH,OAAMA,EAAN,OAAmB,GAA7B,UAApB,SACGC,KAAKC,qBAZON,EAAAA,YAAAA,a,isBCiBrB,MAAMO,EACJ,+FACIC,EAAyB,CAAC,SAEhC,MAAMC,UAAiCT,EAAAA,EACrCE,WACE,MAAO,6BAGTQ,eACE,MAAM,aAACC,EAAD,KAAeC,GAAQP,KAAKQ,MAClC,MAAO,CACL,CACE,cADF,iBAEYF,EAAaG,KAFzB,YAEiCF,EAAKE,KAFtC,KAGE,CAACC,MAAO,CAACC,OAAQ,CAAC,oBAEpB,CACE,eADF,yBAEoBL,EAAaG,KAFjC,kBAGE,CAACC,MAAO,CAACE,cAAe,MAK9BC,aACE,OACE,QAAC,KAAD,YACE,QAAC,KAAD,WAAcC,EAAAA,EAAAA,GAAE,oBAChB,QAAC,IAAD,UAAYd,KAAKe,uBAKvBA,kBACE,MAAM,YAACC,EAAD,aAAcC,GAAgBjB,KAAKkB,MAEnCC,EAA2BF,EAAaG,QAAOC,GACnDlB,EAAuBmB,SAASD,EAAYE,SAASC,OAEvD,IAAKL,EAAyBM,OAC5B,OACE,QAAC,IAAD,WACGX,EAAAA,EAAAA,GAAE,2DAKT,MAAMY,GAAiBV,EAAYU,eAAiB,IAAIN,QAAOO,GAC7DxB,EAAuBmB,SAASK,EAAaJ,YAG/C,IAAKG,EAAcD,OACjB,OACE,QAAC,IAAD,YACE,yBAAMX,EAAAA,EAAAA,GAAE,qCACR,QAACc,EAAD,WACGC,EAAAA,EAAAA,IAAI,6DAA8D,CACjEC,MAAM,+CACNC,MAAM,QAAC,IAAD,CAAcC,KAAM9B,EAApB,UAAgCY,EAAAA,EAAAA,GAAE,uBAOlD,MAAMmB,EAAmBC,OAAOC,YAC9BhB,EAAyBiB,KAAIf,GAAe,CAACA,EAAYgB,GAAIhB,MAG/D,OAAOK,EAAcU,KAAIT,IACvB,QAAC,IAAD,CACEW,UAAQ,EAERC,OACE,0BACE,QAACC,EAAD,YACGC,EAAAA,EAAAA,IAAYd,EAAaJ,UAD5B,IAEGU,EAAiBN,EAAae,eAAeC,SAEhD,QAACf,EAAD,WACGC,EAAAA,EAAAA,IAAI,oDAAqD,CACxDC,MAAM,iDACNC,MAAM,QAAC,IAAD,CAAcC,KAAM9B,EAApB,UAAgCY,EAAAA,EAAAA,GAAE,uBAKhD6B,KAAK,eACLC,MAAOjB,EAAakB,cAhBflB,EAAaU,OAqB1B,SAAeS,EAAAA,EAAAA,GAAiB1C,GAE1BoC,GAAkB,OAAO,MAAP,qBAAH,UACVO,GAAKA,EAAEC,MAAMC,WADH,iBAEJC,EAAAA,EAAAA,GAAM,GAFF,KAIftB,GAAqB,OAAO,MAAP,qBAAH,UACbmB,GAAKA,EAAEC,MAAMG,SADA,eAETJ,GAAKA,EAAEC,MAAMI,uBAFJ,gCAIRF,EAAAA,EAAAA,GAAM,GAJE","sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/organizationTeams/teamNotifications.tsx"],"sourcesContent":["import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Integration, Organization, Team} from 'app/types';\nimport {toTitleCase} from 'app/utils';\nimport withOrganization from 'app/utils/withOrganization';\nimport AsyncView from 'app/views/asyncView';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport TextField from 'app/views/settings/components/forms/textField';\n\ntype Props = RouteComponentProps<{orgId: string; teamId: string}, {}> & {\n  organization: Organization;\n  team: Team;\n};\n\ntype State = AsyncView['state'] & {\n  teamDetails: Team;\n  integrations: Integration[];\n};\n\nconst DOCS_LINK =\n  'https://docs.sentry.io/product/integrations/notification-incidents/slack/#team-notifications';\nconst NOTIFICATION_PROVIDERS = ['slack'];\n\nclass TeamNotificationSettings extends AsyncView<Props, State> {\n  getTitle() {\n    return 'Team Notification Settings';\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, team} = this.props;\n    return [\n      [\n        'teamDetails',\n        `/teams/${organization.slug}/${team.slug}/`,\n        {query: {expand: ['externalTeams']}},\n      ],\n      [\n        'integrations',\n        `/organizations/${organization.slug}/integrations/`,\n        {query: {includeConfig: 0}},\n      ],\n    ];\n  }\n\n  renderBody() {\n    return (\n      <Panel>\n        <PanelHeader>{t('Notifications')}</PanelHeader>\n        <PanelBody>{this.renderPanelBody()}</PanelBody>\n      </Panel>\n    );\n  }\n\n  renderPanelBody() {\n    const {teamDetails, integrations} = this.state;\n\n    const notificationIntegrations = integrations.filter(integration =>\n      NOTIFICATION_PROVIDERS.includes(integration.provider.key)\n    );\n    if (!notificationIntegrations.length) {\n      return (\n        <EmptyMessage>\n          {t('No Notification Integrations have been installed yet.')}\n        </EmptyMessage>\n      );\n    }\n\n    const externalTeams = (teamDetails.externalTeams || []).filter(externalTeam =>\n      NOTIFICATION_PROVIDERS.includes(externalTeam.provider)\n    );\n\n    if (!externalTeams.length) {\n      return (\n        <EmptyMessage>\n          <div>{t('No teams have been linked yet.')}</div>\n          <NotDisabledSubText>\n            {tct('Head over to Slack and type [code] to get started. [link].', {\n              code: <code>/sentry link team</code>,\n              link: <ExternalLink href={DOCS_LINK}>{t('Learn more')}</ExternalLink>,\n            })}\n          </NotDisabledSubText>\n        </EmptyMessage>\n      );\n    }\n\n    const integrationsById = Object.fromEntries(\n      notificationIntegrations.map(integration => [integration.id, integration])\n    );\n\n    return externalTeams.map(externalTeam => (\n      <TextField\n        disabled\n        key={externalTeam.id}\n        label={\n          <div>\n            <NotDisabledText>\n              {toTitleCase(externalTeam.provider)}:\n              {integrationsById[externalTeam.integrationId].name}\n            </NotDisabledText>\n            <NotDisabledSubText>\n              {tct('Unlink this channel in Slack with [code]. [link].', {\n                code: <code>/sentry unlink team</code>,\n                link: <ExternalLink href={DOCS_LINK}>{t('Learn more')}</ExternalLink>,\n              })}\n            </NotDisabledSubText>\n          </div>\n        }\n        name=\"externalName\"\n        value={externalTeam.externalName}\n      />\n    ));\n  }\n}\nexport default withOrganization(TeamNotificationSettings);\n\nconst NotDisabledText = styled('div')`\n  color: ${p => p.theme.textColor};\n  line-height: ${space(2)};\n`;\nconst NotDisabledSubText = styled('div')`\n  color: ${p => p.theme.subText};\n  font-size: ${p => p.theme.fontSizeRelativeSmall};\n  line-height: 1.4;\n  margin-top: ${space(1)};\n`;\n"],"names":["AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","DOCS_LINK","NOTIFICATION_PROVIDERS","TeamNotificationSettings","getEndpoints","organization","team","props","slug","query","expand","includeConfig","renderBody","t","renderPanelBody","teamDetails","integrations","state","notificationIntegrations","filter","integration","includes","provider","key","length","externalTeams","externalTeam","NotDisabledSubText","tct","code","link","href","integrationsById","Object","fromEntries","map","id","disabled","label","NotDisabledText","toTitleCase","integrationId","name","value","externalName","withOrganization","p","theme","textColor","space","subText","fontSizeRelativeSmall"],"sourceRoot":""}