{"version":3,"file":"chunks/app_components_dashboards_widgetQueryFields_tsx-app_utils_performance_vitals_constants_tsx-ap-7fcd46.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/dashboards/widgetQueryFields.tsx","webpack:///./app/utils/performance/vitals/constants.tsx","webpack:///./app/views/dashboardsV2/widget/eventWidget/utils.tsx"],"sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport {IconAdd, IconDelete} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization} from 'app/types';\nimport {\n  aggregateFunctionOutputType,\n  generateFieldAsString,\n  isAggregateEquation,\n  isAggregateField,\n  isLegalYAxisType,\n  QueryFieldValue,\n} from 'app/utils/discover/fields';\nimport {Widget} from 'app/views/dashboardsV2/types';\nimport ColumnEditCollection from 'app/views/eventsV2/table/columnEditCollection';\nimport {QueryField} from 'app/views/eventsV2/table/queryField';\nimport {FieldValueKind} from 'app/views/eventsV2/table/types';\nimport {generateFieldOptions} from 'app/views/eventsV2/utils';\nimport Field from 'app/views/settings/components/forms/field';\n\ntype Props = {\n  /**\n   * The widget type. Used to render different fieldsets.\n   */\n  displayType: Widget['displayType'];\n  fieldOptions: ReturnType<typeof generateFieldOptions>;\n  /**\n   * The field list for the widget.\n   */\n  fields: QueryFieldValue[];\n  /**\n   * Fired when fields are added/removed/modified/reordered.\n   */\n  onChange: (fields: QueryFieldValue[]) => void;\n  /**\n   * Any errors that need to be rendered.\n   */\n  organization: Organization;\n  errors?: Record<string, any>;\n  style?: React.CSSProperties;\n};\n\nfunction WidgetQueryFields({\n  displayType,\n  errors,\n  fields,\n  fieldOptions,\n  organization,\n  onChange,\n  style,\n}: Props) {\n  // Handle new fields being added.\n  function handleAdd(event: React.MouseEvent) {\n    event.preventDefault();\n\n    const newFields = [\n      ...fields,\n      {kind: FieldValueKind.FIELD, field: ''} as QueryFieldValue,\n    ];\n    onChange(newFields);\n  }\n\n  function handleAddEquation(event: React.MouseEvent) {\n    event.preventDefault();\n\n    const newFields = [\n      ...fields,\n      {kind: FieldValueKind.EQUATION, field: ''} as QueryFieldValue,\n    ];\n    onChange(newFields);\n  }\n\n  function handleRemove(event: React.MouseEvent, fieldIndex: number) {\n    event.preventDefault();\n\n    const newFields = [...fields];\n    newFields.splice(fieldIndex, 1);\n    onChange(newFields);\n  }\n\n  function handleChangeField(value: QueryFieldValue, fieldIndex: number) {\n    const newFields = [...fields];\n    newFields[fieldIndex] = value;\n    onChange(newFields);\n  }\n\n  function getAggregateFields(): QueryFieldValue[] {\n    return fields.filter(field => {\n      const fieldStr = generateFieldAsString(field);\n      return isAggregateField(fieldStr) || isAggregateEquation(fieldStr);\n    });\n  }\n\n  function handleTopNChangeField(value: QueryFieldValue, fieldIndex: number) {\n    const aggregateFields = getAggregateFields();\n    const otherFields = fields.filter(field => !!!aggregateFields.includes(field));\n    aggregateFields[fieldIndex] = value;\n    const newFields = [...otherFields, ...aggregateFields];\n    onChange(newFields);\n  }\n\n  function handleTopNColumnChange(columns: QueryFieldValue[]) {\n    const aggregateFields = getAggregateFields();\n    const newFields = [...columns, ...aggregateFields];\n    onChange(newFields);\n  }\n\n  function handleColumnChange(columns: QueryFieldValue[]) {\n    onChange(columns);\n  }\n\n  if (displayType === 'table') {\n    return (\n      <Field\n        data-test-id=\"columns\"\n        label={t('Columns')}\n        inline={false}\n        style={{padding: `${space(1)} 0`, ...(style ?? {})}}\n        error={errors?.fields}\n        flexibleControlStateSize\n        stacked\n        required\n      >\n        <StyledColumnEditCollection\n          columns={fields}\n          onChange={handleColumnChange}\n          fieldOptions={fieldOptions}\n          organization={organization}\n        />\n      </Field>\n    );\n  }\n\n  // Any function/field choice for Big Number widgets is legal since the\n  // data source is from an endpoint that is not timeseries-based.\n  // The function/field choice for World Map widget will need to be numeric-like.\n  // Column builder for Table widget is already handled above.\n  const doNotValidateYAxis = displayType === 'big_number';\n\n  const filterPrimaryOptions = option => {\n    // Only validate function names for timeseries widgets and\n    // world map widgets.\n    if (!doNotValidateYAxis && option.value.kind === FieldValueKind.FUNCTION) {\n      const primaryOutput = aggregateFunctionOutputType(\n        option.value.meta.name,\n        undefined\n      );\n      if (primaryOutput) {\n        // If a function returns a specific type, then validate it.\n        return isLegalYAxisType(primaryOutput);\n      }\n    }\n\n    return option.value.kind === FieldValueKind.FUNCTION;\n  };\n\n  const filterAggregateParameters = fieldValue => option => {\n    // Only validate function parameters for timeseries widgets and\n    // world map widgets.\n    if (doNotValidateYAxis) {\n      return true;\n    }\n\n    if (fieldValue.kind !== 'function') {\n      return true;\n    }\n\n    const functionName = fieldValue.function[0];\n    const primaryOutput = aggregateFunctionOutputType(\n      functionName as string,\n      option.value.meta.name\n    );\n    if (primaryOutput) {\n      return isLegalYAxisType(primaryOutput);\n    }\n\n    if (option.value.kind === FieldValueKind.FUNCTION) {\n      // Functions are not legal options as an aggregate/function parameter.\n      return false;\n    }\n\n    return isLegalYAxisType(option.value.meta.dataType);\n  };\n\n  if (displayType === 'top_n') {\n    const aggregateFields = getAggregateFields();\n    const otherFields = fields.filter(field => !!!aggregateFields.includes(field));\n    const fieldValue = aggregateFields[0];\n\n    return (\n      <React.Fragment>\n        <Field\n          data-test-id=\"columns\"\n          label={t('Columns')}\n          inline={false}\n          style={{padding: `${space(1)} 0`, ...(style ?? {})}}\n          error={errors?.fields}\n          flexibleControlStateSize\n          stacked\n          required\n        >\n          <StyledColumnEditCollection\n            columns={otherFields}\n            onChange={handleTopNColumnChange}\n            fieldOptions={fieldOptions}\n            organization={organization}\n          />\n        </Field>\n        <Field\n          data-test-id=\"y-axis\"\n          label={t('Y-Axis')}\n          inline={false}\n          style={{padding: `${space(2)} 0 24px 0`, ...(style ?? {})}}\n          flexibleControlStateSize\n          error={errors?.fields}\n          required\n          stacked\n        >\n          <QueryFieldWrapper key={`${aggregateFields[0]}:0`}>\n            <QueryField\n              fieldValue={fieldValue}\n              fieldOptions={generateFieldOptions({organization})}\n              onChange={value => handleTopNChangeField(value, 0)}\n              filterPrimaryOptions={filterPrimaryOptions}\n              filterAggregateParameters={filterAggregateParameters(fieldValue)}\n            />\n          </QueryFieldWrapper>\n        </Field>\n      </React.Fragment>\n    );\n  }\n\n  const hideAddYAxisButton =\n    (['world_map', 'big_number'].includes(displayType) && fields.length === 1) ||\n    (['line', 'area', 'stacked_area', 'bar'].includes(displayType) &&\n      fields.length === 3);\n\n  const canDelete = fields.filter(field => field.kind !== 'equation').length > 1;\n\n  return (\n    <Field\n      data-test-id=\"y-axis\"\n      label={t('Y-Axis')}\n      inline={false}\n      style={{padding: `${space(2)} 0 24px 0`, ...(style ?? {})}}\n      flexibleControlStateSize\n      error={errors?.fields}\n      required\n      stacked\n    >\n      {fields.map((field, i) => {\n        return (\n          <QueryFieldWrapper key={`${field}:${i}`}>\n            <QueryField\n              fieldValue={field}\n              fieldOptions={fieldOptions}\n              onChange={value => handleChangeField(value, i)}\n              filterPrimaryOptions={filterPrimaryOptions}\n              filterAggregateParameters={filterAggregateParameters(field)}\n              otherColumns={fields}\n            />\n            {(canDelete || field.kind === 'equation') && (\n              <Button\n                size=\"zero\"\n                borderless\n                onClick={event => handleRemove(event, i)}\n                icon={<IconDelete />}\n                title={t('Remove this Y-Axis')}\n                label={t('Remove this Y-Axis')}\n              />\n            )}\n          </QueryFieldWrapper>\n        );\n      })}\n      {!hideAddYAxisButton && (\n        <Actions>\n          <Button size=\"small\" icon={<IconAdd isCircled />} onClick={handleAdd}>\n            {t('Add Overlay')}\n          </Button>\n          <Button\n            size=\"small\"\n            label={t('Add an Equation')}\n            onClick={handleAddEquation}\n            icon={<IconAdd isCircled />}\n          >\n            {t('Add an Equation')}\n          </Button>\n        </Actions>\n      )}\n    </Field>\n  );\n}\n\nconst StyledColumnEditCollection = styled(ColumnEditCollection)`\n  margin-top: ${space(1)};\n`;\n\nexport const QueryFieldWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: ${space(1)};\n\n  > * + * {\n    margin-left: ${space(1)};\n  }\n`;\n\nconst Actions = styled('div')`\n  grid-column: 2 / 3;\n\n  & button {\n    margin-right: ${space(1)};\n  }\n`;\n\nexport default WidgetQueryFields;\n","import {t} from 'app/locale';\nimport {measurementType, MobileVital, WebVital} from 'app/utils/discover/fields';\nimport {Vital} from 'app/utils/performance/vitals/types';\n\nexport const WEB_VITAL_DETAILS: Record<WebVital, Vital> = {\n  [WebVital.FP]: {\n    slug: 'fp',\n    name: t('First Paint'),\n    acronym: 'FP',\n    description: t(\n      'Render time of the first pixel loaded in the viewport (may overlap with FCP).'\n    ),\n    poorThreshold: 3000,\n    type: measurementType(WebVital.FP),\n  },\n  [WebVital.FCP]: {\n    slug: 'fcp',\n    name: t('First Contentful Paint'),\n    acronym: 'FCP',\n    description: t(\n      'Render time of the first image, text or other DOM node in the viewport.'\n    ),\n    poorThreshold: 3000,\n    type: measurementType(WebVital.FCP),\n  },\n  [WebVital.LCP]: {\n    slug: 'lcp',\n    name: t('Largest Contentful Paint'),\n    acronym: 'LCP',\n    description: t(\n      'Render time of the largest image, text or other DOM node in the viewport.'\n    ),\n    poorThreshold: 4000,\n    type: measurementType(WebVital.LCP),\n  },\n  [WebVital.FID]: {\n    slug: 'fid',\n    name: t('First Input Delay'),\n    acronym: 'FID',\n    description: t(\n      'Response time of the browser to a user interaction (clicking, tapping, etc).'\n    ),\n    poorThreshold: 300,\n    type: measurementType(WebVital.FID),\n  },\n  [WebVital.CLS]: {\n    slug: 'cls',\n    name: t('Cumulative Layout Shift'),\n    acronym: 'CLS',\n    description: t(\n      'Sum of layout shift scores that measure the visual stability of the page.'\n    ),\n    poorThreshold: 0.25,\n    type: measurementType(WebVital.CLS),\n  },\n  [WebVital.TTFB]: {\n    slug: 'ttfb',\n    name: t('Time to First Byte'),\n    acronym: 'TTFB',\n    description: t(\n      \"The time that it takes for a user's browser to receive the first byte of page content.\"\n    ),\n    poorThreshold: 600,\n    type: measurementType(WebVital.TTFB),\n  },\n  [WebVital.RequestTime]: {\n    slug: 'ttfb.requesttime',\n    name: t('Request Time'),\n    acronym: 'RT',\n    description: t(\n      'Captures the time spent making the request and receiving the first byte of the response.'\n    ),\n    poorThreshold: 600,\n    type: measurementType(WebVital.RequestTime),\n  },\n};\n\nexport const MOBILE_VITAL_DETAILS: Record<MobileVital, Vital> = {\n  [MobileVital.AppStartCold]: {\n    slug: 'app_start_cold',\n    name: t('App Start Cold'),\n    description: t(\n      'Cold start is a measure of the application start up time from scratch.'\n    ),\n    type: measurementType(MobileVital.AppStartCold),\n  },\n  [MobileVital.AppStartWarm]: {\n    slug: 'app_start_warm',\n    name: t('App Start Warm'),\n    description: t(\n      'Warm start is a measure of the application start up time while still in memory.'\n    ),\n    type: measurementType(MobileVital.AppStartWarm),\n  },\n  [MobileVital.FramesTotal]: {\n    slug: 'frames_total',\n    name: t('Total Frames'),\n    description: t(\n      'Total frames is a count of the number of frames recorded within a transaction.'\n    ),\n    type: measurementType(MobileVital.FramesTotal),\n  },\n  [MobileVital.FramesSlow]: {\n    slug: 'frames_slow',\n    name: t('Slow Frames'),\n    description: t(\n      'Slow frames is a count of the number of slow frames recorded within a transaction.'\n    ),\n    type: measurementType(MobileVital.FramesSlow),\n  },\n  [MobileVital.FramesFrozen]: {\n    slug: 'frames_frozen',\n    name: t('Frozen Frames'),\n    description: t(\n      'Frozen frames is a count of the number of frozen frames recorded within a transaction.'\n    ),\n    type: measurementType(MobileVital.FramesFrozen),\n  },\n  [MobileVital.FramesSlowRate]: {\n    slug: 'frames_slow_rate',\n    name: t('Slow Frames Rate'),\n    description: t(\n      'Slow Frames Rate is the percentage of frames recorded within a transaction that is considered slow.'\n    ),\n    type: measurementType(MobileVital.FramesSlowRate),\n  },\n  [MobileVital.FramesFrozenRate]: {\n    slug: 'frames_frozen_rate',\n    name: t('Frozen Frames Rate'),\n    description: t(\n      'Frozen Frames Rate is the percentage of frames recorded within a transaction that is considered frozen.'\n    ),\n    type: measurementType(MobileVital.FramesFrozenRate),\n  },\n  [MobileVital.StallCount]: {\n    slug: 'stall_count',\n    name: t('Stalls'),\n    description: t(\n      'Stalls is the number of times the application stalled within a transaction.'\n    ),\n    type: measurementType(MobileVital.StallCount),\n  },\n  [MobileVital.StallTotalTime]: {\n    slug: 'stall_total_time',\n    name: t('Total Stall Time'),\n    description: t(\n      'Stall Total Time is the total amount of time the application is stalled within a transaction.'\n    ),\n    type: measurementType(MobileVital.StallTotalTime),\n  },\n  [MobileVital.StallLongestTime]: {\n    slug: 'stall_longest_time',\n    name: t('Longest Stall Time'),\n    description: t(\n      'Stall Longest Time is the longest amount of time the application is stalled within a transaction.'\n    ),\n    type: measurementType(MobileVital.StallLongestTime),\n  },\n  [MobileVital.StallPercentage]: {\n    slug: 'stall_percentage',\n    name: t('Stall Percentage'),\n    description: t(\n      'Stall Percentage is the percentage of the transaction duration the application was stalled.'\n    ),\n    type: measurementType(MobileVital.StallPercentage),\n  },\n};\n","import isEqual from 'lodash/isEqual';\n\nimport {\n  aggregateOutputType,\n  getAggregateFields,\n  isAggregateFieldOrEquation,\n  isLegalYAxisType,\n} from 'app/utils/discover/fields';\nimport {Widget} from 'app/views/dashboardsV2/types';\n\nimport {DisplayType} from '../utils';\n\ntype ValidationError = {\n  [key: string]: string[] | ValidationError[] | ValidationError;\n};\n\ntype FlatValidationError = {\n  [key: string]: string | FlatValidationError[] | FlatValidationError;\n};\n\nexport function mapErrors(\n  data: ValidationError,\n  update: FlatValidationError\n): FlatValidationError {\n  Object.keys(data).forEach((key: string) => {\n    const value = data[key];\n    // Recurse into nested objects.\n    if (Array.isArray(value) && typeof value[0] === 'string') {\n      update[key] = value[0];\n      return;\n    } else if (Array.isArray(value) && typeof value[0] === 'object') {\n      update[key] = (value as ValidationError[]).map(item => mapErrors(item, {}));\n    } else {\n      update[key] = mapErrors(value as ValidationError, {});\n    }\n  });\n\n  return update;\n}\n\nexport function normalizeQueries(\n  displayType: DisplayType,\n  queries: Widget['queries']\n): Widget['queries'] {\n  const isTimeseriesChart = [\n    DisplayType.LINE,\n    DisplayType.AREA,\n    DisplayType.STACKED_AREA,\n    DisplayType.BAR,\n  ].includes(displayType);\n\n  if (\n    [DisplayType.TABLE, DisplayType.WORLD_MAP, DisplayType.BIG_NUMBER].includes(\n      displayType\n    )\n  ) {\n    // Some display types may only support at most 1 query.\n    queries = queries.slice(0, 1);\n  } else if (isTimeseriesChart) {\n    // Timeseries charts supports at most 3 queries.\n    queries = queries.slice(0, 3);\n  }\n\n  if (displayType === DisplayType.TABLE) {\n    return queries;\n  }\n\n  if (displayType === DisplayType.TOP_N) {\n    queries = queries.slice(0, 1);\n    const aggregateFields = getAggregateFields(queries[0].fields);\n\n    let otherFields = queries[0].fields.filter(\n      field => !!!aggregateFields.includes(field)\n    );\n\n    otherFields = otherFields.length ? otherFields : ['title'];\n\n    const fields: string[] = [\n      ...otherFields,\n      aggregateFields.length ? aggregateFields[0] : 'count()',\n    ];\n\n    queries = queries.map(query => ({...query, fields}));\n\n    return queries;\n  }\n\n  // Filter out non-aggregate fields\n  queries = queries.map(query => {\n    let fields = query.fields.filter(isAggregateFieldOrEquation);\n\n    if (isTimeseriesChart || displayType === DisplayType.WORLD_MAP) {\n      // Filter out fields that will not generate numeric output types\n      fields = fields.filter(field => isLegalYAxisType(aggregateOutputType(field)));\n    }\n\n    if (isTimeseriesChart && fields.length && fields.length > 3) {\n      // Timeseries charts supports at most 3 fields.\n      fields = fields.slice(0, 3);\n    }\n\n    return {\n      ...query,\n      fields: fields.length ? fields : ['count()'],\n    };\n  });\n\n  if (isTimeseriesChart) {\n    // For timeseries widget, all queries must share identical set of fields.\n\n    const referenceFields = [...queries[0].fields];\n\n    queryLoop: for (const query of queries) {\n      if (referenceFields.length >= 3) {\n        break;\n      }\n\n      if (isEqual(referenceFields, query.fields)) {\n        continue;\n      }\n\n      for (const field of query.fields) {\n        if (referenceFields.length >= 3) {\n          break queryLoop;\n        }\n\n        if (!referenceFields.includes(field)) {\n          referenceFields.push(field);\n        }\n      }\n    }\n\n    queries = queries.map(query => {\n      return {\n        ...query,\n        fields: referenceFields,\n      };\n    });\n  }\n\n  if ([DisplayType.WORLD_MAP, DisplayType.BIG_NUMBER].includes(displayType)) {\n    // For world map chart, cap fields of the queries to only one field.\n    queries = queries.map(query => {\n      return {\n        ...query,\n        fields: query.fields.slice(0, 1),\n      };\n    });\n  }\n\n  return queries;\n}\n"],"names":["WidgetQueryFields","displayType","errors","fields","fieldOptions","organization","onChange","style","getAggregateFields","filter","field","fieldStr","generateFieldAsString","isAggregateField","isAggregateEquation","label","t","inline","padding","space","error","flexibleControlStateSize","stacked","required","StyledColumnEditCollection","columns","doNotValidateYAxis","filterPrimaryOptions","option","value","kind","FieldValueKind","primaryOutput","aggregateFunctionOutputType","meta","name","undefined","isLegalYAxisType","filterAggregateParameters","fieldValue","functionName","function","dataType","aggregateFields","otherFields","includes","newFields","QueryFieldWrapper","generateFieldOptions","fieldIndex","handleTopNChangeField","hideAddYAxisButton","length","canDelete","map","i","handleChangeField","otherColumns","size","borderless","onClick","event","preventDefault","splice","handleRemove","icon","title","Actions","isCircled","ColumnEditCollection","WEB_VITAL_DETAILS","WebVital","slug","acronym","description","poorThreshold","type","measurementType","MOBILE_VITAL_DETAILS","MobileVital","mapErrors","data","update","Object","keys","forEach","key","Array","isArray","item","normalizeQueries","queries","isTimeseriesChart","DisplayType","slice","query","isAggregateFieldOrEquation","aggregateOutputType","referenceFields","queryLoop","isEqual","push"],"sourceRoot":""}