{"version":3,"file":"chunks/app_actionCreators_events_tsx-app_components_charts_areaChart_tsx-app_components_charts_chart-5f23d5.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/events.tsx","webpack:///./app/components/charts/areaChart.tsx","webpack:///./app/components/charts/series/areaSeries.tsx","webpack:///./app/components/charts/chartZoom.tsx","webpack:///./app/components/charts/transparentLoadingMask.tsx","webpack:///./app/utils/discover/charts.tsx","webpack:///./app/utils/getPeriod.tsx","webpack:///./app/views/dashboardsV2/contextMenu.tsx"],"sourcesContent":["import {LocationDescriptor} from 'history';\nimport pick from 'lodash/pick';\n\nimport {Client} from 'app/api';\nimport {canIncludePreviousPeriod} from 'app/components/charts/utils';\nimport {\n  DateString,\n  EventsStats,\n  MultiSeriesEventsStats,\n  OrganizationSummary,\n} from 'app/types';\nimport {LocationQuery} from 'app/utils/discover/eventView';\nimport {getPeriod} from 'app/utils/getPeriod';\nimport {PERFORMANCE_URL_PARAM} from 'app/utils/performance/constants';\n\ntype Options = {\n  organization: OrganizationSummary;\n  project?: Readonly<number[]>;\n  environment?: Readonly<string[]>;\n  team?: Readonly<string | string[]>;\n  period?: string;\n  start?: DateString;\n  end?: DateString;\n  interval?: string;\n  comparisonDelta?: number;\n  includePrevious?: boolean;\n  limit?: number;\n  query?: string;\n  yAxis?: string | string[];\n  field?: string[];\n  topEvents?: number;\n  orderby?: string;\n  partial: boolean;\n  withoutZerofill?: boolean;\n  referrer?: string;\n};\n\n/**\n * Make requests to `events-stats` endpoint\n *\n * @param {Object} api API client instance\n * @param {Object} options Request parameters\n * @param {Object} options.organization Organization object\n * @param {Number[]} options.project List of project ids\n * @param {String[]} options.environment List of environments to query for\n * @param {String[]} options.team List of teams to query for\n * @param {String} options.period Time period to query for, in the format: <integer><units> where units are \"d\" or \"h\"\n * @param {String} options.interval Time interval to group results in, in the format: <integer><units> where units are \"d\", \"h\", \"m\", \"s\"\n * @param {Number} options.comparisonDelta Comparison delta for change alert event stats to include comparison stats\n * @param {Boolean} options.includePrevious Should request also return reqsults for previous period?\n * @param {Number} options.limit The number of rows to return\n * @param {String} options.query Search query\n */\nexport const doEventsRequest = (\n  api: Client,\n  {\n    organization,\n    project,\n    environment,\n    team,\n    period,\n    start,\n    end,\n    interval,\n    comparisonDelta,\n    includePrevious,\n    query,\n    yAxis,\n    field,\n    topEvents,\n    orderby,\n    partial,\n    withoutZerofill,\n    referrer,\n  }: Options\n): Promise<EventsStats | MultiSeriesEventsStats> => {\n  const shouldDoublePeriod = canIncludePreviousPeriod(includePrevious, period);\n  const urlQuery = Object.fromEntries(\n    Object.entries({\n      interval,\n      comparisonDelta,\n      project,\n      environment,\n      team,\n      query,\n      yAxis,\n      field,\n      topEvents,\n      orderby,\n      partial: partial ? '1' : undefined,\n      withoutZerofill: withoutZerofill ? '1' : undefined,\n      referrer: referrer ? referrer : 'api.organization-event-stats',\n    }).filter(([, value]) => typeof value !== 'undefined')\n  );\n\n  // Doubling period for absolute dates is not accurate unless starting and\n  // ending times are the same (at least for daily intervals). This is\n  // the tradeoff for now.\n  const periodObj = getPeriod({period, start, end}, {shouldDoublePeriod});\n\n  return api.requestPromise(`/organizations/${organization.slug}/events-stats/`, {\n    query: {\n      ...urlQuery,\n      ...periodObj,\n    },\n  });\n};\n\nexport type EventQuery = {\n  field: string[];\n  equation?: string[];\n  team?: string | string[];\n  project?: string | string[];\n  sort?: string | string[];\n  query: string;\n  per_page?: number;\n  referrer?: string;\n  environment?: string[];\n  noPagination?: boolean;\n};\n\nexport type TagSegment = {\n  count: number;\n  name: string;\n  value: string;\n  url: LocationDescriptor;\n  isOther?: boolean;\n  key?: string;\n};\n\nexport type Tag = {\n  key: string;\n  topValues: Array<TagSegment>;\n};\n\n/**\n * Fetches tag facets for a query\n */\nexport async function fetchTagFacets(\n  api: Client,\n  orgSlug: string,\n  query: EventQuery\n): Promise<Tag[]> {\n  const urlParams = pick(query, Object.values(PERFORMANCE_URL_PARAM));\n\n  const queryOption = {...urlParams, query: query.query};\n\n  return api.requestPromise(`/organizations/${orgSlug}/events-facets/`, {\n    query: queryOption,\n  });\n}\n\n/**\n * Fetches total count of events for a given query\n */\nexport async function fetchTotalCount(\n  api: Client,\n  orgSlug: String,\n  query: EventQuery & LocationQuery\n): Promise<number> {\n  const urlParams = pick(query, Object.values(PERFORMANCE_URL_PARAM));\n\n  const queryOption = {...urlParams, query: query.query};\n\n  type Response = {\n    count: number;\n  };\n\n  return api\n    .requestPromise(`/organizations/${orgSlug}/events-meta/`, {\n      query: queryOption,\n    })\n    .then((res: Response) => res.count);\n}\n","import * as React from 'react';\nimport {EChartOption} from 'echarts';\n\nimport {Series} from 'app/types/echarts';\n\nimport AreaSeries from './series/areaSeries';\nimport BaseChart from './baseChart';\n\ntype ChartProps = React.ComponentProps<typeof BaseChart>;\n\nexport type AreaChartSeries = Series & Omit<EChartOption.SeriesLine, 'data' | 'name'>;\n\ntype Props = Omit<ChartProps, 'series'> & {\n  stacked?: boolean;\n  series: AreaChartSeries[];\n};\n\nclass AreaChart extends React.Component<Props> {\n  render() {\n    const {series, stacked, colors, ...props} = this.props;\n\n    return (\n      <BaseChart\n        {...props}\n        colors={colors}\n        series={series.map(({seriesName, data, ...otherSeriesProps}, i) =>\n          AreaSeries({\n            stack: stacked ? 'area' : undefined,\n            name: seriesName,\n            data: data.map(({name, value}) => [name, value]),\n            lineStyle: {\n              color: colors?.[i],\n              opacity: 1,\n              width: 0.4,\n            },\n            areaStyle: {\n              color: colors?.[i],\n              opacity: 1.0,\n            },\n            animation: false,\n            animationThreshold: 1,\n            animationDuration: 0,\n            ...otherSeriesProps,\n          })\n        )}\n      />\n    );\n  }\n}\n\nexport default AreaChart;\n","import {EChartOption} from 'echarts';\n\nimport LineSeries from 'app/components/charts/series/lineSeries';\n\nexport default function AreaSeries(\n  props: EChartOption.SeriesLine = {}\n): EChartOption.SeriesLine {\n  return LineSeries({\n    ...props,\n  });\n}\n","import * as React from 'react';\nimport {InjectedRouter} from 'react-router';\nimport {EChartOption} from 'echarts/lib/echarts';\nimport moment from 'moment';\nimport * as qs from 'query-string';\n\nimport {updateDateTime} from 'app/actionCreators/globalSelection';\nimport DataZoomInside from 'app/components/charts/components/dataZoomInside';\nimport ToolBox from 'app/components/charts/components/toolBox';\nimport {DateString} from 'app/types';\nimport {\n  EChartChartReadyHandler,\n  EChartDataZoomHandler,\n  EChartFinishedHandler,\n  EChartRestoreHandler,\n} from 'app/types/echarts';\nimport {callIfFunction} from 'app/utils/callIfFunction';\nimport {getUtcDateString, getUtcToLocalDateObject} from 'app/utils/dates';\n\nconst getDate = date =>\n  date ? moment.utc(date).format(moment.HTML5_FMT.DATETIME_LOCAL_SECONDS) : null;\n\ntype Period = {\n  period: string;\n  start: DateString;\n  end: DateString;\n};\n\nconst ZoomPropKeys = [\n  'period',\n  'xAxis',\n  'onChartReady',\n  'onDataZoom',\n  'onRestore',\n  'onFinished',\n] as const;\n\nexport type ZoomRenderProps = Pick<Props, typeof ZoomPropKeys[number]> & {\n  utc?: boolean;\n  start?: Date;\n  end?: Date;\n  isGroupedByDate?: boolean;\n  showTimeInTooltip?: boolean;\n  dataZoom?: EChartOption.DataZoom[];\n  toolBox?: EChartOption['toolbox'];\n};\n\ntype Props = {\n  router?: InjectedRouter;\n  children: (props: ZoomRenderProps) => React.ReactNode;\n  disabled?: boolean;\n  xAxis?: EChartOption.XAxis;\n  xAxisIndex?: number | number[];\n  start?: DateString;\n  end?: DateString;\n  period?: string;\n  utc?: boolean | null;\n  onChartReady?: EChartChartReadyHandler;\n  onDataZoom?: EChartDataZoomHandler;\n  onFinished?: EChartFinishedHandler;\n  onRestore?: EChartRestoreHandler;\n  onZoom?: (period: Period) => void;\n  usePageDate?: boolean;\n};\n\n/**\n * This is a very opinionated component that takes a render prop through `children`. It\n * will provide props to be passed to `BaseChart` to enable support of zooming without\n * eCharts' clunky zoom toolboxes.\n *\n * This also is very tightly coupled with the Global Selection Header. We can make it more\n * generic if need be in the future.\n */\nclass ChartZoom extends React.Component<Props> {\n  constructor(props) {\n    super(props);\n\n    // Zoom history\n    this.history = [];\n\n    // Initialize current period instance state for zoom history\n    this.saveCurrentPeriod(props);\n  }\n\n  componentDidUpdate() {\n    if (this.props.disabled) {\n      return;\n    }\n\n    // When component updates, make sure we sync current period state\n    // for use in zoom history\n    this.saveCurrentPeriod(this.props);\n  }\n\n  history: Period[];\n  currentPeriod?: Period;\n  zooming: (() => void) | null = null;\n\n  /**\n   * Save current period state from period in props to be used\n   * in handling chart's zoom history state\n   */\n  saveCurrentPeriod = props => {\n    this.currentPeriod = {\n      period: props.period,\n      start: getDate(props.start),\n      end: getDate(props.end),\n    };\n  };\n\n  /**\n   * Sets the new period due to a zoom related action\n   *\n   * Saves the current period to an instance property so that we\n   * can control URL state when zoom history is being manipulated\n   * by the chart controls.\n   *\n   * Saves a callback function to be called after chart animation is completed\n   */\n  setPeriod = ({period, start, end}, saveHistory = false) => {\n    const {router, onZoom, usePageDate} = this.props;\n    const startFormatted = getDate(start);\n    const endFormatted = getDate(end);\n\n    // Save period so that we can revert back to it when using echarts \"back\" navigation\n    if (saveHistory) {\n      this.history.push(this.currentPeriod!);\n    }\n\n    // Callback to let parent component know zoom has changed\n    // This is required for some more perceived responsiveness since\n    // we delay updating URL state so that chart animation can finish\n    //\n    // Parent container can use this to change into a loading state before\n    // URL parameters are changed\n    callIfFunction(onZoom, {\n      period,\n      start: startFormatted,\n      end: endFormatted,\n    });\n\n    this.zooming = () => {\n      if (usePageDate && router) {\n        const newQuery = {\n          ...router.location.query,\n          pageStart: start ? getUtcDateString(start) : undefined,\n          pageEnd: end ? getUtcDateString(end) : undefined,\n          pageStatsPeriod: period ?? undefined,\n        };\n\n        // Only push new location if query params has changed because this will cause a heavy re-render\n        if (qs.stringify(newQuery) !== qs.stringify(router.location.query)) {\n          router.push({\n            pathname: router.location.pathname,\n            query: newQuery,\n          });\n        }\n      } else {\n        updateDateTime(\n          {\n            period,\n            start: startFormatted\n              ? getUtcToLocalDateObject(startFormatted)\n              : startFormatted,\n            end: endFormatted ? getUtcToLocalDateObject(endFormatted) : endFormatted,\n          },\n          router\n        );\n      }\n\n      this.saveCurrentPeriod({period, start, end});\n    };\n  };\n\n  /**\n   * Enable zoom immediately instead of having to toggle to zoom\n   */\n  handleChartReady = chart => {\n    chart.dispatchAction({\n      type: 'takeGlobalCursor',\n      key: 'dataZoomSelect',\n      dataZoomSelectActive: true,\n    });\n\n    callIfFunction(this.props.onChartReady, chart);\n  };\n\n  /**\n   * Restores the chart to initial viewport/zoom level\n   *\n   * Updates URL state to reflect initial params\n   */\n  handleZoomRestore = (evt, chart) => {\n    if (!this.history.length) {\n      return;\n    }\n\n    this.setPeriod(this.history[0]);\n\n    // reset history\n    this.history = [];\n\n    callIfFunction(this.props.onRestore, evt, chart);\n  };\n\n  handleDataZoom = (evt, chart) => {\n    const model = chart.getModel();\n    const {xAxis} = model.option;\n    const axis = xAxis[0];\n\n    // if `rangeStart` and `rangeEnd` are null, then we are going back\n    if (axis.rangeStart === null && axis.rangeEnd === null) {\n      const previousPeriod = this.history.pop();\n\n      if (!previousPeriod) {\n        return;\n      }\n\n      this.setPeriod(previousPeriod);\n    } else {\n      const start = moment.utc(axis.rangeStart);\n\n      // Add a day so we go until the end of the day (e.g. next day at midnight)\n      const end = moment.utc(axis.rangeEnd);\n\n      this.setPeriod({period: null, start, end}, true);\n    }\n\n    callIfFunction(this.props.onDataZoom, evt, chart);\n  };\n\n  /**\n   * Chart event when *any* rendering+animation finishes\n   *\n   * `this.zooming` acts as a callback function so that\n   * we can let the native zoom animation on the chart complete\n   * before we update URL state and re-render\n   */\n  handleChartFinished = () => {\n    if (typeof this.zooming === 'function') {\n      this.zooming();\n      this.zooming = null;\n    }\n    callIfFunction(this.props.onFinished);\n  };\n\n  render() {\n    const {\n      utc: _utc,\n      start: _start,\n      end: _end,\n      disabled,\n      children,\n      xAxisIndex,\n\n      router: _router,\n      onZoom: _onZoom,\n      onRestore: _onRestore,\n      onChartReady: _onChartReady,\n      onDataZoom: _onDataZoom,\n      onFinished: _onFinished,\n      ...props\n    } = this.props;\n\n    const utc = _utc ?? undefined;\n    const start = _start ? getUtcToLocalDateObject(_start) : undefined;\n    const end = _end ? getUtcToLocalDateObject(_end) : undefined;\n\n    if (disabled) {\n      return children({\n        utc,\n        start,\n        end,\n        ...props,\n      });\n    }\n\n    const renderProps = {\n      // Zooming only works when grouped by date\n      isGroupedByDate: true,\n      onChartReady: this.handleChartReady,\n      utc,\n      start,\n      end,\n      dataZoom: DataZoomInside({xAxisIndex}),\n      showTimeInTooltip: true,\n      toolBox: ToolBox(\n        {},\n        {\n          dataZoom: {\n            title: {\n              zoom: '',\n              back: '',\n            },\n            iconStyle: {\n              borderWidth: 0,\n              color: 'transparent',\n              opacity: 0,\n            },\n          },\n        }\n      ),\n      onDataZoom: this.handleDataZoom,\n      onFinished: this.handleChartFinished,\n      onRestore: this.handleZoomRestore,\n      ...props,\n    };\n\n    return children(renderProps);\n  }\n}\n\nexport default ChartZoom;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport LoadingMask from 'app/components/loadingMask';\n\ntype Props = {\n  visible: boolean;\n  className?: string;\n  children?: React.ReactNode;\n} & React.ComponentProps<typeof LoadingMask>;\n\nconst TransparentLoadingMask = styled(\n  ({className, visible, children, ...props}: Props) => {\n    const other = visible ? {...props, 'data-test-id': 'loading-placeholder'} : props;\n    return (\n      <LoadingMask className={className} {...other}>\n        {children}\n      </LoadingMask>\n    );\n  }\n)<Props>`\n  ${p => !p.visible && 'display: none;'};\n  opacity: 0.4;\n  z-index: 1;\n`;\n\nexport default TransparentLoadingMask;\n","import {t} from 'app/locale';\nimport {aggregateOutputType} from 'app/utils/discover/fields';\nimport {\n  DAY,\n  formatAbbreviatedNumber,\n  formatPercentage,\n  getDuration,\n  HOUR,\n  MINUTE,\n  SECOND,\n  WEEK,\n} from 'app/utils/formatters';\n\n/**\n * Formatter for chart tooltips that handle a variety of discover result values\n */\nexport function tooltipFormatter(value: number, seriesName: string = ''): string {\n  switch (aggregateOutputType(seriesName)) {\n    case 'integer':\n    case 'number':\n      return value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 2);\n    case 'duration':\n      return getDuration(value / 1000, 2, true);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Formatter for chart axis labels that handle a variety of discover result values\n * This function is *very similar* to tooltipFormatter but outputs data with less precision.\n */\nexport function axisLabelFormatter(\n  value: number,\n  seriesName: string,\n  abbreviation: boolean = false\n): string {\n  switch (aggregateOutputType(seriesName)) {\n    case 'integer':\n    case 'number':\n      return abbreviation ? formatAbbreviatedNumber(value) : value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 0);\n    case 'duration':\n      return axisDuration(value);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Specialized duration formatting for axis labels.\n * In that context we are ok sacrificing accuracy for more\n * consistent sizing.\n *\n * @param value Number of milliseconds to format.\n */\nexport function axisDuration(value: number): string {\n  if (value === 0) {\n    return '0';\n  }\n  if (value >= WEEK) {\n    const label = (value / WEEK).toFixed(0);\n    return t('%swk', label);\n  }\n  if (value >= DAY) {\n    const label = (value / DAY).toFixed(0);\n    return t('%sd', label);\n  }\n  if (value >= HOUR) {\n    const label = (value / HOUR).toFixed(0);\n    return t('%shr', label);\n  }\n  if (value >= MINUTE) {\n    const label = (value / MINUTE).toFixed(0);\n    return t('%smin', label);\n  }\n  if (value >= SECOND) {\n    const label = (value / SECOND).toFixed(0);\n    return t('%ss', label);\n  }\n  const label = value.toFixed(0);\n  return t('%sms', label);\n}\n","import moment from 'moment';\n\nimport {DEFAULT_STATS_PERIOD} from 'app/constants';\nimport {getUtcDateString} from 'app/utils/dates';\n\ntype DateObject = {\n  /**\n   * Relative period string in format \"<int><unit>\" (e.g. 4d for 4 days)\n   */\n  period?: string;\n  /**\n   * Starting date object\n   */\n  start?: string | Date | null;\n  /**\n   * Ending date object\n   */\n  end?: string | Date | null;\n};\n\ntype Options = {\n  /**\n   * Doubles the given period (useful for getting previous period data)\n   */\n  shouldDoublePeriod?: boolean;\n};\n\n/**\n * Gets the period to query with if we need to double the initial period in order\n * to get data for the previous period\n *\n * Returns an object with either a period or start/end dates ({statsPeriod: string} or {start: string, end: string})\n */\nexport const getPeriod = (\n  {period, start, end}: DateObject,\n  {shouldDoublePeriod}: Options = {}\n) => {\n  if (!period && !start && !end) {\n    period = DEFAULT_STATS_PERIOD;\n  }\n\n  // you can not specify both relative and absolute periods\n  // relative period takes precedence\n  if (period) {\n    if (!shouldDoublePeriod) {\n      return {statsPeriod: period};\n    }\n    const [, periodNumber, periodLength] = period.match(/([0-9]+)([mhdw])/)!;\n\n    return {statsPeriod: `${parseInt(periodNumber, 10) * 2}${periodLength}`};\n  }\n\n  if (!start || !end) {\n    throw new Error('start and end required');\n  }\n\n  const formattedStart = getUtcDateString(start);\n  const formattedEnd = getUtcDateString(end);\n\n  if (shouldDoublePeriod) {\n    // get duration of end - start and double\n    const diff = moment(end).diff(moment(start));\n\n    const previousPeriodStart = moment(start).subtract(diff);\n\n    // This is not as accurate as having 2 start/end objs\n    return {\n      start: getUtcDateString(previousPeriodStart),\n      end: formattedEnd,\n    };\n  }\n\n  return {\n    start: formattedStart,\n    end: formattedEnd,\n  };\n};\n","import {MouseEvent} from 'react';\nimport styled from '@emotion/styled';\nimport classNames from 'classnames';\n\nimport DropdownMenu from 'app/components/dropdownMenu';\nimport {IconEllipsis} from 'app/icons';\n\nconst ContextMenu = ({children}) => (\n  <DropdownMenu>\n    {({isOpen, getRootProps, getActorProps, getMenuProps}) => {\n      const topLevelCx = classNames('dropdown', {\n        'anchor-right': true,\n        open: isOpen,\n      });\n\n      return (\n        <MoreOptions\n          {...getRootProps({\n            className: topLevelCx,\n          })}\n        >\n          <DropdownTarget\n            {...getActorProps<HTMLDivElement>({\n              onClick: (event: MouseEvent) => {\n                event.stopPropagation();\n                event.preventDefault();\n              },\n            })}\n          >\n            <IconEllipsis data-test-id=\"context-menu\" size=\"md\" />\n          </DropdownTarget>\n          {isOpen && (\n            <ul {...getMenuProps({})} className={classNames('dropdown-menu')}>\n              {children}\n            </ul>\n          )}\n        </MoreOptions>\n      );\n    }}\n  </DropdownMenu>\n);\n\nconst MoreOptions = styled('span')`\n  display: flex;\n  color: ${p => p.theme.textColor};\n`;\n\nconst DropdownTarget = styled('div')`\n  display: flex;\n  cursor: pointer;\n  padding: 0 5px;\n`;\n\nexport default ContextMenu;\n"],"names":["doEventsRequest","api","organization","project","environment","team","period","start","end","interval","comparisonDelta","includePrevious","query","yAxis","field","topEvents","orderby","partial","withoutZerofill","referrer","shouldDoublePeriod","canIncludePreviousPeriod","urlQuery","Object","fromEntries","entries","undefined","filter","value","periodObj","getPeriod","requestPromise","slug","async","fetchTagFacets","orgSlug","queryOption","pick","values","PERFORMANCE_URL_PARAM","fetchTotalCount","then","res","count","AreaChart","React","render","series","stacked","colors","props","this","map","seriesName","data","otherSeriesProps","i","LineSeries","AreaSeries","stack","name","lineStyle","color","opacity","width","areaStyle","animation","animationThreshold","animationDuration","getDate","date","moment","format","ChartZoom","constructor","super","currentPeriod","saveHistory","router","onZoom","usePageDate","startFormatted","endFormatted","history","push","callIfFunction","zooming","newQuery","location","pageStart","getUtcDateString","pageEnd","pageStatsPeriod","qs","pathname","updateDateTime","getUtcToLocalDateObject","saveCurrentPeriod","chart","dispatchAction","type","key","dataZoomSelectActive","onChartReady","evt","length","setPeriod","onRestore","model","getModel","xAxis","option","axis","rangeStart","rangeEnd","previousPeriod","pop","onDataZoom","onFinished","componentDidUpdate","disabled","utc","_utc","_start","_end","children","xAxisIndex","_router","_onZoom","_onRestore","_onChartReady","_onDataZoom","_onFinished","isGroupedByDate","handleChartReady","dataZoom","DataZoomInside","showTimeInTooltip","toolBox","ToolBox","title","zoom","back","iconStyle","borderWidth","handleDataZoom","handleChartFinished","handleZoomRestore","className","visible","other","p","tooltipFormatter","aggregateOutputType","toLocaleString","formatPercentage","getDuration","toString","axisLabelFormatter","abbreviation","formatAbbreviatedNumber","WEEK","label","toFixed","t","DAY","HOUR","MINUTE","SECOND","axisDuration","DEFAULT_STATS_PERIOD","statsPeriod","periodNumber","periodLength","match","parseInt","Error","formattedStart","formattedEnd","diff","previousPeriodStart","subtract","ContextMenu","isOpen","getRootProps","getActorProps","getMenuProps","topLevelCx","classNames","open","MoreOptions","DropdownTarget","onClick","event","stopPropagation","preventDefault","size","theme","textColor"],"sourceRoot":""}