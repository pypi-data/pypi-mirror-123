{"version":3,"file":"chunks/app_views_settings_organizationPerformance_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"gdAUA,MAAMA,EAAkB,EAAEC,OAAAA,EAAS,CAAC,gBAAiBC,MACnD,QAAC,IAAD,CAAQD,OAAQA,EAAhB,SACG,EAAEE,UAAAA,MACAA,IACC,QAAC,IAAD,CAAOC,KAAK,UAAUC,MAAM,QAAC,KAAD,CAAaC,KAAK,UAAaJ,EAA3D,UACGK,EAAAA,EAAAA,GACC,+FANNP,EAAAA,YAAAA,kBAcN,W,wyBCTA,MAAMQ,EAA2B,CAC/B,CACEC,OAAOF,EAAAA,EAAAA,GAAE,WACTC,OAAQ,CACN,CACEE,KAAM,iBACNN,KAAM,SACNO,UAAU,EACVC,OAAOL,EAAAA,EAAAA,GAAE,mCACTM,MAAMC,EAAAA,EAAAA,IAAI,kQAIR,CACEC,MACE,QAAC,IAAD,CAAcC,KAAK,mFAcjC,MAAMC,UAAgCC,EAAAA,UAAiB,4DACpCC,KACfC,EAAAA,EAAAA,IAAmBD,MAGrBE,SACE,MAAM,SAACC,EAAD,aAAWC,GAAgBC,KAAKtB,MAChCuB,EAAW,IAAIC,IAAIH,EAAaE,UAChCxB,EAAS,IAAIyB,IAAIH,EAAatB,QAC9B0B,EAAW,kBAAH,OAAqBJ,EAAaK,KAAlC,KAERC,EAAmB,CACvBP,SAAAA,EACAG,SAAAA,EACAxB,OAAAA,EACA6B,WAAY7B,EAAO8B,IAAI,cAAgBN,EAASM,IAAI,sBAGtD,OACE,QAAC,EAAAC,SAAD,YACE,QAAC,IAAD,CAAoBvB,MAAM,iBAC1B,QAAC,IAAD,KAEA,QAAC,IAAD,CACE,eAAa,oCACbwB,UAAU,MACVC,YAAaP,EACbQ,YAAU,EACVC,WAAS,EACTC,YAAad,EACbe,gBAAiBd,KAAKe,cACtBC,cAAe,KAAMC,EAAAA,EAAAA,IAAgB,0BARvC,UAUE,QAAC,IAAD,IAAcZ,EAAkBa,MAAOlC,UAjC3CS,EAAAA,YAAAA,0BAwCN,SAAe0B,EAAAA,EAAAA,GAAiB1B","sources":["webpack:///./app/views/settings/organization/permissionAlert.tsx","webpack:///./app/views/settings/organizationPerformance/index.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\nimport {IconWarning} from 'app/icons';\nimport {t} from 'app/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['org:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" icon={<IconWarning size=\"sm\" />} {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner or manager role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nexport default PermissionAlert;\n","import {Component, Fragment} from 'react';\nimport {Location} from 'history';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {updateOrganization} from 'app/actionCreators/organizations';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {t, tct} from 'app/locale';\nimport {Organization} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport {JsonFormObject} from 'app/views/settings/components/forms/type';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport PermissionAlert from 'app/views/settings/organization/permissionAlert';\n\nconst fields: JsonFormObject[] = [\n  {\n    title: t('General'),\n    fields: [\n      {\n        name: 'apdexThreshold',\n        type: 'number',\n        required: true,\n        label: t('Response Time Threshold (Apdex)'),\n        help: tct(\n          `Set a response time threshold in milliseconds to help define what satisfactory\n                and tolerable response times are. This value will be reflected in the\n                calculation of your [link:Apdex], a standard measurement in performance.`,\n          {\n            link: (\n              <ExternalLink href=\"https://docs.sentry.io/performance-monitoring/performance/metrics/#apdex\" />\n            ),\n          }\n        ),\n      },\n    ],\n  },\n];\n\ntype Props = {\n  organization: Organization;\n  location: Location;\n};\n\nclass OrganizationPerformance extends Component<Props> {\n  handleSuccess = (data: Organization) => {\n    updateOrganization(data);\n  };\n\n  render() {\n    const {location, organization} = this.props;\n    const features = new Set(organization.features);\n    const access = new Set(organization.access);\n    const endpoint = `/organizations/${organization.slug}/`;\n\n    const jsonFormSettings = {\n      location,\n      features,\n      access,\n      disabled: !(access.has('org:write') && features.has('performance-view')),\n    };\n\n    return (\n      <Fragment>\n        <SettingsPageHeader title=\"Performance\" />\n        <PermissionAlert />\n\n        <Form\n          data-test-id=\"organization-performance-settings\"\n          apiMethod=\"PUT\"\n          apiEndpoint={endpoint}\n          saveOnBlur\n          allowUndo\n          initialData={organization}\n          onSubmitSuccess={this.handleSuccess}\n          onSubmitError={() => addErrorMessage('Unable to save changes')}\n        >\n          <JsonForm {...jsonFormSettings} forms={fields} />\n        </Form>\n      </Fragment>\n    );\n  }\n}\n\nexport default withOrganization(OrganizationPerformance);\n"],"names":["PermissionAlert","access","props","hasAccess","type","icon","size","t","fields","title","name","required","label","help","tct","link","href","OrganizationPerformance","Component","data","updateOrganization","render","location","organization","this","features","Set","endpoint","slug","jsonFormSettings","disabled","has","Fragment","apiMethod","apiEndpoint","saveOnBlur","allowUndo","initialData","onSubmitSuccess","handleSuccess","onSubmitError","addErrorMessage","forms","withOrganization"],"sourceRoot":""}