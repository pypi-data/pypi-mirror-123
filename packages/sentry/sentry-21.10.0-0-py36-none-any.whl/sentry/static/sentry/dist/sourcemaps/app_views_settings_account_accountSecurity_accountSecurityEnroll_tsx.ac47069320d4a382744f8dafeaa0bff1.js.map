{"version":3,"file":"chunks/app_views_settings_account_accountSecurity_accountSecurityEnroll_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/u2f/u2finterface.tsx","webpack:///./app/components/u2f/u2fsign.tsx","webpack:///./app/utils/getPendingInvite.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/account/accountSecurity/accountSecurityEnroll.tsx","webpack:///./app/views/settings/account/accountSecurity/components/confirmHeader.tsx","webpack:///./app/views/settings/account/accountSecurity/components/removeConfirm.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as Sentry from '@sentry/react';\nimport u2f from 'u2f-api';\n\nimport {t, tct} from 'app/locale';\nimport ConfigStore from 'app/stores/configStore';\nimport {ChallengeData} from 'app/types';\n\ntype TapParams = {\n  response: string;\n  challenge: string;\n};\n\ntype Props = {\n  challengeData: ChallengeData;\n  flowMode: string;\n  silentIfUnsupported: boolean;\n  onTap: ({response, challenge}: TapParams) => Promise<void>;\n  style?: React.CSSProperties;\n};\n\ntype State = {\n  responseElement: HTMLInputElement | null;\n  formElement: HTMLFormElement | null;\n  challengeElement: HTMLInputElement | null;\n  isSupported: boolean | null;\n  hasBeenTapped: boolean;\n  deviceFailure: string | null;\n};\n\nclass U2fInterface extends React.Component<Props, State> {\n  state: State = {\n    isSupported: null,\n    formElement: null,\n    challengeElement: null,\n    hasBeenTapped: false,\n    deviceFailure: null,\n    responseElement: null,\n  };\n\n  async componentDidMount() {\n    const supported = await u2f.isSupported();\n\n    // eslint-disable-next-line react/no-did-mount-set-state\n    this.setState({isSupported: supported});\n\n    if (supported) {\n      this.invokeU2fFlow();\n    }\n  }\n\n  invokeU2fFlow() {\n    let promise: Promise<u2f.SignResponse | u2f.RegisterResponse>;\n\n    if (this.props.flowMode === 'sign') {\n      promise = u2f.sign(this.props.challengeData.authenticateRequests);\n    } else if (this.props.flowMode === 'enroll') {\n      const {registerRequests, authenticateRequests} = this.props.challengeData;\n      promise = u2f.register(registerRequests, authenticateRequests);\n    } else {\n      throw new Error(`Unsupported flow mode '${this.props.flowMode}'`);\n    }\n\n    promise\n      .then(data => {\n        this.setState(\n          {\n            hasBeenTapped: true,\n          },\n          () => {\n            const u2fResponse = JSON.stringify(data);\n            const challenge = JSON.stringify(this.props.challengeData);\n\n            if (this.state.responseElement) {\n              // eslint-disable-next-line react/no-direct-mutation-state\n              this.state.responseElement.value = u2fResponse;\n            }\n\n            if (!this.props.onTap) {\n              this.state.formElement?.submit();\n              return;\n            }\n\n            this.props\n              .onTap({\n                response: u2fResponse,\n                challenge,\n              })\n              .catch(() => {\n                // This is kind of gross but I want to limit the amount of changes to this component\n                this.setState({\n                  deviceFailure: 'UNKNOWN_ERROR',\n                  hasBeenTapped: false,\n                });\n              });\n          }\n        );\n      })\n      .catch(err => {\n        let failure = 'DEVICE_ERROR';\n        // in some rare cases there is no metadata on the error which\n        // causes this to blow up badly.\n        if (err.metaData) {\n          if (err.metaData.type === 'DEVICE_INELIGIBLE') {\n            if (this.props.flowMode === 'enroll') {\n              failure = 'DUPLICATE_DEVICE';\n            } else {\n              failure = 'UNKNOWN_DEVICE';\n            }\n          } else if (err.metaData.type === 'BAD_REQUEST') {\n            failure = 'BAD_APPID';\n          }\n        }\n        // we want to know what is happening here.  There are some indicators\n        // that users are getting errors that should not happen through the\n        // regular u2f flow.\n        Sentry.captureException(err);\n        this.setState({\n          deviceFailure: failure,\n          hasBeenTapped: false,\n        });\n      });\n  }\n\n  onTryAgain = () => {\n    this.setState(\n      {hasBeenTapped: false, deviceFailure: null},\n      () => void this.invokeU2fFlow()\n    );\n  };\n\n  bindChallengeElement: React.RefCallback<HTMLInputElement> = ref => {\n    this.setState({\n      challengeElement: ref,\n      formElement: ref && ref.form,\n    });\n\n    if (ref) {\n      ref.value = JSON.stringify(this.props.challengeData);\n    }\n  };\n\n  bindResponseElement: React.RefCallback<HTMLInputElement> = ref =>\n    this.setState({responseElement: ref});\n\n  renderUnsupported() {\n    return this.props.silentIfUnsupported ? null : (\n      <div className=\"u2f-box\">\n        <div className=\"inner\">\n          <p className=\"error\">\n            {t(\n              `\n             Unfortunately your browser does not support U2F. You need to use\n             a different two-factor method or switch to a browser that supports\n             it (Google Chrome or Microsoft Edge).`\n            )}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  get canTryAgain() {\n    return this.state.deviceFailure !== 'BAD_APPID';\n  }\n\n  renderFailure = () => {\n    const {deviceFailure} = this.state;\n    const supportMail = ConfigStore.get('supportEmail');\n    const support = supportMail ? (\n      <a href={'mailto:' + supportMail}>{supportMail}</a>\n    ) : (\n      <span>{t('Support')}</span>\n    );\n    return (\n      <div className=\"failure-message\">\n        <div>\n          <strong>{t('Error: ')}</strong>{' '}\n          {\n            {\n              UNKNOWN_ERROR: t('There was an unknown problem, please try again'),\n              DEVICE_ERROR: t('Your U2F device reported an error.'),\n              DUPLICATE_DEVICE: t('This device is already in use.'),\n              UNKNOWN_DEVICE: t('The device you used for sign-in is unknown.'),\n              BAD_APPID: tct(\n                '[p1:The Sentry server administrator modified the ' +\n                  'device registrations.]' +\n                  '[p2:You need to remove and re-add the device to continue ' +\n                  'using your U2F device. Use a different sign-in method or ' +\n                  'contact [support] for assistance.]',\n                {\n                  p1: <p />,\n                  p2: <p />,\n                  support,\n                }\n              ),\n            }[deviceFailure || '']\n          }\n        </div>\n        {this.canTryAgain && (\n          <div style={{marginTop: 18}}>\n            <a onClick={this.onTryAgain} className=\"btn btn-primary\">\n              {t('Try Again')}\n            </a>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  renderBody() {\n    return this.state.deviceFailure ? this.renderFailure() : this.props.children;\n  }\n\n  renderPrompt() {\n    const {style} = this.props;\n\n    return (\n      <div\n        style={style}\n        className={\n          'u2f-box' +\n          (this.state.hasBeenTapped ? ' tapped' : '') +\n          (this.state.deviceFailure ? ' device-failure' : '')\n        }\n      >\n        <div className=\"device-animation-frame\">\n          <div className=\"device-failed\" />\n          <div className=\"device-animation\" />\n          <div className=\"loading-dots\">\n            <span className=\"dot\" />\n            <span className=\"dot\" />\n            <span className=\"dot\" />\n          </div>\n        </div>\n        <input type=\"hidden\" name=\"challenge\" ref={this.bindChallengeElement} />\n        <input type=\"hidden\" name=\"response\" ref={this.bindResponseElement} />\n        <div className=\"inner\">{this.renderBody()}</div>\n      </div>\n    );\n  }\n\n  render() {\n    const {isSupported} = this.state;\n    // if we are still waiting for the browser to tell us if we can do u2f this\n    // will be null.\n    if (isSupported === null) {\n      return null;\n    }\n\n    if (!isSupported) {\n      return this.renderUnsupported();\n    }\n\n    return this.renderPrompt();\n  }\n}\n\nexport default U2fInterface;\n","import {Component} from 'react';\n\nimport {t} from 'app/locale';\n\nimport U2fInterface from './u2finterface';\n\nconst MESSAGES = {\n  signin: t(\n    'Insert your U2F device or tap the button on it to confirm the sign-in request.'\n  ),\n  sudo: t('Alternatively you can use your U2F device to confirm the action.'),\n  enroll: t(\n    'To enroll your U2F device insert it now or tap the button on it to activate it.'\n  ),\n};\n\ntype InterfaceProps = U2fInterface['props'];\n\ntype Props = Omit<InterfaceProps, 'silentIfUnsupported' | 'flowMode'> & {\n  displayMode: 'signin' | 'enroll' | 'sudo';\n};\n\nclass U2fSign extends Component<Props> {\n  static defaultProps = {\n    displayMode: 'signin',\n  };\n\n  render() {\n    const {displayMode, ...props} = this.props;\n    const flowMode = displayMode === 'enroll' ? 'enroll' : 'sign';\n    return (\n      <U2fInterface\n        {...props}\n        silentIfUnsupported={displayMode === 'sudo'}\n        flowMode={flowMode}\n      >\n        <p>{MESSAGES[displayMode] || null}</p>\n      </U2fInterface>\n    );\n  }\n}\n\nexport default U2fSign;\n","import Cookies from 'js-cookie';\nimport * as queryString from 'query-string';\n\ntype PendingInvite = {\n  memberId: number;\n  token: string;\n  url: string;\n};\n\nexport default function getPendingInvite(): PendingInvite | null {\n  const data = Cookies.get('pending-invite');\n\n  if (!data) {\n    return null;\n  }\n\n  return queryString.parse(data) as any;\n}\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport QRCode from 'qrcode.react';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport {openRecoveryOptions} from 'app/actionCreators/modal';\nimport {fetchOrganizationByMember} from 'app/actionCreators/organizations';\nimport Alert from 'app/components/alert';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport CircleIndicator from 'app/components/circleIndicator';\nimport {PanelItem} from 'app/components/panels';\nimport U2fsign from 'app/components/u2f/u2fsign';\nimport {IconWarning} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Authenticator} from 'app/types';\nimport getPendingInvite from 'app/utils/getPendingInvite';\nimport AsyncView from 'app/views/asyncView';\nimport RemoveConfirm from 'app/views/settings/account/accountSecurity/components/removeConfirm';\nimport Field from 'app/views/settings/components/forms/field';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport FormModel from 'app/views/settings/components/forms/model';\nimport TextCopyInput from 'app/views/settings/components/forms/textCopyInput';\nimport {FieldObject} from 'app/views/settings/components/forms/type';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype getFieldsOpts = {\n  authenticator: Authenticator;\n  /**\n   * Flag to track if totp has been sent\n   */\n  hasSentCode: boolean;\n  /**\n   * Flag to track if we are currently sending the otp code\n   */\n  sendingCode: boolean;\n  /**\n   * Callback to reset SMS 2fa enrollment\n   */\n  onSmsReset: () => void;\n  /**\n   * Callback when u2f device is activated\n   */\n  onU2fTap: U2fsign['props']['onTap'];\n};\n\n/**\n * Retrieve additional form fields (or modify ones) based on 2fa method\n */\nconst getFields = ({\n  authenticator,\n  hasSentCode,\n  sendingCode,\n  onSmsReset,\n  onU2fTap,\n}: getFieldsOpts): null | FieldObject[] => {\n  const {form} = authenticator;\n\n  if (!form) {\n    return null;\n  }\n\n  if (authenticator.id === 'totp') {\n    return [\n      () => (\n        <CodeContainer key=\"qrcode\">\n          <StyledQRCode value={authenticator.qrcode} size={228} />\n        </CodeContainer>\n      ),\n      () => (\n        <Field key=\"secret\" label={t('Authenticator secret')}>\n          <TextCopyInput>{authenticator.secret ?? ''}</TextCopyInput>\n        </Field>\n      ),\n      ...form,\n      () => (\n        <Actions key=\"confirm\">\n          <Button priority=\"primary\" type=\"submit\">\n            {t('Confirm')}\n          </Button>\n        </Actions>\n      ),\n    ];\n  }\n\n  // Sms Form needs a start over button + confirm button\n  // Also inputs being disabled vary based on hasSentCode\n  if (authenticator.id === 'sms') {\n    // Ideally we would have greater flexibility when rendering footer\n    return [\n      {...form[0], disabled: sendingCode || hasSentCode},\n      ...(hasSentCode ? [{...form[1], required: true}] : []),\n      () => (\n        <Actions key=\"sms-footer\">\n          <ButtonBar gap={1}>\n            {hasSentCode && <Button onClick={onSmsReset}>{t('Start Over')}</Button>}\n            <Button priority=\"primary\" type=\"submit\">\n              {hasSentCode ? t('Confirm') : t('Send Code')}\n            </Button>\n          </ButtonBar>\n        </Actions>\n      ),\n    ];\n  }\n\n  // Need to render device name field + U2f component\n  if (authenticator.id === 'u2f') {\n    const deviceNameField = form.find(({name}) => name === 'deviceName')!;\n    return [\n      deviceNameField,\n      () => (\n        <U2fsign\n          key=\"u2f-enroll\"\n          style={{marginBottom: 0}}\n          challengeData={authenticator.challenge}\n          displayMode=\"enroll\"\n          onTap={onU2fTap}\n        />\n      ),\n    ];\n  }\n\n  return null;\n};\n\ntype Props = AsyncView['props'] & WithRouterProps<{authId: string}, {}> & {};\n\ntype State = AsyncView['state'] & {\n  authenticator: Authenticator | null;\n  hasSentCode: boolean;\n  sendingCode: boolean;\n};\n\ntype PendingInvite = ReturnType<typeof getPendingInvite>;\n\n/**\n * Renders necessary forms in order to enroll user in 2fa\n */\nclass AccountSecurityEnroll extends AsyncView<Props, State> {\n  formModel = new FormModel();\n\n  getTitle() {\n    return t('Security');\n  }\n\n  getDefaultState() {\n    return {...super.getDefaultState(), hasSentCode: false};\n  }\n\n  get authenticatorEndpoint() {\n    return `/users/me/authenticators/${this.props.params.authId}/`;\n  }\n\n  get enrollEndpoint() {\n    return `${this.authenticatorEndpoint}enroll/`;\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const errorHandler = (err: any) => {\n      const alreadyEnrolled =\n        err &&\n        err.status === 400 &&\n        err.responseJSON &&\n        err.responseJSON.details === 'Already enrolled';\n\n      if (alreadyEnrolled) {\n        this.props.router.push('/settings/account/security/');\n        addErrorMessage(t('Already enrolled'));\n      }\n\n      // Allow the endpoint to fail if the user is already enrolled\n      return alreadyEnrolled;\n    };\n\n    return [['authenticator', this.enrollEndpoint, {}, {allowError: errorHandler}]];\n  }\n\n  componentDidMount() {\n    this.pendingInvitation = getPendingInvite();\n  }\n\n  pendingInvitation: PendingInvite = null;\n\n  get authenticatorName() {\n    return this.state.authenticator?.name ?? 'Authenticator';\n  }\n\n  // This resets state so that user can re-enter their phone number again\n  handleSmsReset = () => this.setState({hasSentCode: false}, this.remountComponent);\n\n  // Handles SMS authenticators\n  handleSmsSubmit = async (dataModel: any) => {\n    const {authenticator, hasSentCode} = this.state;\n    const {phone, otp} = dataModel;\n\n    // Don't submit if empty\n    if (!phone || !authenticator) {\n      return;\n    }\n\n    const data = {\n      phone,\n      // Make sure `otp` is undefined if we are submitting OTP verification\n      // Otherwise API will think that we are on verification step (e.g. after submitting phone)\n      otp: hasSentCode ? otp : undefined,\n      secret: authenticator.secret,\n    };\n\n    // Only show loading when submitting OTP\n    this.setState({sendingCode: !hasSentCode});\n\n    if (!hasSentCode) {\n      addLoadingMessage(t('Sending code to %s...', data.phone));\n    } else {\n      addLoadingMessage(t('Verifying OTP...'));\n    }\n\n    try {\n      await this.api.requestPromise(this.enrollEndpoint, {data});\n    } catch (error) {\n      this.formModel.resetForm();\n\n      addErrorMessage(\n        this.state.hasSentCode ? t('Incorrect OTP') : t('Error sending SMS')\n      );\n\n      this.setState({\n        hasSentCode: false,\n        sendingCode: false,\n      });\n\n      // Re-mount because we want to fetch a fresh secret\n      this.remountComponent();\n\n      return;\n    }\n\n    if (!hasSentCode) {\n      // Just successfully finished sending OTP to user\n      this.setState({hasSentCode: true, sendingCode: false});\n      addSuccessMessage(t('Sent code to %s', data.phone));\n    } else {\n      // OTP was accepted and SMS was added as a 2fa method\n      this.handleEnrollSuccess();\n    }\n  };\n\n  // Handle u2f device tap\n  handleU2fTap = async (tapData: any) => {\n    const data = {deviceName: this.formModel.getValue('deviceName'), ...tapData};\n\n    this.setState({loading: true});\n\n    try {\n      await this.api.requestPromise(this.enrollEndpoint, {data});\n    } catch (err) {\n      this.handleEnrollError();\n      return;\n    }\n\n    this.handleEnrollSuccess();\n  };\n\n  // Currently only TOTP uses this\n  handleTotpSubmit = async (dataModel: any) => {\n    if (!this.state.authenticator) {\n      return;\n    }\n\n    const data = {\n      ...(dataModel ?? {}),\n      secret: this.state.authenticator.secret,\n    };\n\n    this.setState({loading: true});\n\n    try {\n      await this.api.requestPromise(this.enrollEndpoint, {method: 'POST', data});\n    } catch (err) {\n      this.handleEnrollError();\n      return;\n    }\n\n    this.handleEnrollSuccess();\n  };\n\n  handleSubmit: Form['props']['onSubmit'] = data => {\n    const id = this.state.authenticator?.id;\n\n    if (id === 'totp') {\n      this.handleTotpSubmit(data);\n      return;\n    }\n    if (id === 'sms') {\n      this.handleSmsSubmit(data);\n      return;\n    }\n  };\n\n  // Handler when we successfully add a 2fa device\n  async handleEnrollSuccess() {\n    // If we're pending approval of an invite, the user will have just joined\n    // the organization when completing 2fa enrollment. We should reload the\n    // organization context in that case to assign them to the org.\n    if (this.pendingInvitation) {\n      await fetchOrganizationByMember(this.pendingInvitation.memberId.toString(), {\n        addOrg: true,\n        fetchOrgDetails: true,\n      });\n    }\n\n    this.props.router.push('/settings/account/security/');\n    openRecoveryOptions({authenticatorName: this.authenticatorName});\n  }\n\n  // Handler when we failed to add a 2fa device\n  handleEnrollError() {\n    this.setState({loading: false});\n    addErrorMessage(t('Error adding %s authenticator', this.authenticatorName));\n  }\n\n  // Removes an authenticator\n  handleRemove = async () => {\n    const {authenticator} = this.state;\n\n    if (!authenticator || !authenticator.authId) {\n      return;\n    }\n\n    // `authenticator.authId` is NOT the same as `props.params.authId` This is\n    // for backwards compatibility with API endpoint\n    try {\n      await this.api.requestPromise(this.authenticatorEndpoint, {method: 'DELETE'});\n    } catch (err) {\n      addErrorMessage(t('Error removing authenticator'));\n      return;\n    }\n\n    this.props.router.push('/settings/account/security/');\n    addSuccessMessage(t('Authenticator has been removed'));\n  };\n\n  renderBody() {\n    const {authenticator, hasSentCode, sendingCode} = this.state;\n\n    if (!authenticator) {\n      return null;\n    }\n\n    const fields = getFields({\n      authenticator,\n      hasSentCode,\n      sendingCode,\n      onSmsReset: this.handleSmsReset,\n      onU2fTap: this.handleU2fTap,\n    });\n\n    // Attempt to extract `defaultValue` from server generated form fields\n    const defaultValues = fields\n      ? fields\n          .filter(\n            field =>\n              typeof field !== 'function' && typeof field.defaultValue !== 'undefined'\n          )\n          .map(field => [\n            field.name,\n            typeof field !== 'function' ? field.defaultValue : '',\n          ])\n          .reduce((acc, [name, value]) => {\n            acc[name] = value;\n            return acc;\n          }, {})\n      : {};\n\n    return (\n      <Fragment>\n        <SettingsPageHeader\n          title={\n            <Fragment>\n              <span>{authenticator.name}</span>\n              <CircleIndicator\n                css={{marginLeft: 6}}\n                enabled={authenticator.isEnrolled || authenticator.status === 'rotation'}\n              />\n            </Fragment>\n          }\n          action={\n            authenticator.isEnrolled &&\n            authenticator.removeButton && (\n              <RemoveConfirm onConfirm={this.handleRemove}>\n                <Button priority=\"danger\">{authenticator.removeButton}</Button>\n              </RemoveConfirm>\n            )\n          }\n        />\n\n        <TextBlock>{authenticator.description}</TextBlock>\n\n        {authenticator.rotationWarning && authenticator.status === 'rotation' && (\n          <Alert type=\"warning\" icon={<IconWarning size=\"md\" />}>\n            {authenticator.rotationWarning}\n          </Alert>\n        )}\n\n        {!!authenticator.form?.length && (\n          <Form\n            model={this.formModel}\n            apiMethod=\"POST\"\n            apiEndpoint={this.authenticatorEndpoint}\n            onSubmit={this.handleSubmit}\n            initialData={{...defaultValues, ...authenticator}}\n            hideFooter\n          >\n            <JsonForm forms={[{title: 'Configuration', fields: fields ?? []}]} />\n          </Form>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst CodeContainer = styled(PanelItem)`\n  justify-content: center;\n`;\n\nconst Actions = styled(PanelItem)`\n  justify-content: flex-end;\n`;\n\nconst StyledQRCode = styled(QRCode)`\n  background: white;\n  padding: ${space(2)};\n`;\n\nexport default withRouter(AccountSecurityEnroll);\n","import styled from '@emotion/styled';\n\nconst ConfirmHeader = styled('div')`\n  font-size: 1.2em;\n  margin-bottom: 10px;\n`;\n\nexport default ConfirmHeader;\n","import * as React from 'react';\n\nimport Confirm from 'app/components/confirm';\nimport {t} from 'app/locale';\nimport ConfirmHeader from 'app/views/settings/account/accountSecurity/components/confirmHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype Props = React.ComponentProps<typeof Confirm>;\n\nconst message = (\n  <React.Fragment>\n    <ConfirmHeader>{t('Do you want to remove this method?')}</ConfirmHeader>\n    <TextBlock>\n      {t(\n        'Removing the last authentication method will disable two-factor authentication completely.'\n      )}\n    </TextBlock>\n  </React.Fragment>\n);\n\nconst RemoveConfirm = (props: Props) => <Confirm {...props} message={message} />;\n\nexport default RemoveConfirm;\n"],"names":["U2fInterface","React","isSupported","formElement","challengeElement","hasBeenTapped","deviceFailure","responseElement","this","setState","invokeU2fFlow","ref","form","value","JSON","stringify","props","challengeData","state","supportMail","ConfigStore","support","href","t","className","UNKNOWN_ERROR","DEVICE_ERROR","DUPLICATE_DEVICE","UNKNOWN_DEVICE","BAD_APPID","tct","p1","p2","canTryAgain","style","marginTop","onClick","onTryAgain","supported","u2f","promise","flowMode","authenticateRequests","Error","registerRequests","then","data","u2fResponse","challenge","onTap","response","catch","submit","err","failure","metaData","type","Sentry","renderUnsupported","silentIfUnsupported","renderBody","renderFailure","children","renderPrompt","name","bindChallengeElement","bindResponseElement","render","MESSAGES","signin","sudo","enroll","U2fSign","Component","displayMode","getPendingInvite","Cookies","queryString","AsyncView","AsyncComponent","getTitle","title","renderComponent","AccountSecurityEnroll","FormModel","hasSentCode","remountComponent","async","authenticator","phone","otp","dataModel","undefined","secret","sendingCode","addLoadingMessage","api","requestPromise","enrollEndpoint","error","formModel","resetForm","addErrorMessage","handleEnrollSuccess","addSuccessMessage","deviceName","getValue","tapData","loading","handleEnrollError","method","id","handleSmsSubmit","handleTotpSubmit","authId","authenticatorEndpoint","router","push","getDefaultState","super","params","getEndpoints","allowError","alreadyEnrolled","status","responseJSON","details","componentDidMount","pendingInvitation","fetchOrganizationByMember","memberId","toString","addOrg","fetchOrgDetails","openRecoveryOptions","authenticatorName","fields","onSmsReset","onU2fTap","CodeContainer","StyledQRCode","qrcode","size","label","Actions","priority","disabled","required","gap","find","marginBottom","getFields","handleSmsReset","handleU2fTap","defaultValues","filter","field","defaultValue","map","reduce","acc","Fragment","css","enabled","isEnrolled","action","removeButton","onConfirm","handleRemove","description","rotationWarning","icon","length","model","apiMethod","apiEndpoint","onSubmit","handleSubmit","initialData","hideFooter","forms","PanelItem","QRCode","space","withRouter","message","RemoveConfirm"],"sourceRoot":""}