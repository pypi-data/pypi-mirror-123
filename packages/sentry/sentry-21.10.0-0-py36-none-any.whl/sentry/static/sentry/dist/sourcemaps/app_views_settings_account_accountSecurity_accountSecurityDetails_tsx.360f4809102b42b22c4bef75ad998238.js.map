{"version":3,"file":"chunks/app_views_settings_account_accountSecurity_accountSecurityDetails_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"gbAQe,MAAMA,UAGXC,EAAAA,EACRC,WACE,MAAO,GAGTC,SACE,MAAMC,EAAQC,KAAKH,WACnB,OACE,QAAC,IAAD,CAAeE,MAAK,UAAKA,EAAQ,GAAH,OAAMA,EAAN,OAAmB,GAA7B,UAApB,SACGC,KAAKC,qBAZON,EAAAA,YAAAA,a,0/BCgBrB,MAAMO,EAAgB,EACpBC,UAAAA,EACAC,WAAAA,EACAC,MAAAA,EACAC,wBAAAA,MAUA,IAAKF,IAAeC,EAClB,OAAO,KAGT,MAAME,EAAiBF,EAAMG,KAAK,OAElC,OACE,QAACC,EAAD,CAAeN,UAAWA,EAA1B,WACE,QAAC,KAAD,CAAaO,YAAU,EAAvB,WACGC,EAAAA,EAAAA,GAAE,iBAEH,QAACC,EAAD,YACE,QAAC,IAAD,CAAWC,iBAAe,EAACC,MAAOP,EAAlC,UACE,QAAC,KAAD,CAAQQ,KAAK,QAAQC,OAAOL,EAAAA,EAAAA,GAAE,QAA9B,UACE,QAAC,KAAD,SAGJ,QAAC,KAAD,CAAQI,KAAK,QAAQE,QAzBV,KAEjB,MAAMC,EAASC,OAAOC,OAAP,UACfF,EAAOG,SAASC,MAAMjB,EAAMG,KAAK,SACjCU,EAAOK,QACPL,EAAOG,SAASG,SAoBgCR,OAAOL,EAAAA,EAAAA,GAAE,SAAnD,UACE,QAAC,KAAD,OAEF,QAAC,KAAD,CACEI,KAAK,QACLU,SAAS,4BACTC,KAAI,wCAAmCnB,GACvCS,OAAOL,EAAAA,EAAAA,GAAE,YAJX,UAME,QAAC,KAAD,OAEF,QAAC,IAAD,CACEgB,UAAWrB,EACXsB,SAASjB,EAAAA,EAAAA,GACP,2FAHJ,UAME,QAAC,KAAD,CAAQkB,SAAS,SAASd,KAAK,QAA/B,UACGJ,EAAAA,EAAAA,GAAE,+BAKX,QAAC,IAAD,YACE,QAAC,KAAD,CAAYmB,KAAK,UAAjB,UACGnB,EAAAA,EAAAA,GACC,sFAGJ,0BAAQN,EAAM0B,QAAU1B,EAAM2B,KAAIC,IAAQ,QAACC,EAAD,UAAkBD,GAAPA,QACnD5B,EAAM0B,SACN,QAAC,IAAD,WAAepB,EAAAA,EAAAA,GAAE,gDAGrB,kBAAQwB,KAAK,YAAYC,MAAO,CAACC,QAAS,cAjE1CnC,EAAAA,YAAAA,gBAsEN,UAEMO,GAAgB,OAAO6B,EAAAA,GAAP,sBAAH,eACHC,EAAAA,EAAAA,GAAM,GADH,KAIb3B,GAAU,OAAO,MAAP,sBAAH,gDAGC2B,EAAAA,EAAAA,GAAM,GAHP,KAMPL,GAAO,OAAOM,EAAAA,GAAP,sBAAH,gBACOC,GAAKA,EAAEC,MAAMC,KAAKC,YADzB,aAEGL,EAAAA,EAAAA,GAAM,GAFT,K,gOC/EV,SAASM,GAAmB,UAC1B1C,EAD0B,WAE1BC,EAF0B,QAG1B0C,EAH0B,GAI1BC,EAJ0B,kBAK1BC,IAEA,GAAW,QAAPD,IAAiB3C,EACnB,OAAO,KAGT,MAAM6C,EAAaH,MAAAA,OAAH,EAAGA,EAASf,OAEtBmB,EAA8B,IAAfD,EAErB,OACE,QAAC,KAAD,CAAO9C,UAAWA,EAAlB,WACE,QAAC,KAAD,WAAcQ,EAAAA,EAAAA,GAAE,kBAEhB,QAAC,IAAD,YACIsC,IACA,QAAC,IAAD,WAAetC,EAAAA,EAAAA,GAAE,wCAElBsC,IACCH,MAAAA,OADS,EACTA,EAASd,KAAImB,IACX,QAACC,EAAD,YACE,QAACC,EAAD,YACE,QAACC,EAAD,UAAOH,EAAOhB,QACd,QAACoB,EAAD,CAAeC,KAAML,EAAOM,gBAG9B,QAAC,EAAD,WACE,QAAC,IAAD,CACE9B,UAAW,IAAMqB,EAAkBG,GACnCO,SAAUR,EACVtB,SACE,QAAC,EAAA+B,SAAD,YACE,QAAC,IAAD,WACGhD,EAAAA,EAAAA,GAAE,wCAEL,QAAC,IAAD,WACGA,EAAAA,EAAAA,GAAE,mDAAD,OACmDwC,EAAOhB,KAD1D,YATV,UAgBE,QAAC,KAAD,CAAQpB,KAAK,QAAQc,SAAS,SAA9B,UACE,QAAC,IAAD,CACE6B,UAAWR,EACXnD,OAAOY,EAAAA,EAAAA,GAAE,kCAFX,UAIE,QAAC,KAAD,CAAYI,KAAK,iBA5BLoC,EAAOhB,UAmCjC,QAACyB,EAAD,WACE,QAAC,KAAD,CACE9B,KAAK,SACL+B,GAAG,6CACH9C,KAAK,QAHP,UAKGJ,EAAAA,EAAAA,GAAE,gCAlENkC,EAAAA,YAAAA,qBA0ET,MAAMO,GAAkB,OAAOZ,EAAAA,GAAP,qBAAH,qCAIfa,GAAoB,OAAO,MAAP,qBAAH,mDAKVd,EAAAA,EAAAA,GAAM,GALI,qBASjBgB,GAAgB,OAAOO,EAAAA,EAAP,qBAAH,cACJrB,GAAKA,EAAEC,MAAMqB,uBADT,iBAKbT,GAAO,OAAO,MAAP,qBAAH,iCAIJ1C,GAAU,OAAO,MAAP,qBAAH,WACD2B,EAAAA,EAAAA,GAAM,GADL,KAIPqB,GAAsB,OAAOpB,EAAAA,GAAP,qBAAH,qCAEZD,EAAAA,EAAAA,GAAM,GAFM,KAKzB,GAAe,OAAOM,EAAP,oBAAf,gBACgBN,EAAAA,EAAAA,GAAM,GADtB,K,kEC3GA,MAAMyB,EAAW,4BAWjB,SAASC,GAAkB,MAACjD,EAAD,KAAQwC,IACjC,OACE,QAAC,EAAAG,SAAD,YACE,QAACO,EAAD,UAAYlD,KACZ,wBAAMwC,GAAO,QAAC,IAAD,CAAUA,KAAMA,KAAW7C,EAAAA,EAAAA,GAAE,cAJvCsD,EAAAA,YAAAA,oBAkBT,MAAME,UAA+BxE,EAAAA,EAAwB,2DAY5CyE,MAAAA,IACb,MAAM,cAACC,GAAiBrE,KAAKsE,MAE7B,IAAKD,IAAkBA,EAAcE,OACnC,OAIF,MAAMC,EAAWrB,EAAS,GAAH,OAAMA,EAAOsB,WAAb,KAA6B,GAC9CC,EAAavB,EAASA,EAAOhB,MAAOxB,EAAAA,EAAAA,GAAE,iBAE5CX,KAAK2E,SAAS,CAACC,SAAS,IAExB,UACQ5E,KAAK6E,IAAIC,eAAT,UAA2Bd,GAA3B,OAAsCK,EAAcE,OAApD,YAA8DC,GAAY,CAC9EO,OAAQ,WAEV/E,KAAKgF,MAAMC,OAAOC,KAAK,+BACvBC,EAAAA,EAAAA,KAAkBxE,EAAAA,EAAAA,GAAE,sBAAuB+D,IAC3C,MAEA1E,KAAK2E,SAAS,CAACC,SAAS,KACxBQ,EAAAA,EAAAA,KAAgBzE,EAAAA,EAAAA,GAAE,oBAAqB+D,QAjC3C7E,WACE,OAAOc,EAAAA,EAAAA,GAAE,YAGX0E,eACE,MAAM,OAACC,GAAUtF,KAAKgF,OAChB,OAACT,GAAUe,EAEjB,MAAO,CAAC,CAAC,gBAAD,UAAqBtB,GAArB,OAAgCO,EAAhC,OA6BVgB,aACE,MAAM,cAAClB,GAAiBrE,KAAKsE,MAE7B,IAAKD,EACH,OAAO,KAGT,MAAM,eAACmB,EAAD,wBAAiBlF,GAA2BN,KAAKgF,MAEvD,OACE,QAAC,EAAArB,SAAD,YACE,QAAC,IAAD,CACE5D,OACE,QAAC,EAAA4D,SAAD,YACE,yBAAOU,EAAclC,QACrB,QAACsD,EAAD,CAAqBC,QAASrB,EAAcjE,gBAGhDuF,QACE,QAACC,EAAD,WACGvB,EAAcjE,YAAciE,EAAcwB,uBACzC,QAAC,KAAD,CAAQhC,GAAE,yCAAoCQ,EAActB,GAAlD,YAAV,UACGpC,EAAAA,EAAAA,GAAE,uBAGN0D,EAAcjE,YAAciE,EAAcyB,eACzC,QAAC,IAAD,CACE/F,OAAOY,EAAAA,EAAAA,GACL,2FAEF+C,UAAW8B,EAJb,UAME,QAAC,IAAD,CAAe7D,UAAW3B,KAAK+F,aAAcrC,SAAU8B,EAAvD,UACE,QAAC,KAAD,CAAQ3D,SAAS,SAAjB,SAA2BwC,EAAcyB,yBAQrD,QAAC,IAAD,UAAYzB,EAAc2B,eAE1B,QAACC,EAAD,YACE,QAAChC,EAAD,CAAmBjD,OAAOL,EAAAA,EAAAA,GAAE,cAAe6C,KAAMa,EAAc6B,aAC/D,QAACjC,EAAD,CAAmBjD,OAAOL,EAAAA,EAAAA,GAAE,aAAc6C,KAAMa,EAAc8B,iBAGhE,QAAC,EAAD,CACE/F,WAAYiE,EAAcjE,WAC1B2C,GAAIsB,EAActB,GAClBD,QAASuB,EAAcvB,QACvBE,kBAAmBhD,KAAK+F,eAGzB1B,EAAcjE,YAAciE,EAAc+B,QACzC,QAACC,EAAD,YACG1F,EAAAA,EAAAA,GAAE,6DADL,KAEE,QAAC2F,EAAD,UAAQjC,EAAc+B,YAI1B,QAAC,EAAD,CACE9F,wBAAyBA,EACzBF,WAAYiE,EAAcjE,WAC1BC,MAAOgE,EAAchE,YAO/B,UAEMoF,GAAsB,OAAOc,EAAAA,EAAP,sBAAH,gBACRhE,EAAAA,EAAAA,GAAM,GADE,KAInBqD,GAAuB,OAAO,MAAP,sBAAH,0EAMPrD,EAAAA,EAAAA,GAAM,GANC,MAUpB0D,GAAqB,OAAO,MAAP,sBAAH,0BAEV1D,EAAAA,EAAAA,GAAM,GAFI,4CAMlB2B,GAAY,OAAO,OAAP,sBAAH,4CAITmC,GAAe,OAAO,MAAP,sBAAH,eACF9D,EAAAA,EAAAA,GAAM,GADJ,KAIZ+D,GAAQ,OAAO,OAAP,sBAAH,iCAEM/D,EAAAA,EAAAA,GAAM,GAFZ,M,uGChMX,MAKA,GALsB,E,kFAAA,GAAO,MAAP,sBAAH,8D,wbCOnB,MAAMX,GACJ,QAAC,WAAD,YACE,QAAC,IAAD,WAAgBjB,EAAAA,EAAAA,GAAE,yCAClB,QAAC,IAAD,WACGA,EAAAA,EAAAA,GACC,mGAMF6F,EAAiBxB,IAAiB,QAAC,IAAD,IAAaA,EAAOpD,QAASA,IAA/D4E,EAAAA,YAAAA,gBAEN","sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/account/accountSecurity/components/recoveryCodes.tsx","webpack:///./app/views/settings/account/accountSecurity/components/u2fEnrolledDetails.tsx","webpack:///./app/views/settings/account/accountSecurity/accountSecurityDetails.tsx","webpack:///./app/views/settings/account/accountSecurity/components/confirmHeader.tsx","webpack:///./app/views/settings/account/accountSecurity/components/removeConfirm.tsx"],"sourcesContent":["import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport Clipboard from 'app/components/clipboard';\nimport Confirm from 'app/components/confirm';\nimport {\n  Panel,\n  PanelAlert,\n  PanelBody,\n  PanelHeader,\n  PanelItem,\n} from 'app/components/panels';\nimport {IconCopy, IconDownload, IconPrint} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\ntype Props = {\n  isEnrolled: boolean;\n  codes: string[];\n  onRegenerateBackupCodes: () => void;\n  className?: string;\n};\n\nconst RecoveryCodes = ({\n  className,\n  isEnrolled,\n  codes,\n  onRegenerateBackupCodes,\n}: Props) => {\n  const printCodes = () => {\n    // eslint-disable-next-line dot-notation\n    const iframe = window.frames['printable'];\n    iframe.document.write(codes.join('<br>'));\n    iframe.print();\n    iframe.document.close();\n  };\n\n  if (!isEnrolled || !codes) {\n    return null;\n  }\n\n  const formattedCodes = codes.join(' \\n');\n\n  return (\n    <CodeContainer className={className}>\n      <PanelHeader hasButtons>\n        {t('Unused Codes')}\n\n        <Actions>\n          <Clipboard hideUnsupported value={formattedCodes}>\n            <Button size=\"small\" label={t('copy')}>\n              <IconCopy />\n            </Button>\n          </Clipboard>\n          <Button size=\"small\" onClick={printCodes} label={t('print')}>\n            <IconPrint />\n          </Button>\n          <Button\n            size=\"small\"\n            download=\"sentry-recovery-codes.txt\"\n            href={`data:text/plain;charset=utf-8,${formattedCodes}`}\n            label={t('download')}\n          >\n            <IconDownload />\n          </Button>\n          <Confirm\n            onConfirm={onRegenerateBackupCodes}\n            message={t(\n              'Are you sure you want to regenerate recovery codes? Your old codes will no longer work.'\n            )}\n          >\n            <Button priority=\"danger\" size=\"small\">\n              {t('Regenerate Codes')}\n            </Button>\n          </Confirm>\n        </Actions>\n      </PanelHeader>\n      <PanelBody>\n        <PanelAlert type=\"warning\">\n          {t(\n            'Make sure to save a copy of your recovery codes and store them in a safe place.'\n          )}\n        </PanelAlert>\n        <div>{!!codes.length && codes.map(code => <Code key={code}>{code}</Code>)}</div>\n        {!codes.length && (\n          <EmptyMessage>{t('You have no more recovery codes to use')}</EmptyMessage>\n        )}\n      </PanelBody>\n      <iframe name=\"printable\" style={{display: 'none'}} />\n    </CodeContainer>\n  );\n};\n\nexport default RecoveryCodes;\n\nconst CodeContainer = styled(Panel)`\n  margin-top: ${space(4)};\n`;\n\nconst Actions = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  grid-gap: ${space(1)};\n`;\n\nconst Code = styled(PanelItem)`\n  font-family: ${p => p.theme.text.familyMono};\n  padding: ${space(2)};\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport DateTime from 'app/components/dateTime';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';\nimport Tooltip from 'app/components/tooltip';\nimport {IconDelete} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {AuthenticatorDevice} from 'app/types';\nimport ConfirmHeader from 'app/views/settings/account/accountSecurity/components/confirmHeader';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype Props = {\n  isEnrolled: boolean;\n  id: string;\n  onRemoveU2fDevice: (device: AuthenticatorDevice) => void;\n  devices?: AuthenticatorDevice[];\n  className?: string;\n};\n\n/**\n * List u2f devices w/ ability to remove a single device\n */\nfunction U2fEnrolledDetails({\n  className,\n  isEnrolled,\n  devices,\n  id,\n  onRemoveU2fDevice,\n}: Props) {\n  if (id !== 'u2f' || !isEnrolled) {\n    return null;\n  }\n\n  const hasDevices = devices?.length;\n  // Note Tooltip doesn't work because of bootstrap(?) pointer events for disabled buttons\n  const isLastDevice = hasDevices === 1;\n\n  return (\n    <Panel className={className}>\n      <PanelHeader>{t('Device name')}</PanelHeader>\n\n      <PanelBody>\n        {!hasDevices && (\n          <EmptyMessage>{t('You have not added any U2F devices')}</EmptyMessage>\n        )}\n        {hasDevices &&\n          devices?.map(device => (\n            <DevicePanelItem key={device.name}>\n              <DeviceInformation>\n                <Name>{device.name}</Name>\n                <FadedDateTime date={device.timestamp} />\n              </DeviceInformation>\n\n              <Actions>\n                <Confirm\n                  onConfirm={() => onRemoveU2fDevice(device)}\n                  disabled={isLastDevice}\n                  message={\n                    <Fragment>\n                      <ConfirmHeader>\n                        {t('Do you want to remove U2F device?')}\n                      </ConfirmHeader>\n                      <TextBlock>\n                        {t(\n                          `Are you sure you want to remove the U2F device \"${device.name}\"?`\n                        )}\n                      </TextBlock>\n                    </Fragment>\n                  }\n                >\n                  <Button size=\"small\" priority=\"danger\">\n                    <Tooltip\n                      disabled={!isLastDevice}\n                      title={t('Can not remove last U2F device')}\n                    >\n                      <IconDelete size=\"xs\" />\n                    </Tooltip>\n                  </Button>\n                </Confirm>\n              </Actions>\n            </DevicePanelItem>\n          ))}\n        <AddAnotherPanelItem>\n          <Button\n            type=\"button\"\n            to=\"/settings/account/security/mfa/u2f/enroll/\"\n            size=\"small\"\n          >\n            {t('Add Another Device')}\n          </Button>\n        </AddAnotherPanelItem>\n      </PanelBody>\n    </Panel>\n  );\n}\n\nconst DevicePanelItem = styled(PanelItem)`\n  padding: 0;\n`;\n\nconst DeviceInformation = styled('div')`\n  display: flex;\n  align-items: center;\n  flex: 1;\n\n  padding: ${space(2)};\n  padding-right: 0;\n`;\n\nconst FadedDateTime = styled(DateTime)`\n  font-size: ${p => p.theme.fontSizeRelativeSmall};\n  opacity: 0.6;\n`;\n\nconst Name = styled('div')`\n  flex: 1;\n`;\n\nconst Actions = styled('div')`\n  margin: ${space(2)};\n`;\n\nconst AddAnotherPanelItem = styled(PanelItem)`\n  justify-content: flex-end;\n  padding: ${space(2)};\n`;\n\nexport default styled(U2fEnrolledDetails)`\n  margin-top: ${space(4)};\n`;\n","/**\n * AccountSecurityDetails is only displayed when user is enrolled in the 2fa method.\n * It displays created + last used time of the 2fa method.\n *\n * Also displays 2fa method specific details.\n */\nimport {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport Button from 'app/components/button';\nimport CircleIndicator from 'app/components/circleIndicator';\nimport DateTime from 'app/components/dateTime';\nimport Tooltip from 'app/components/tooltip';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Authenticator, AuthenticatorDevice} from 'app/types';\nimport AsyncView from 'app/views/asyncView';\nimport RecoveryCodes from 'app/views/settings/account/accountSecurity/components/recoveryCodes';\nimport RemoveConfirm from 'app/views/settings/account/accountSecurity/components/removeConfirm';\nimport U2fEnrolledDetails from 'app/views/settings/account/accountSecurity/components/u2fEnrolledDetails';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nconst ENDPOINT = '/users/me/authenticators/';\n\ntype AuthenticatorDateProps = {\n  label: string;\n  /**\n   * Can be null or a Date object.\n   * Component will have value \"never\" if it is null\n   */\n  date: string | null;\n};\n\nfunction AuthenticatorDate({label, date}: AuthenticatorDateProps) {\n  return (\n    <Fragment>\n      <DateLabel>{label}</DateLabel>\n      <div>{date ? <DateTime date={date} /> : t('never')}</div>\n    </Fragment>\n  );\n}\n\ntype Props = {\n  deleteDisabled: boolean;\n  onRegenerateBackupCodes: () => void;\n} & RouteComponentProps<{authId: string}, {}>;\n\ntype State = {\n  authenticator: Authenticator | null;\n} & AsyncView['state'];\n\nclass AccountSecurityDetails extends AsyncView<Props, State> {\n  getTitle() {\n    return t('Security');\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {params} = this.props;\n    const {authId} = params;\n\n    return [['authenticator', `${ENDPOINT}${authId}/`]];\n  }\n\n  handleRemove = async (device?: AuthenticatorDevice) => {\n    const {authenticator} = this.state;\n\n    if (!authenticator || !authenticator.authId) {\n      return;\n    }\n\n    // if the device is defined, it means that U2f is being removed\n    const deviceId = device ? `${device.key_handle}/` : '';\n    const deviceName = device ? device.name : t('Authenticator');\n\n    this.setState({loading: true});\n\n    try {\n      await this.api.requestPromise(`${ENDPOINT}${authenticator.authId}/${deviceId}`, {\n        method: 'DELETE',\n      });\n      this.props.router.push('/settings/account/security');\n      addSuccessMessage(t('%s has been removed', deviceName));\n    } catch {\n      // Error deleting authenticator\n      this.setState({loading: false});\n      addErrorMessage(t('Error removing %s', deviceName));\n    }\n  };\n\n  renderBody() {\n    const {authenticator} = this.state;\n\n    if (!authenticator) {\n      return null;\n    }\n\n    const {deleteDisabled, onRegenerateBackupCodes} = this.props;\n\n    return (\n      <Fragment>\n        <SettingsPageHeader\n          title={\n            <Fragment>\n              <span>{authenticator.name}</span>\n              <AuthenticatorStatus enabled={authenticator.isEnrolled} />\n            </Fragment>\n          }\n          action={\n            <AuthenticatorActions>\n              {authenticator.isEnrolled && authenticator.allowRotationInPlace && (\n                <Button to={`/settings/account/security/mfa/${authenticator.id}/enroll/`}>\n                  {t('Rotate Secret Key')}\n                </Button>\n              )}\n              {authenticator.isEnrolled && authenticator.removeButton && (\n                <Tooltip\n                  title={t(\n                    \"Two-factor authentication is required for at least one organization you're a member of.\"\n                  )}\n                  disabled={!deleteDisabled}\n                >\n                  <RemoveConfirm onConfirm={this.handleRemove} disabled={deleteDisabled}>\n                    <Button priority=\"danger\">{authenticator.removeButton}</Button>\n                  </RemoveConfirm>\n                </Tooltip>\n              )}\n            </AuthenticatorActions>\n          }\n        />\n\n        <TextBlock>{authenticator.description}</TextBlock>\n\n        <AuthenticatorDates>\n          <AuthenticatorDate label={t('Created at')} date={authenticator.createdAt} />\n          <AuthenticatorDate label={t('Last used')} date={authenticator.lastUsedAt} />\n        </AuthenticatorDates>\n\n        <U2fEnrolledDetails\n          isEnrolled={authenticator.isEnrolled}\n          id={authenticator.id}\n          devices={authenticator.devices}\n          onRemoveU2fDevice={this.handleRemove}\n        />\n\n        {authenticator.isEnrolled && authenticator.phone && (\n          <PhoneWrapper>\n            {t('Confirmation codes are sent to the following phone number')}:\n            <Phone>{authenticator.phone}</Phone>\n          </PhoneWrapper>\n        )}\n\n        <RecoveryCodes\n          onRegenerateBackupCodes={onRegenerateBackupCodes}\n          isEnrolled={authenticator.isEnrolled}\n          codes={authenticator.codes}\n        />\n      </Fragment>\n    );\n  }\n}\n\nexport default AccountSecurityDetails;\n\nconst AuthenticatorStatus = styled(CircleIndicator)`\n  margin-left: ${space(1)};\n`;\n\nconst AuthenticatorActions = styled('div')`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  > * {\n    margin-left: ${space(1)};\n  }\n`;\n\nconst AuthenticatorDates = styled('div')`\n  display: grid;\n  grid-gap: ${space(2)};\n  grid-template-columns: max-content auto;\n`;\n\nconst DateLabel = styled('span')`\n  font-weight: bold;\n`;\n\nconst PhoneWrapper = styled('div')`\n  margin-top: ${space(4)};\n`;\n\nconst Phone = styled('span')`\n  font-weight: bold;\n  margin-left: ${space(1)};\n`;\n","import styled from '@emotion/styled';\n\nconst ConfirmHeader = styled('div')`\n  font-size: 1.2em;\n  margin-bottom: 10px;\n`;\n\nexport default ConfirmHeader;\n","import * as React from 'react';\n\nimport Confirm from 'app/components/confirm';\nimport {t} from 'app/locale';\nimport ConfirmHeader from 'app/views/settings/account/accountSecurity/components/confirmHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype Props = React.ComponentProps<typeof Confirm>;\n\nconst message = (\n  <React.Fragment>\n    <ConfirmHeader>{t('Do you want to remove this method?')}</ConfirmHeader>\n    <TextBlock>\n      {t(\n        'Removing the last authentication method will disable two-factor authentication completely.'\n      )}\n    </TextBlock>\n  </React.Fragment>\n);\n\nconst RemoveConfirm = (props: Props) => <Confirm {...props} message={message} />;\n\nexport default RemoveConfirm;\n"],"names":["AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","RecoveryCodes","className","isEnrolled","codes","onRegenerateBackupCodes","formattedCodes","join","CodeContainer","hasButtons","t","Actions","hideUnsupported","value","size","label","onClick","iframe","window","frames","document","write","print","close","download","href","onConfirm","message","priority","type","length","map","code","Code","name","style","display","Panel","space","PanelItem","p","theme","text","familyMono","U2fEnrolledDetails","devices","id","onRemoveU2fDevice","hasDevices","isLastDevice","device","DevicePanelItem","DeviceInformation","Name","FadedDateTime","date","timestamp","disabled","Fragment","AddAnotherPanelItem","to","DateTime","fontSizeRelativeSmall","ENDPOINT","AuthenticatorDate","DateLabel","AccountSecurityDetails","async","authenticator","state","authId","deviceId","key_handle","deviceName","setState","loading","api","requestPromise","method","props","router","push","addSuccessMessage","addErrorMessage","getEndpoints","params","renderBody","deleteDisabled","AuthenticatorStatus","enabled","action","AuthenticatorActions","allowRotationInPlace","removeButton","handleRemove","description","AuthenticatorDates","createdAt","lastUsedAt","phone","PhoneWrapper","Phone","CircleIndicator","RemoveConfirm"],"sourceRoot":""}