{"version":3,"file":"chunks/app_views_settings_project_projectSettingsLayout_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/projects/appStoreConnectContext/index.tsx","webpack:///./app/components/projects/appStoreConnectContext/utils.tsx","webpack:///./app/views/projects/projectContext.tsx","webpack:///./app/views/settings/project/projectSettingsNavigation.tsx","webpack:///./app/views/settings/project/projectSettingsLayout.tsx"],"sourcesContent":["import {createContext, useEffect, useState} from 'react';\n\nimport {Organization, Project} from 'app/types';\nimport {AppStoreConnectValidationData} from 'app/types/debugFiles';\nimport useApi from 'app/utils/useApi';\n\nexport type AppStoreConnectContextProps = AppStoreConnectValidationData | undefined;\n\nconst AppStoreConnectContext = createContext<AppStoreConnectContextProps>(undefined);\n\nimport {getAppConnectStoreUpdateAlertMessage} from './utils';\n\ntype ProviderProps = {\n  children: React.ReactNode;\n  organization: Organization;\n  project?: Project;\n};\n\nconst Provider = ({children, project, organization}: ProviderProps) => {\n  const api = useApi();\n\n  const [projectDetails, setProjectDetails] = useState<undefined | Project>();\n  const [appStoreConnectValidationData, setAppStoreConnectValidationData] =\n    useState<AppStoreConnectContextProps>(undefined);\n\n  const orgSlug = organization.slug;\n\n  useEffect(() => {\n    fetchProjectDetails();\n  }, [project]);\n\n  useEffect(() => {\n    fetchAppStoreConnectValidationData();\n  }, [projectDetails]);\n\n  async function fetchProjectDetails() {\n    if (!project || projectDetails) {\n      return;\n    }\n\n    if (project.symbolSources) {\n      setProjectDetails(project);\n      return;\n    }\n\n    try {\n      const response = await api.requestPromise(`/projects/${orgSlug}/${project.slug}/`);\n      setProjectDetails(response);\n    } catch {\n      // do nothing\n    }\n  }\n\n  function getAppStoreConnectSymbolSourceId(symbolSources?: string) {\n    return (symbolSources ? JSON.parse(symbolSources) : []).find(\n      symbolSource => symbolSource.type.toLowerCase() === 'appstoreconnect'\n    )?.id;\n  }\n\n  async function fetchAppStoreConnectValidationData() {\n    if (!projectDetails) {\n      return;\n    }\n\n    const appStoreConnectSymbolSourceId = getAppStoreConnectSymbolSourceId(\n      projectDetails.symbolSources\n    );\n\n    if (!appStoreConnectSymbolSourceId) {\n      return;\n    }\n\n    try {\n      const response = await api.requestPromise(\n        `/projects/${orgSlug}/${projectDetails.slug}/appstoreconnect/validate/${appStoreConnectSymbolSourceId}/`\n      );\n      setAppStoreConnectValidationData({\n        id: appStoreConnectSymbolSourceId,\n        ...response,\n      });\n    } catch {\n      // do nothing\n    }\n  }\n\n  return (\n    <AppStoreConnectContext.Provider\n      value={\n        appStoreConnectValidationData\n          ? {\n              ...appStoreConnectValidationData,\n              updateAlertMessage: getAppConnectStoreUpdateAlertMessage(\n                appStoreConnectValidationData\n              ),\n            }\n          : undefined\n      }\n    >\n      {children}\n    </AppStoreConnectContext.Provider>\n  );\n};\n\nconst Consumer = AppStoreConnectContext.Consumer;\n\nexport {Provider, Consumer};\n\nexport default AppStoreConnectContext;\n","import {t} from 'app/locale';\nimport {AppStoreConnectValidationData} from 'app/types/debugFiles';\n\nexport const appStoreConnectAlertMessage = {\n  iTunesSessionInvalid: t(\n    'The iTunes session of your configured App Store Connect needs to be refreshed.'\n  ),\n  appStoreCredentialsInvalid: t(\n    'The credentials of your configured App Store Connect are invalid.'\n  ),\n};\n\nexport function getAppConnectStoreUpdateAlertMessage(\n  appConnectValidationData: AppStoreConnectValidationData\n) {\n  if (appConnectValidationData.promptItunesSession) {\n    return appStoreConnectAlertMessage.iTunesSessionInvalid;\n  }\n  if (appConnectValidationData.appstoreCredentialsValid === false) {\n    return appStoreConnectAlertMessage.appStoreCredentialsInvalid;\n  }\n  return undefined;\n}\n","import {Component, createRef} from 'react';\nimport DocumentTitle from 'react-document-title';\nimport styled from '@emotion/styled';\n\nimport {fetchOrgMembers} from 'app/actionCreators/members';\nimport {setActiveProject} from 'app/actionCreators/projects';\nimport {Client} from 'app/api';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport MissingProjectMembership from 'app/components/projects/missingProjectMembership';\nimport {t} from 'app/locale';\nimport SentryTypes from 'app/sentryTypes';\nimport MemberListStore from 'app/stores/memberListStore';\nimport ProjectsStore from 'app/stores/projectsStore';\nimport space from 'app/styles/space';\nimport {Organization, Project, User} from 'app/types';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\nimport withProjects from 'app/utils/withProjects';\n\nenum ErrorTypes {\n  MISSING_MEMBERSHIP = 'MISSING_MEMBERSHIP',\n  PROJECT_NOT_FOUND = 'PROJECT_NOT_FOUND',\n  UNKNOWN = 'UNKNOWN',\n}\n\ntype ChildFuncProps = {\n  project: Project;\n};\n\ntype Props = {\n  api: Client;\n  /**\n   * If true, this will not change `state.loading` during `fetchData` phase\n   */\n  skipReload?: boolean;\n  organization: Organization;\n  projects: Project[];\n  projectId: string;\n  orgId: string;\n  children: ((props: ChildFuncProps) => React.ReactNode) | React.ReactNode;\n  loadingProjects: boolean;\n};\n\ntype State = {\n  memberList: User[];\n  project: Project | null;\n  loading: boolean;\n  error: boolean;\n  errorType: ErrorTypes | null;\n};\n\n/**\n * Higher-order component that sets `project` as a child context\n * value to be accessed by child elements.\n *\n * Additionally delays rendering of children until project XHR has finished\n * and context is populated.\n */\nclass ProjectContext extends Component<Props, State> {\n  static childContextTypes = {\n    project: SentryTypes.Project,\n  };\n\n  state = this.getInitialState();\n\n  getInitialState(): State {\n    return {\n      loading: true,\n      error: false,\n      errorType: null,\n      memberList: [],\n      project: null,\n    };\n  }\n\n  getChildContext() {\n    return {\n      project: this.state.project,\n    };\n  }\n\n  componentDidMount() {\n    // Wait for withProjects to fetch projects before making request\n    // Once loaded we can fetchData in componentDidUpdate\n    const {loadingProjects} = this.props;\n    if (!loadingProjects) {\n      this.fetchData();\n    }\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (nextProps.projectId === this.props.projectId) {\n      return;\n    }\n\n    if (!nextProps.skipReload) {\n      this.remountComponent();\n    }\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (prevProps.projectId !== this.props.projectId) {\n      this.fetchData();\n    }\n\n    // Project list has changed. Likely indicating that a new project has been\n    // added. Re-fetch project details in case that the new project is the active\n    // project.\n    //\n    // For now, only compare lengths. It is possible that project slugs within\n    // the list could change, but it doesn't seem to be broken anywhere else at\n    // the moment that would require deeper checks.\n    if (prevProps.projects.length !== this.props.projects.length) {\n      this.fetchData();\n    }\n\n    // Call forceUpdate() on <DocumentTitle/> if either project or organization\n    // state has changed. This is because <DocumentTitle/>'s shouldComponentUpdate()\n    // returns false unless props differ; meaning context changes for project/org\n    // do NOT trigger renders for <DocumentTitle/> OR any subchildren. The end result\n    // being that child elements that listen for context changes on project/org will\n    // NOT update (without this hack).\n    // See: https://github.com/gaearon/react-document-title/issues/35\n\n    // intentionally shallow comparing references\n    if (prevState.project !== this.state.project) {\n      const docTitle = this.docTitleRef.current;\n      if (!docTitle) {\n        return;\n      }\n      docTitle.forceUpdate();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeMembers();\n    this.unsubscribeProjects();\n  }\n\n  docTitleRef = createRef<DocumentTitle>();\n\n  unsubscribeProjects = ProjectsStore.listen(\n    (projectIds: Set<string>) => this.onProjectChange(projectIds),\n    undefined\n  );\n\n  unsubscribeMembers = MemberListStore.listen(\n    (memberList: typeof MemberListStore['state']) => this.setState({memberList}),\n    undefined\n  );\n\n  remountComponent() {\n    this.setState(this.getInitialState());\n  }\n\n  getTitle() {\n    return this.state.project?.slug ?? 'Sentry';\n  }\n\n  onProjectChange(projectIds: Set<string>) {\n    if (!this.state.project) {\n      return;\n    }\n    if (!projectIds.has(this.state.project.id)) {\n      return;\n    }\n    this.setState({\n      project: {...ProjectsStore.getById(this.state.project.id)} as Project,\n    });\n  }\n\n  identifyProject() {\n    const {projects, projectId} = this.props;\n    const projectSlug = projectId;\n    return projects.find(({slug}) => slug === projectSlug) || null;\n  }\n\n  async fetchData() {\n    const {orgId, projectId, skipReload} = this.props;\n    // we fetch core access/information from the global organization data\n    const activeProject = this.identifyProject();\n    const hasAccess = activeProject && activeProject.hasAccess;\n\n    this.setState((state: State) => ({\n      // if `skipReload` is true, then don't change loading state\n      loading: skipReload ? state.loading : true,\n      // we bind project initially, but it'll rebind\n      project: activeProject,\n    }));\n\n    if (activeProject && hasAccess) {\n      setActiveProject(null);\n      const projectRequest = this.props.api.requestPromise(\n        `/projects/${orgId}/${projectId}/`\n      );\n\n      try {\n        const project = await projectRequest;\n        this.setState({\n          loading: false,\n          project,\n          error: false,\n          errorType: null,\n        });\n\n        // assuming here that this means the project is considered the active project\n        setActiveProject(project);\n      } catch (error) {\n        this.setState({\n          loading: false,\n          error: false,\n          errorType: ErrorTypes.UNKNOWN,\n        });\n      }\n\n      fetchOrgMembers(this.props.api, orgId, [activeProject.id]);\n\n      return;\n    }\n\n    // User is not a memberof the active project\n    if (activeProject && !activeProject.isMember) {\n      this.setState({\n        loading: false,\n        error: true,\n        errorType: ErrorTypes.MISSING_MEMBERSHIP,\n      });\n\n      return;\n    }\n\n    // There is no active project. This likely indicates either the project\n    // *does not exist* or the project has not yet been added to the store.\n    // Either way, make a request to check for existence of the project.\n    try {\n      await this.props.api.requestPromise(`/projects/${orgId}/${projectId}/`);\n    } catch (error) {\n      this.setState({\n        loading: false,\n        error: true,\n        errorType: ErrorTypes.PROJECT_NOT_FOUND,\n      });\n    }\n  }\n\n  renderBody() {\n    const {children, organization} = this.props;\n    const {error, errorType, loading, project} = this.state;\n\n    if (loading) {\n      return (\n        <div className=\"loading-full-layout\">\n          <LoadingIndicator />\n        </div>\n      );\n    }\n\n    if (!error && project) {\n      return typeof children === 'function' ? children({project}) : children;\n    }\n\n    switch (errorType) {\n      case ErrorTypes.PROJECT_NOT_FOUND:\n        // TODO(chrissy): use scale for margin values\n        return (\n          <div className=\"container\">\n            <div className=\"alert alert-block\" style={{margin: '30px 0 10px'}}>\n              {t('The project you were looking for was not found.')}\n            </div>\n          </div>\n        );\n      case ErrorTypes.MISSING_MEMBERSHIP:\n        // TODO(dcramer): add various controls to improve this flow and break it\n        // out into a reusable missing access error component\n        return (\n          <ErrorWrapper>\n            <MissingProjectMembership organization={organization} project={project} />\n          </ErrorWrapper>\n        );\n      default:\n        return <LoadingError onRetry={this.remountComponent} />;\n    }\n  }\n\n  render() {\n    return (\n      <DocumentTitle ref={this.docTitleRef} title={this.getTitle()}>\n        {this.renderBody()}\n      </DocumentTitle>\n    );\n  }\n}\n\nexport {ProjectContext};\n\nexport default withApi(withOrganization(withProjects(ProjectContext)));\n\nconst ErrorWrapper = styled('div')`\n  width: 100%;\n  margin: ${space(2)} ${space(4)};\n`;\n","import {useContext} from 'react';\n\nimport AppStoreConnectContext from 'app/components/projects/appStoreConnectContext';\nimport {Organization, Project} from 'app/types';\nimport withProject from 'app/utils/withProject';\nimport SettingsNavigation from 'app/views/settings/components/settingsNavigation';\nimport getConfiguration from 'app/views/settings/project/navigationConfiguration';\n\ntype Props = {\n  organization: Organization;\n  project?: Project;\n};\n\nconst ProjectSettingsNavigation = ({organization, project}: Props) => {\n  const appStoreConnectContext = useContext(AppStoreConnectContext);\n\n  const debugFilesNeedsReview = !!appStoreConnectContext?.updateAlertMessage;\n\n  return (\n    <SettingsNavigation\n      navigationObjects={getConfiguration({project, organization, debugFilesNeedsReview})}\n      access={new Set(organization.access)}\n      features={new Set(organization.features)}\n      organization={organization}\n      project={project}\n    />\n  );\n};\n\nexport default withProject(ProjectSettingsNavigation);\n","import * as React from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport * as AppStoreConnectContext from 'app/components/projects/appStoreConnectContext';\nimport {Organization} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\nimport ProjectContext from 'app/views/projects/projectContext';\nimport SettingsLayout from 'app/views/settings/components/settingsLayout';\nimport ProjectSettingsNavigation from 'app/views/settings/project/projectSettingsNavigation';\n\ntype Props = {\n  organization: Organization;\n  children: React.ReactNode;\n} & RouteComponentProps<{orgId: string; projectId: string}, {}>;\n\nfunction ProjectSettingsLayout({\n  params,\n  organization,\n  children,\n  routes,\n  ...props\n}: Props) {\n  const {orgId, projectId} = params;\n\n  return (\n    <ProjectContext orgId={orgId} projectId={projectId}>\n      {({project}) => (\n        <AppStoreConnectContext.Provider project={project} organization={organization}>\n          <SettingsLayout\n            params={params}\n            routes={routes}\n            {...props}\n            renderNavigation={() => (\n              <ProjectSettingsNavigation organization={organization} />\n            )}\n          >\n            {children && React.isValidElement(children)\n              ? React.cloneElement(children, {\n                  organization,\n                  project,\n                })\n              : children}\n          </SettingsLayout>\n        </AppStoreConnectContext.Provider>\n      )}\n    </ProjectContext>\n  );\n}\n\nexport default withOrganization(ProjectSettingsLayout);\n"],"names":["AppStoreConnectContext","createContext","undefined","Provider","children","project","organization","api","useApi","projectDetails","setProjectDetails","useState","appStoreConnectValidationData","setAppStoreConnectValidationData","orgSlug","slug","useEffect","async","symbolSources","response","requestPromise","fetchProjectDetails","appStoreConnectSymbolSourceId","JSON","parse","find","symbolSource","type","toLowerCase","id","fetchAppStoreConnectValidationData","value","updateAlertMessage","getAppConnectStoreUpdateAlertMessage","Consumer","appStoreConnectAlertMessage","iTunesSessionInvalid","t","appStoreCredentialsInvalid","appConnectValidationData","promptItunesSession","appstoreCredentialsValid","ErrorTypes","ProjectContext","Component","this","getInitialState","createRef","ProjectsStore","projectIds","onProjectChange","MemberListStore","memberList","setState","loading","error","errorType","getChildContext","state","componentDidMount","loadingProjects","props","fetchData","componentWillReceiveProps","nextProps","projectId","skipReload","remountComponent","componentDidUpdate","prevProps","prevState","projects","length","docTitle","docTitleRef","current","forceUpdate","componentWillUnmount","unsubscribeMembers","unsubscribeProjects","getTitle","has","identifyProject","projectSlug","orgId","activeProject","hasAccess","setActiveProject","projectRequest","UNKNOWN","fetchOrgMembers","isMember","PROJECT_NOT_FOUND","MISSING_MEMBERSHIP","renderBody","className","style","margin","ErrorWrapper","onRetry","render","ref","title","SentryTypes","withApi","withOrganization","withProjects","space","ProjectSettingsNavigation","appStoreConnectContext","useContext","debugFilesNeedsReview","navigationObjects","getConfiguration","access","Set","features","withProject","ProjectSettingsLayout","params","routes","renderNavigation","React"],"sourceRoot":""}