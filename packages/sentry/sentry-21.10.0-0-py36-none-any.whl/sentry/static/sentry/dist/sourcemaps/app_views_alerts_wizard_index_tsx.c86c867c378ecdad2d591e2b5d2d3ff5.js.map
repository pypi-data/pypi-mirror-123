{"version":3,"file":"chunks/app_views_alerts_wizard_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/utils/isActiveSuperuser.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/views/alerts/builder/builderBreadCrumbs.tsx","webpack:///./app/views/alerts/wizard/radioPanelGroup.tsx","webpack:///./app/views/alerts/wizard/index.tsx","webpack:///./app/views/alerts/wizard/options.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/menuItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype Props = {\n  // Main page title\n  title: string;\n  orgSlug?: string;\n  projectSlug?: string;\n  children?: React.ReactNode;\n};\n\nfunction SentryDocumentTitle({title, orgSlug, projectSlug, children}: Props) {\n  function getDocTitle() {\n    if (!orgSlug && !projectSlug) {\n      return title;\n    }\n\n    if (orgSlug && projectSlug) {\n      return `${title} - ${orgSlug} - ${projectSlug}`;\n    }\n\n    if (orgSlug) {\n      return `${title} - ${orgSlug}`;\n    }\n\n    return `${title} - ${projectSlug}`;\n  }\n\n  const docTitle = getDocTitle();\n\n  return (\n    <DocumentTitle title={`${docTitle} - Sentry`}>\n      {children as React.ReactChild}\n    </DocumentTitle>\n  );\n}\n\nexport default SentryDocumentTitle;\n","import Cookies from 'js-cookie';\n\nimport ConfigStore from 'app/stores/configStore';\n\nconst SUPERUSER_COOKIE_NAME = 'su';\n\n/**\n * Checking for just isSuperuser on a config object may not be enough as backend often checks for *active* superuser.\n * We therefore check both isSuperuser flag AND superuser session cookie.\n */\nexport function isActiveSuperuser() {\n  const {isSuperuser} = ConfigStore.get('user') || {};\n\n  if (isSuperuser) {\n    /**\n     * Superuser cookie cannot be checked for existence as it is HttpOnly.\n     * As a workaround, we try to change it to something else and if that fails we can assume that it's being present.\n     * There may be an edgecase where it's present and expired but for current usage it's not a big deal.\n     */\n    Cookies.set(SUPERUSER_COOKIE_NAME, 'test');\n\n    if (Cookies.get(SUPERUSER_COOKIE_NAME) === undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport {RouteWithName} from 'app/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  routes: RouteWithName[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport Breadcrumbs, {Crumb, CrumbDropdown} from 'app/components/breadcrumbs';\nimport IdBadge from 'app/components/idBadge';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Project} from 'app/types';\nimport {isActiveSuperuser} from 'app/utils/isActiveSuperuser';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport withProjects from 'app/utils/withProjects';\nimport MenuItem from 'app/views/settings/components/settingsBreadcrumb/menuItem';\nimport {RouteWithName} from 'app/views/settings/components/settingsBreadcrumb/types';\n\ntype Props = {\n  orgSlug: string;\n  title: string;\n  projectSlug: string;\n  projects: Project[];\n  routes: RouteWithName[];\n  location: Location;\n  alertName?: string;\n  canChangeProject?: boolean;\n};\n\nfunction BuilderBreadCrumbs(props: Props) {\n  const {\n    orgSlug,\n    title,\n    alertName,\n    projectSlug,\n    projects,\n    routes,\n    canChangeProject,\n    location,\n  } = props;\n  const project = projects.find(({slug}) => projectSlug === slug);\n  const isSuperuser = isActiveSuperuser();\n\n  const projectCrumbLink = {\n    to: `/organizations/${orgSlug}/alerts/rules/?project=${project?.id}`,\n    label: <IdBadge project={project} avatarSize={18} disableLink />,\n    preserveGlobalSelection: true,\n  };\n  const projectCrumbDropdown = {\n    onSelect: ({value}) => {\n      browserHistory.push(\n        recreateRoute('', {\n          routes,\n          params: {orgId: orgSlug, projectId: value},\n          location,\n        })\n      );\n    },\n    label: <IdBadge project={project} avatarSize={18} disableLink />,\n    items: projects\n      .filter(proj => proj.isMember || isSuperuser)\n      .map((proj, index) => ({\n        index,\n        value: proj.slug,\n        label: (\n          <MenuItem>\n            <IdBadge\n              project={proj}\n              avatarProps={{consistentWidth: true}}\n              avatarSize={18}\n              disableLink\n            />\n          </MenuItem>\n        ),\n        searchKey: proj.slug,\n      })),\n  };\n  const projectCrumb = canChangeProject ? projectCrumbDropdown : projectCrumbLink;\n\n  const crumbs: (Crumb | CrumbDropdown)[] = [\n    {\n      to: `/organizations/${orgSlug}/alerts/rules/`,\n      label: t('Alerts'),\n      preserveGlobalSelection: true,\n    },\n    projectCrumb,\n    {\n      label: title,\n      ...(alertName\n        ? {\n            to: `/organizations/${orgSlug}/alerts/${projectSlug}/wizard`,\n            preserveGlobalSelection: true,\n          }\n        : {}),\n    },\n  ];\n  if (alertName) {\n    crumbs.push({label: alertName});\n  }\n\n  return <StyledBreadcrumbs crumbs={crumbs} />;\n}\n\nconst StyledBreadcrumbs = styled(Breadcrumbs)`\n  font-size: 18px;\n  margin-bottom: ${space(3)};\n`;\n\nexport default withProjects(BuilderBreadCrumbs);\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport Radio from 'app/components/radio';\nimport space from 'app/styles/space';\n\ntype RadioPanelGroupProps<C extends string> = {\n  label: string;\n  /**\n   * An array of [id, name]\n   */\n  choices: [C, React.ReactNode, React.ReactNode?][];\n  value: string | null;\n  onChange: (id: C, e: React.FormEvent<HTMLInputElement>) => void;\n};\n\ntype Props<C extends string> = RadioPanelGroupProps<C> &\n  Omit<React.HTMLAttributes<HTMLDivElement>, keyof RadioPanelGroupProps<C>>;\n\nconst RadioPanelGroup = <C extends string>({\n  value,\n  choices,\n  label,\n  onChange,\n  ...props\n}: Props<C>) => (\n  <Container {...props} role=\"radiogroup\" aria-labelledby={label}>\n    {(choices || []).map(([id, name, extraContent], index) => (\n      <RadioPanel key={index}>\n        <RadioLineItem role=\"radio\" index={index} aria-checked={value === id}>\n          <Radio\n            radioSize=\"small\"\n            aria-label={id}\n            checked={value === id}\n            onChange={(e: React.FormEvent<HTMLInputElement>) => onChange(id, e)}\n          />\n          <div>{name}</div>\n          {extraContent}\n        </RadioLineItem>\n      </RadioPanel>\n    ))}\n  </Container>\n);\n\nexport default RadioPanelGroup;\n\nconst Container = styled('div')`\n  display: grid;\n  grid-gap: ${space(1)};\n  grid-auto-flow: row;\n  grid-auto-rows: max-content;\n  grid-auto-columns: auto;\n`;\n\nconst RadioLineItem = styled('label')<{\n  index: number;\n}>`\n  display: grid;\n  grid-gap: ${space(0.25)} ${space(1)};\n  grid-template-columns: max-content auto max-content;\n  align-items: center;\n  cursor: pointer;\n  outline: none;\n  font-weight: normal;\n  margin: 0;\n  color: ${p => p.theme.subText};\n  transition: color 0.3s ease-in;\n  padding: 0;\n  position: relative;\n\n  &:hover,\n  &:focus {\n    color: ${p => p.theme.textColor};\n  }\n\n  svg {\n    display: none;\n    opacity: 0;\n  }\n\n  &[aria-checked='true'] {\n    color: ${p => p.theme.textColor};\n  }\n`;\n\nconst RadioPanel = styled('div')`\n  margin: 0;\n`;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Feature from 'app/components/acl/feature';\nimport FeatureDisabled from 'app/components/acl/featureDisabled';\nimport CreateAlertButton from 'app/components/createAlertButton';\nimport Hovercard from 'app/components/hovercard';\nimport * as Layout from 'app/components/layouts/thirds';\nimport ExternalLink from 'app/components/links/externalLink';\nimport List from 'app/components/list';\nimport ListItem from 'app/components/list/listItem';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport BuilderBreadCrumbs from 'app/views/alerts/builder/builderBreadCrumbs';\nimport {Dataset} from 'app/views/alerts/incidentRules/types';\n\nimport {\n  AlertType,\n  AlertWizardAlertNames,\n  AlertWizardPanelContent,\n  AlertWizardRuleTemplates,\n  getAlertWizardCategories,\n} from './options';\nimport RadioPanelGroup from './radioPanelGroup';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n  project: Project;\n};\n\ntype State = {\n  alertOption: AlertType;\n};\n\nconst DEFAULT_ALERT_OPTION = 'issues';\n\nclass AlertWizard extends Component<Props, State> {\n  state: State = {\n    alertOption: DEFAULT_ALERT_OPTION,\n  };\n\n  componentDidMount() {\n    // capture landing on the alert wizard page and viewing the issue alert by default\n    const {organization} = this.props;\n    trackAnalyticsEvent({\n      eventKey: 'alert_wizard.option_viewed',\n      eventName: 'Alert Wizard: Option Viewed',\n      organization_id: organization.id,\n      alert_type: DEFAULT_ALERT_OPTION,\n    });\n  }\n\n  handleChangeAlertOption = (alertOption: AlertType) => {\n    const {organization} = this.props;\n    this.setState({alertOption});\n    trackAnalyticsEvent({\n      eventKey: 'alert_wizard.option_viewed',\n      eventName: 'Alert Wizard: Option Viewed',\n      organization_id: organization.id,\n      alert_type: alertOption,\n    });\n  };\n\n  renderCreateAlertButton() {\n    const {\n      organization,\n      location,\n      params: {projectId},\n    } = this.props;\n    const {alertOption} = this.state;\n    const metricRuleTemplate = AlertWizardRuleTemplates[alertOption];\n    const isMetricAlert = !!metricRuleTemplate;\n    const isTransactionDataset = metricRuleTemplate?.dataset === Dataset.TRANSACTIONS;\n\n    const to = {\n      pathname: `/organizations/${organization.slug}/alerts/${projectId}/new/`,\n      query: {\n        ...(metricRuleTemplate && metricRuleTemplate),\n        createFromWizard: true,\n        referrer: location?.query?.referrer,\n      },\n    };\n\n    const noFeatureMessage = t('Requires incidents feature.');\n    const renderNoAccess = p => (\n      <Hovercard\n        body={\n          <FeatureDisabled\n            features={p.features}\n            hideHelpToggle\n            message={noFeatureMessage}\n            featureName={noFeatureMessage}\n          />\n        }\n      >\n        {p.children(p)}\n      </Hovercard>\n    );\n\n    return (\n      <Feature\n        features={\n          isTransactionDataset\n            ? ['incidents', 'performance-view']\n            : isMetricAlert\n            ? ['incidents']\n            : []\n        }\n        requireAll\n        organization={organization}\n        hookName=\"feature-disabled:alert-wizard-performance\"\n        renderDisabled={renderNoAccess}\n      >\n        {({hasFeature}) => (\n          <WizardButtonContainer\n            onClick={() =>\n              trackAnalyticsEvent({\n                eventKey: 'alert_wizard.option_selected',\n                eventName: 'Alert Wizard: Option Selected',\n                organization_id: organization.id,\n                alert_type: alertOption,\n              })\n            }\n          >\n            <CreateAlertButton\n              organization={organization}\n              projectSlug={projectId}\n              disabled={!hasFeature}\n              priority=\"primary\"\n              to={to}\n              hideIcon\n            >\n              {t('Set Conditions')}\n            </CreateAlertButton>\n          </WizardButtonContainer>\n        )}\n      </Feature>\n    );\n  }\n\n  render() {\n    const {\n      organization,\n      params: {projectId},\n      routes,\n      location,\n    } = this.props;\n    const {alertOption} = this.state;\n    const title = t('Alert Creation Wizard');\n    const panelContent = AlertWizardPanelContent[alertOption];\n    return (\n      <Fragment>\n        <SentryDocumentTitle title={title} projectSlug={projectId} />\n\n        <Layout.Header>\n          <StyledHeaderContent>\n            <BuilderBreadCrumbs\n              orgSlug={organization.slug}\n              projectSlug={projectId}\n              title={t('Select Alert')}\n              routes={routes}\n              location={location}\n              canChangeProject\n            />\n            <Layout.Title>{t('Select Alert')}</Layout.Title>\n          </StyledHeaderContent>\n        </Layout.Header>\n        <StyledLayoutBody>\n          <Layout.Main fullWidth>\n            <WizardBody>\n              <WizardOptions>\n                <CategoryTitle>{t('Errors')}</CategoryTitle>\n                {getAlertWizardCategories(organization).map(\n                  ({categoryHeading, options}, i) => (\n                    <OptionsWrapper key={categoryHeading}>\n                      {i > 0 && <CategoryTitle>{categoryHeading}</CategoryTitle>}\n                      <RadioPanelGroup\n                        choices={options.map(alertType => {\n                          return [alertType, AlertWizardAlertNames[alertType]];\n                        })}\n                        onChange={this.handleChangeAlertOption}\n                        value={alertOption}\n                        label=\"alert-option\"\n                      />\n                    </OptionsWrapper>\n                  )\n                )}\n              </WizardOptions>\n              <WizardPanel visible={!!panelContent && !!alertOption}>\n                <WizardPanelBody>\n                  <div>\n                    <PanelHeader>{AlertWizardAlertNames[alertOption]}</PanelHeader>\n                    <PanelBody withPadding>\n                      <PanelDescription>\n                        {panelContent.description}{' '}\n                        {panelContent.docsLink && (\n                          <ExternalLink href={panelContent.docsLink}>\n                            {t('Learn more')}\n                          </ExternalLink>\n                        )}\n                      </PanelDescription>\n                      <WizardImage src={panelContent.illustration} />\n                      <ExampleHeader>{t('Examples')}</ExampleHeader>\n                      <ExampleList symbol=\"bullet\">\n                        {panelContent.examples.map((example, i) => (\n                          <ExampleItem key={i}>{example}</ExampleItem>\n                        ))}\n                      </ExampleList>\n                    </PanelBody>\n                  </div>\n                  <WizardFooter>{this.renderCreateAlertButton()}</WizardFooter>\n                </WizardPanelBody>\n              </WizardPanel>\n            </WizardBody>\n          </Layout.Main>\n        </StyledLayoutBody>\n      </Fragment>\n    );\n  }\n}\n\nconst StyledLayoutBody = styled(Layout.Body)`\n  margin-bottom: -${space(3)};\n`;\n\nconst StyledHeaderContent = styled(Layout.HeaderContent)`\n  overflow: visible;\n`;\n\nconst CategoryTitle = styled('h2')`\n  font-weight: normal;\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  margin-bottom: ${space(1)} !important;\n`;\n\nconst WizardBody = styled('div')`\n  display: flex;\n  padding-top: ${space(1)};\n`;\n\nconst WizardOptions = styled('div')`\n  flex: 3;\n  margin-right: ${space(3)};\n  padding-right: ${space(3)};\n  max-width: 300px;\n`;\n\nconst WizardImage = styled('img')`\n  max-height: 300px;\n`;\n\nconst WizardPanel = styled(Panel)<{visible?: boolean}>`\n  max-width: 700px;\n  position: sticky;\n  top: 20px;\n  flex: 5;\n  display: flex;\n  ${p => !p.visible && 'visibility: hidden'};\n  flex-direction: column;\n  align-items: start;\n  align-self: flex-start;\n  ${p => p.visible && 'animation: 0.6s pop ease forwards'};\n\n  @keyframes pop {\n    0% {\n      transform: translateY(30px);\n      opacity: 0;\n    }\n    100% {\n      transform: translateY(0);\n      opacity: 1;\n    }\n  }\n`;\n\nconst ExampleList = styled(List)`\n  margin-bottom: ${space(2)} !important;\n`;\n\nconst WizardPanelBody = styled(PanelBody)`\n  flex: 1;\n  min-width: 100%;\n`;\n\nconst PanelDescription = styled('p')`\n  margin-bottom: ${space(2)};\n`;\n\nconst ExampleHeader = styled('div')`\n  margin: 0 0 ${space(1)} 0;\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n\nconst ExampleItem = styled(ListItem)`\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst OptionsWrapper = styled('div')`\n  margin-bottom: ${space(4)};\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst WizardFooter = styled('div')`\n  border-top: 1px solid ${p => p.theme.border};\n  padding: ${space(1.5)} ${space(1.5)} ${space(1.5)} ${space(1.5)};\n`;\n\nconst WizardButtonContainer = styled('div')`\n  display: flex;\n  justify-content: flex-end;\n`;\n\nexport default AlertWizard;\n","import diagramApdex from 'sentry-images/spot/alerts-wizard-apdex.svg';\nimport diagramCLS from 'sentry-images/spot/alerts-wizard-cls.svg';\nimport diagramCrashFreeSessions from 'sentry-images/spot/alerts-wizard-crash-free-sessions.svg';\nimport diagramCrashFreeUsers from 'sentry-images/spot/alerts-wizard-crash-free-users.svg';\nimport diagramCustom from 'sentry-images/spot/alerts-wizard-custom.svg';\nimport diagramErrors from 'sentry-images/spot/alerts-wizard-errors.svg';\nimport diagramFailureRate from 'sentry-images/spot/alerts-wizard-failure-rate.svg';\nimport diagramFID from 'sentry-images/spot/alerts-wizard-fid.svg';\nimport diagramIssues from 'sentry-images/spot/alerts-wizard-issues.svg';\nimport diagramLCP from 'sentry-images/spot/alerts-wizard-lcp.svg';\nimport diagramThroughput from 'sentry-images/spot/alerts-wizard-throughput.svg';\nimport diagramTransactionDuration from 'sentry-images/spot/alerts-wizard-transaction-duration.svg';\nimport diagramUsers from 'sentry-images/spot/alerts-wizard-users-experiencing-errors.svg';\n\nimport {t} from 'app/locale';\nimport {Organization} from 'app/types';\nimport {\n  Dataset,\n  EventTypes,\n  SessionsAggregate,\n} from 'app/views/alerts/incidentRules/types';\n\nexport type AlertType =\n  | 'issues'\n  | 'num_errors'\n  | 'users_experiencing_errors'\n  | 'throughput'\n  | 'trans_duration'\n  | 'apdex'\n  | 'failure_rate'\n  | 'lcp'\n  | 'fid'\n  | 'cls'\n  | 'custom'\n  | 'crash_free_sessions'\n  | 'crash_free_users';\n\nexport const WebVitalAlertTypes = new Set(['lcp', 'fid', 'cls', 'fcp']);\n\nexport const AlertWizardAlertNames: Record<AlertType, string> = {\n  issues: t('Issues'),\n  num_errors: t('Number of Errors'),\n  users_experiencing_errors: t('Users Experiencing Errors'),\n  throughput: t('Throughput'),\n  trans_duration: t('Transaction Duration'),\n  apdex: t('Apdex'),\n  failure_rate: t('Failure Rate'),\n  lcp: t('Largest Contentful Paint'),\n  fid: t('First Input Delay'),\n  cls: t('Cumulative Layout Shift'),\n  custom: t('Custom Metric'),\n  crash_free_sessions: t('Crash Free Session Rate'),\n  crash_free_users: t('Crash Free User Rate'),\n};\n\ntype AlertWizardCategory = {categoryHeading: string; options: AlertType[]};\nexport const getAlertWizardCategories = (org: Organization): AlertWizardCategory[] => [\n  {\n    categoryHeading: t('Errors'),\n    options: ['issues', 'num_errors', 'users_experiencing_errors'],\n  },\n  ...(org.features.includes('crash-rate-alerts')\n    ? [\n        {\n          categoryHeading: t('Sessions'),\n          options: ['crash_free_sessions', 'crash_free_users'] as AlertType[],\n        },\n      ]\n    : []),\n  {\n    categoryHeading: t('Performance'),\n    options: [\n      'throughput',\n      'trans_duration',\n      'apdex',\n      'failure_rate',\n      'lcp',\n      'fid',\n      'cls',\n    ],\n  },\n  {\n    categoryHeading: t('Other'),\n    options: ['custom'],\n  },\n];\n\ntype PanelContent = {\n  description: string;\n  docsLink?: string;\n  examples: string[];\n  illustration?: string;\n};\n\nexport const AlertWizardPanelContent: Record<AlertType, PanelContent> = {\n  issues: {\n    description: t(\n      'Issues are groups of errors that have a similar stacktrace. Set an alert for new issues, when an issue changes state, frequency of errors, or users affected by an issue.'\n    ),\n    examples: [\n      t(\"When the triggering event's level is fatal.\"),\n      t('When an issue was seen 100 times in the last 2 days.'),\n      t(\n        'Create a JIRA ticket when an issue changes state from resolved to unresolved and is unassigned.'\n      ),\n    ],\n    illustration: diagramIssues,\n  },\n  num_errors: {\n    description: t(\n      'Alert when the number of errors in a project matching your filters crosses a threshold. This is useful for monitoring the overall level or errors in your project or errors occurring in specific parts of your app.'\n    ),\n    examples: [\n      t('When the signup page has more than 10k errors in 5 minutes.'),\n      t('When there are more than 500k errors in 10 minutes from a specific file.'),\n    ],\n    illustration: diagramErrors,\n  },\n  users_experiencing_errors: {\n    description: t(\n      'Alert when the number of users affected by errors in your project crosses a threshold.'\n    ),\n    examples: [\n      t('When 100k users experience an error in 1 hour.'),\n      t('When 100 users experience a problem on the Checkout page.'),\n    ],\n    illustration: diagramUsers,\n  },\n  throughput: {\n    description: t(\n      'Throughput is the total number of transactions in a project and you can alert when it reaches a threshold within a period of time.'\n    ),\n    examples: [\n      t('When number of transactions on a key page exceeds 100k per minute.'),\n      t('When number of transactions drops below a threshold.'),\n    ],\n    illustration: diagramThroughput,\n  },\n  trans_duration: {\n    description: t(\n      'Monitor how long it takes for transactions to complete. Use flexible aggregates like percentiles, averages, and min/max.'\n    ),\n    examples: [\n      t('When any transaction is slower than 3 seconds.'),\n      t('When the 75th percentile response time is higher than 250 milliseconds.'),\n    ],\n    illustration: diagramTransactionDuration,\n  },\n  apdex: {\n    description: t(\n      'Apdex is a metric used to track and measure user satisfaction based on your application response times. The Apdex score provides the ratio of satisfactory, tolerable, and frustrated requests in a specific transaction or endpoint.'\n    ),\n    examples: [t('When apdex is below 300.')],\n    docsLink: 'https://docs.sentry.io/product/performance/metrics/#apdex',\n    illustration: diagramApdex,\n  },\n  failure_rate: {\n    description: t(\n      'Failure rate is the percentage of unsuccessful transactions. Sentry treats transactions with a status other than “ok,” “canceled,” and “unknown” as failures.'\n    ),\n    examples: [t('When the failure rate for an important endpoint reaches 10%.')],\n    docsLink: 'https://docs.sentry.io/product/performance/metrics/#failure-rate',\n    illustration: diagramFailureRate,\n  },\n  lcp: {\n    description: t(\n      'Largest Contentful Paint (LCP) measures loading performance. It marks the point when the largest image or text block is visible within the viewport. A fast LCP helps reassure the user that the page is useful, and so we recommend an LCP of less than 2.5 seconds.'\n    ),\n    examples: [\n      t('When the 75th percentile LCP of your homepage is longer than 2.5 seconds.'),\n    ],\n    docsLink: 'https://docs.sentry.io/product/performance/web-vitals',\n    illustration: diagramLCP,\n  },\n  fid: {\n    description: t(\n      'First Input Delay (FID) measures interactivity as the response time when the user tries to interact with the viewport. A low FID helps ensure that a page is useful, and we recommend a FID of less than 100 milliseconds.'\n    ),\n    examples: [t('When the average FID of a page is longer than 4 seconds.')],\n    docsLink: 'https://docs.sentry.io/product/performance/web-vitals',\n    illustration: diagramFID,\n  },\n  cls: {\n    description: t(\n      'Cumulative Layout Shift (CLS) measures visual stability by quantifying unexpected layout shifts that occur during the entire lifespan of the page. A CLS of less than 0.1 is a good user experience, while anything greater than 0.25 is poor.'\n    ),\n    examples: [t('When the CLS of a page is more than 0.5.')],\n    docsLink: 'https://docs.sentry.io/product/performance/web-vitals',\n    illustration: diagramCLS,\n  },\n  custom: {\n    description: t(\n      'Alert on metrics which are not listed above, such as first paint (FP), first contentful paint (FCP), and time to first byte (TTFB).'\n    ),\n    examples: [\n      t('When the 95th percentile FP of a page is longer than 250 milliseconds.'),\n      t('When the average TTFB of a page is longer than 600 millliseconds.'),\n    ],\n    illustration: diagramCustom,\n  },\n  crash_free_sessions: {\n    description: t(\n      'A session begins when a user starts the application and ends when it’s closed or sent to the background. A crash is when a session ends due to an error and this type of alert lets you monitor when those crashed sessions exceed a threshold. This lets you get a better picture of the health of your app.'\n    ),\n    examples: [\n      t('When the Crash Free Rate is below 98%, send a Slack notification to the team.'),\n    ],\n    illustration: diagramCrashFreeSessions,\n  },\n  crash_free_users: {\n    description: t(\n      'Crash Free Users is the percentage of distinct users that haven’t experienced a crash and so this type of alert tells you when the overall user experience dips below a certain unacceptable threshold.'\n    ),\n    examples: [\n      t('When the Crash Free Rate is below 97%, send an email notification to yourself.'),\n    ],\n    illustration: diagramCrashFreeUsers,\n  },\n};\n\nexport type WizardRuleTemplate = {\n  aggregate: string;\n  dataset: Dataset;\n  eventTypes: EventTypes;\n};\n\nexport const AlertWizardRuleTemplates: Record<\n  Exclude<AlertType, 'issues'>,\n  WizardRuleTemplate\n> = {\n  num_errors: {\n    aggregate: 'count()',\n    dataset: Dataset.ERRORS,\n    eventTypes: EventTypes.ERROR,\n  },\n  users_experiencing_errors: {\n    aggregate: 'count_unique(tags[sentry:user])',\n    dataset: Dataset.ERRORS,\n    eventTypes: EventTypes.ERROR,\n  },\n  throughput: {\n    aggregate: 'count()',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  trans_duration: {\n    aggregate: 'p95(transaction.duration)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  apdex: {\n    aggregate: 'apdex(300)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  failure_rate: {\n    aggregate: 'failure_rate()',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  lcp: {\n    aggregate: 'p95(measurements.lcp)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  fid: {\n    aggregate: 'p95(measurements.fid)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  cls: {\n    aggregate: 'p95(measurements.cls)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  custom: {\n    aggregate: 'p95(measurements.fp)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  crash_free_sessions: {\n    aggregate: SessionsAggregate.CRASH_FREE_SESSIONS,\n    dataset: Dataset.SESSIONS,\n    eventTypes: EventTypes.SESSION,\n  },\n  crash_free_users: {\n    aggregate: SessionsAggregate.CRASH_FREE_USERS,\n    dataset: Dataset.SESSIONS,\n    eventTypes: EventTypes.USER,\n  },\n};\n\nexport const hidePrimarySelectorSet = new Set<AlertType>([\n  'num_errors',\n  'users_experiencing_errors',\n  'throughput',\n  'apdex',\n  'failure_rate',\n  'crash_free_sessions',\n  'crash_free_users',\n]);\n\nexport const hideParameterSelectorSet = new Set<AlertType>([\n  'trans_duration',\n  'lcp',\n  'fid',\n  'cls',\n]);\n\nexport function getFunctionHelpText(alertType: AlertType): {\n  labelText: string;\n  timeWindowText?: string;\n} {\n  const timeWindowText = t('over');\n  if (alertType === 'apdex') {\n    return {\n      labelText: t('Select apdex value and time interval'),\n      timeWindowText,\n    };\n  } else if (hidePrimarySelectorSet.has(alertType)) {\n    return {\n      labelText: t('Select time interval'),\n    };\n  } else {\n    return {\n      labelText: t('Select function and time interval'),\n      timeWindowText,\n    };\n  }\n}\n","import styled from '@emotion/styled';\n\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\n\nconst MenuItem = styled('div')`\n  font-size: 14px;\n  ${overflowEllipsis};\n`;\n\nexport default MenuItem;\n"],"names":["SentryDocumentTitle","title","orgSlug","projectSlug","children","docTitle","isActiveSuperuser","isSuperuser","ConfigStore","Cookies","undefined","recreateRoute","to","options","routes","params","location","stepBack","paths","map","path","lastRootIndex","routeIndex","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","BuilderBreadCrumbs","props","alertName","projects","canChangeProject","project","find","slug","projectCrumbLink","id","label","avatarSize","disableLink","preserveGlobalSelection","projectCrumbDropdown","onSelect","value","browserHistory","orgId","projectId","items","filter","proj","isMember","index","avatarProps","consistentWidth","searchKey","projectCrumb","crumbs","t","push","StyledBreadcrumbs","Breadcrumbs","space","withProjects","RadioPanelGroup","choices","onChange","Container","role","name","extraContent","RadioPanel","RadioLineItem","radioSize","checked","e","p","theme","subText","textColor","DEFAULT_ALERT_OPTION","AlertWizard","Component","alertOption","organization","this","setState","trackAnalyticsEvent","eventKey","eventName","organization_id","alert_type","componentDidMount","renderCreateAlertButton","state","metricRuleTemplate","AlertWizardRuleTemplates","isMetricAlert","isTransactionDataset","dataset","Dataset","pathname","query","createFromWizard","referrer","noFeatureMessage","features","requireAll","hookName","renderDisabled","body","hideHelpToggle","message","featureName","hasFeature","WizardButtonContainer","onClick","disabled","priority","hideIcon","render","panelContent","AlertWizardPanelContent","Fragment","StyledHeaderContent","StyledLayoutBody","fullWidth","WizardBody","WizardOptions","CategoryTitle","getAlertWizardCategories","categoryHeading","i","OptionsWrapper","alertType","AlertWizardAlertNames","handleChangeAlertOption","WizardPanel","visible","WizardPanelBody","withPadding","PanelDescription","description","docsLink","href","WizardImage","src","illustration","ExampleHeader","ExampleList","symbol","examples","example","ExampleItem","WizardFooter","Layout","fontSizeExtraLarge","Panel","List","PanelBody","fontSizeLarge","ListItem","fontSizeMedium","border","Set","issues","num_errors","users_experiencing_errors","throughput","trans_duration","apdex","failure_rate","lcp","fid","cls","custom","crash_free_sessions","crash_free_users","org","includes","diagramIssues","diagramErrors","diagramUsers","diagramThroughput","diagramTransactionDuration","diagramApdex","diagramFailureRate","diagramLCP","diagramFID","diagramCLS","diagramCustom","diagramCrashFreeSessions","diagramCrashFreeUsers","aggregate","eventTypes","EventTypes","SessionsAggregate","hidePrimarySelectorSet","hideParameterSelectorSet","getFunctionHelpText","timeWindowText","labelText","has","overflowEllipsis"],"sourceRoot":""}