{"version":3,"file":"chunks/app_views_alerts_edit_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"m3BA2BA,MAAMA,UAA6BC,EAAAA,EAAwB,kEAoBnC,KACpB,MAAM,OAACC,GAAUC,KAAKC,OAChB,MAACC,GAASF,KAAKC,MAAME,OAE3BC,EAAAA,GAAAA,eAAsB,CAACC,KAAM,kBAC7BN,EAAOO,KAAP,yBAA8BJ,EAA9B,sBAxBFK,kBACE,MAAO,IACFC,MAAMD,kBACTE,QAAS,IAAIC,KAIjBC,eACE,MAAM,MAACT,EAAD,OAAQU,GAAUZ,KAAKC,MAAME,OAEnC,MAAO,CAAC,CAAC,OAAD,yBAA2BD,EAA3B,wBAAgDU,EAAhD,OAGVC,kBAAiB,SAACC,EAAD,KAAWC,IACT,SAAbD,GAAuBC,EAAKV,MAC9BL,KAAKC,MAAMe,cAAcD,EAAKV,MAYlCY,aACE,MAAM,MAACC,GAASlB,KAAKC,OACf,OAACW,GAAUZ,KAAKC,MAAME,QACtB,KAACgB,GAAQnB,KAAKoB,MAEdC,EAAcH,EAAMI,QAAO,EAAEC,SAAAA,KAAcA,IAAUC,KAAI,EAAEC,GAAAA,KAAQA,IAEzE,OACE,QAAC,IAAD,IACMzB,KAAKC,MACTW,OAAQA,EACRO,KAAMA,EACNO,gBAAiB1B,KAAK2B,oBACtBN,YAAaA,KAMrB,SAAeO,EAAAA,EAAAA,GAAU/B,G,wDC5CzB,MAAMgC,UAA4BC,EAAAA,UAAwB,mDACzC,CACbC,SAAU,MAF4C,iCAiBnCA,IACnB/B,KAAKgC,SAAS,CAACD,SAAAA,OAbjBE,oBACE,MAAM,aAACC,EAAD,QAAeC,GAAWnC,KAAKC,OAErCmC,EAAAA,EAAAA,IAAoB,CAClBC,SAAU,yBACVC,UAAW,0BACXC,gBAAiBL,EAAaT,GAC9Be,WAAYL,EAAQV,GACpBgB,WAAYzC,KAAK0C,iBAQrBC,WACE,MAAM,SAACZ,GAAY/B,KAAKoB,MACxB,gBAAUW,GAGZW,eACE,OAAOE,SAASC,SAASC,SAAS,yBAA2B,SAAW,QAG1EC,SACE,MAAM,gBAACC,EAAD,SAAkBJ,EAAlB,aAA4BV,EAA5B,QAA0CC,EAA1C,OAAmDc,GAAUjD,KAAKC,MAClEiD,EAAYlD,KAAK0C,eAEvB,OACE,QAAC,EAAAS,SAAD,YACE,QAAC,IAAD,CACEC,MAAOpD,KAAK2C,WACZU,QAASnB,EAAaoB,KACtBC,YAAapB,EAAQmB,QAEvB,QAAC,KAAD,WACE,QAAC,KAAD,YACE,QAAC,IAAD,CACED,QAASnB,EAAaoB,KACtBF,OAAOI,EAAAA,EAAAA,GAAE,mBACTD,YAAapB,EAAQmB,KACrBL,OAAQA,EACRL,SAAUA,KAEZ,QAAC,KAAD,UAAe5C,KAAK2C,mBAGxB,QAACc,EAAD,WACE,QAAC,KAAD,CAAaC,WAAS,EAAtB,YACKV,GAAiC,UAAdE,KACpB,QAAC,IAAD,IACMlD,KAAKC,MACTkC,QAASA,EACTnB,cAAehB,KAAK2D,oBAGvBX,GAAiC,WAAdE,IAClB,QAAC,EAAD,IACMlD,KAAKC,MACTkC,QAASA,EACTnB,cAAehB,KAAK2D,6BAlE9B9B,EAAAA,YAAAA,sBA4EN,MAAM4B,GAAqB,OAAOG,EAAAA,GAAP,qBAAH,mBACJC,EAAAA,EAAAA,GAAM,GADF,kCAQxB","sources":["webpack:///./app/views/alerts/incidentRules/details.tsx","webpack:///./app/views/alerts/edit.tsx"],"sourcesContent":["import {RouteComponentProps} from 'react-router';\n\nimport {Organization, Project, Team} from 'app/types';\nimport {metric} from 'app/utils/analytics';\nimport withTeams from 'app/utils/withTeams';\nimport RuleForm from 'app/views/alerts/incidentRules/ruleForm';\nimport {IncidentRule} from 'app/views/alerts/incidentRules/types';\nimport AsyncView from 'app/views/asyncView';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n  ruleId: string;\n};\n\ntype Props = {\n  organization: Organization;\n  onChangeTitle: (data: string) => void;\n  project: Project;\n  teams: Team[];\n} & RouteComponentProps<RouteParams, {}>;\n\ntype State = {\n  rule: IncidentRule;\n  actions: Map<string, any>; // This is temp\n} & AsyncView['state'];\n\nclass IncidentRulesDetails extends AsyncView<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      actions: new Map(),\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId, ruleId} = this.props.params;\n\n    return [['rule', `/organizations/${orgId}/alert-rules/${ruleId}/`]];\n  }\n\n  onRequestSuccess({stateKey, data}) {\n    if (stateKey === 'rule' && data.name) {\n      this.props.onChangeTitle(data.name);\n    }\n  }\n\n  handleSubmitSuccess = () => {\n    const {router} = this.props;\n    const {orgId} = this.props.params;\n\n    metric.endTransaction({name: 'saveAlertRule'});\n    router.push(`/organizations/${orgId}/alerts/rules/`);\n  };\n\n  renderBody() {\n    const {teams} = this.props;\n    const {ruleId} = this.props.params;\n    const {rule} = this.state;\n\n    const userTeamIds = teams.filter(({isMember}) => isMember).map(({id}) => id);\n\n    return (\n      <RuleForm\n        {...this.props}\n        ruleId={ruleId}\n        rule={rule}\n        onSubmitSuccess={this.handleSubmitSuccess}\n        userTeamIds={userTeamIds}\n      />\n    );\n  }\n}\n\nexport default withTeams(IncidentRulesDetails);\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport * as Layout from 'app/components/layouts/thirds';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport BuilderBreadCrumbs from 'app/views/alerts/builder/builderBreadCrumbs';\nimport IncidentRulesDetails from 'app/views/alerts/incidentRules/details';\nimport IssueEditor from 'app/views/alerts/issueRuleEditor';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n  ruleId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n  project: Project;\n  hasMetricAlerts: boolean;\n};\n\ntype State = {\n  ruleName: string;\n};\n\nclass ProjectAlertsEditor extends Component<Props, State> {\n  state: State = {\n    ruleName: '',\n  };\n\n  componentDidMount() {\n    const {organization, project} = this.props;\n\n    trackAnalyticsEvent({\n      eventKey: 'edit_alert_rule.viewed',\n      eventName: 'Edit Alert Rule: Viewed',\n      organization_id: organization.id,\n      project_id: project.id,\n      alert_type: this.getAlertType(),\n    });\n  }\n\n  handleChangeTitle = (ruleName: string) => {\n    this.setState({ruleName});\n  };\n\n  getTitle() {\n    const {ruleName} = this.state;\n    return `${ruleName}`;\n  }\n\n  getAlertType(): 'metric' | 'issue' {\n    return location.pathname.includes('/alerts/metric-rules/') ? 'metric' : 'issue';\n  }\n\n  render() {\n    const {hasMetricAlerts, location, organization, project, routes} = this.props;\n    const alertType = this.getAlertType();\n\n    return (\n      <Fragment>\n        <SentryDocumentTitle\n          title={this.getTitle()}\n          orgSlug={organization.slug}\n          projectSlug={project.slug}\n        />\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <BuilderBreadCrumbs\n              orgSlug={organization.slug}\n              title={t('Edit Alert Rule')}\n              projectSlug={project.slug}\n              routes={routes}\n              location={location}\n            />\n            <Layout.Title>{this.getTitle()}</Layout.Title>\n          </Layout.HeaderContent>\n        </Layout.Header>\n        <EditConditionsBody>\n          <Layout.Main fullWidth>\n            {(!hasMetricAlerts || alertType === 'issue') && (\n              <IssueEditor\n                {...this.props}\n                project={project}\n                onChangeTitle={this.handleChangeTitle}\n              />\n            )}\n            {hasMetricAlerts && alertType === 'metric' && (\n              <IncidentRulesDetails\n                {...this.props}\n                project={project}\n                onChangeTitle={this.handleChangeTitle}\n              />\n            )}\n          </Layout.Main>\n        </EditConditionsBody>\n      </Fragment>\n    );\n  }\n}\n\nconst EditConditionsBody = styled(Layout.Body)`\n  margin-bottom: -${space(3)};\n\n  *:not(img) {\n    max-width: 1000px;\n  }\n`;\n\nexport default ProjectAlertsEditor;\n"],"names":["IncidentRulesDetails","AsyncView","router","this","props","orgId","params","metric","name","push","getDefaultState","super","actions","Map","getEndpoints","ruleId","onRequestSuccess","stateKey","data","onChangeTitle","renderBody","teams","rule","state","userTeamIds","filter","isMember","map","id","onSubmitSuccess","handleSubmitSuccess","withTeams","ProjectAlertsEditor","Component","ruleName","setState","componentDidMount","organization","project","trackAnalyticsEvent","eventKey","eventName","organization_id","project_id","alert_type","getAlertType","getTitle","location","pathname","includes","render","hasMetricAlerts","routes","alertType","Fragment","title","orgSlug","slug","projectSlug","t","EditConditionsBody","fullWidth","handleChangeTitle","Layout","space"],"sourceRoot":""}