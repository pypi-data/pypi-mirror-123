{"version":3,"file":"chunks/app_components_modals_dashboardWidgetQuerySelectorModal_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/modals/dashboardWidgetQuerySelectorModal.tsx","webpack:///./app/views/dashboardsV2/types.tsx","webpack:///./app/views/dashboardsV2/utils.tsx"],"sourcesContent":["import * as React from 'react';\nimport {browserHistory} from 'react-router';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {ModalRenderProps} from 'app/actionCreators/modal';\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport {IconChevron, IconSearch} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {GlobalSelection, Organization} from 'app/types';\nimport trackAdvancedAnalyticsEvent from 'app/utils/analytics/trackAdvancedAnalyticsEvent';\nimport withApi from 'app/utils/withApi';\nimport withGlobalSelection from 'app/utils/withGlobalSelection';\nimport {Widget} from 'app/views/dashboardsV2/types';\nimport {eventViewFromWidget} from 'app/views/dashboardsV2/utils';\nimport Input from 'app/views/settings/components/forms/controls/input';\n\nexport type DashboardWidgetQuerySelectorModalOptions = {\n  organization: Organization;\n  widget: Widget;\n};\n\ntype Props = ModalRenderProps &\n  DashboardWidgetQuerySelectorModalOptions & {\n    api: Client;\n    organization: Organization;\n    selection: GlobalSelection;\n  };\n\nclass DashboardWidgetQuerySelectorModal extends React.Component<Props> {\n  renderQueries() {\n    const {organization, widget, selection} = this.props;\n    const querySearchBars = widget.queries.map((query, index) => {\n      const eventView = eventViewFromWidget(\n        widget.title,\n        query,\n        selection,\n        widget.displayType\n      );\n      const discoverLocation = eventView.getResultsViewUrlTarget(organization.slug);\n      // Pull a max of 3 valid Y-Axis from the widget\n      const yAxisOptions = eventView.getYAxisOptions().map(({value}) => value);\n      discoverLocation.query.yAxis = query.fields\n        .filter(field => yAxisOptions.includes(field))\n        .slice(0, 3);\n      return (\n        <React.Fragment key={index}>\n          <QueryContainer>\n            <Container>\n              <SearchLabel htmlFor=\"smart-search-input\" aria-label={t('Search events')}>\n                <IconSearch />\n              </SearchLabel>\n              <StyledInput value={query.conditions} disabled />\n            </Container>\n            <OpenInDiscoverButton\n              priority=\"primary\"\n              icon={<IconChevron size=\"xs\" direction=\"right\" />}\n              onClick={() => {\n                trackAdvancedAnalyticsEvent('dashboards_views.query_selector.selected', {\n                  organization,\n                  widget_type: widget.displayType,\n                });\n                browserHistory.push(discoverLocation);\n              }}\n            />\n          </QueryContainer>\n        </React.Fragment>\n      );\n    });\n    return querySearchBars;\n  }\n\n  render() {\n    const {Body, Header, widget} = this.props;\n    return (\n      <React.Fragment>\n        <Header closeButton>\n          <h4>{widget.title}</h4>\n        </Header>\n        <Body>\n          <p>\n            {t(\n              'Multiple queries were used to create this widget visualization. Which query would you like to view in Discover?'\n            )}\n          </p>\n          {this.renderQueries()}\n        </Body>\n      </React.Fragment>\n    );\n  }\n}\n\nconst StyledInput = styled(Input)`\n  text-overflow: ellipsis;\n  padding: 0px;\n  box-shadow: none;\n  height: auto;\n  &:disabled {\n    border: none;\n    cursor: default;\n  }\n`;\nconst QueryContainer = styled('div')`\n  display: flex;\n  margin-bottom: ${space(1)};\n`;\nconst OpenInDiscoverButton = styled(Button)`\n  margin-left: ${space(1)};\n`;\n\nconst Container = styled('div')`\n  border: 1px solid ${p => p.theme.border};\n  box-shadow: inset ${p => p.theme.dropShadowLight};\n  background: ${p => p.theme.backgroundSecondary};\n  padding: 7px ${space(1)};\n  position: relative;\n  display: grid;\n  grid-template-columns: max-content 1fr max-content;\n  grid-gap: ${space(1)};\n  align-items: start;\n  flex-grow: 1;\n  border-radius: ${p => p.theme.borderRadius};\n`;\n\nconst SearchLabel = styled('label')`\n  display: flex;\n  padding: ${space(0.5)} 0;\n  margin: 0;\n  color: ${p => p.theme.gray300};\n`;\n\nexport const modalCss = css`\n  width: 100%;\n  max-width: 700px;\n  margin: 70px auto;\n`;\n\nexport default withApi(withGlobalSelection(DashboardWidgetQuerySelectorModal));\n","import {User} from 'app/types';\n\n// Max widgets per dashboard we are currently willing\n// to allow to limit the load on snuba from the\n// parallel requests. Somewhat arbitrary\n// limit that can be changed if necessary.\nexport const MAX_WIDGETS = 30;\n\nexport enum DisplayType {\n  AREA = 'area',\n  BAR = 'bar',\n  LINE = 'line',\n  TABLE = 'table',\n  WORLD_MAP = 'world_map',\n  BIG_NUMBER = 'big_number',\n  STACKED_AREA = 'stacked_area',\n  TOP_N = 'top_n',\n}\n\nexport type WidgetQuery = {\n  name: string;\n  fields: string[];\n  conditions: string;\n  orderby: string;\n};\n\nexport type Widget = {\n  id?: string;\n  title: string;\n  displayType: DisplayType;\n  interval: string;\n  queries: WidgetQuery[];\n};\n\n/**\n * The response shape from dashboard list endpoint\n */\nexport type DashboardListItem = {\n  id: string;\n  title: string;\n  dateCreated?: string;\n  createdBy?: User;\n  widgetDisplay: DisplayType[];\n};\n\n/**\n * Saved dashboard with widgets\n */\nexport type DashboardDetails = {\n  title: string;\n  widgets: Widget[];\n  id: string;\n  dateCreated: string;\n  createdBy?: User;\n};\n\nexport enum DashboardState {\n  VIEW = 'view',\n  EDIT = 'edit',\n  CREATE = 'create',\n  PENDING_DELETE = 'pending_delete',\n}\n","import {Query} from 'history';\nimport cloneDeep from 'lodash/cloneDeep';\nimport pick from 'lodash/pick';\n\nimport {GlobalSelection} from 'app/types';\nimport {getUtcDateString} from 'app/utils/dates';\nimport EventView from 'app/utils/discover/eventView';\n\nimport {DashboardDetails, DisplayType, Widget, WidgetQuery} from './types';\n\nexport function cloneDashboard(dashboard: DashboardDetails): DashboardDetails {\n  return cloneDeep(dashboard);\n}\n\nexport function eventViewFromWidget(\n  title: string,\n  query: WidgetQuery,\n  selection: GlobalSelection,\n  widgetType?: DisplayType\n): EventView {\n  const {start, end, period: statsPeriod} = selection.datetime;\n  const {projects, environments} = selection;\n\n  // World Map requires an additional column (geo.country_code) to display in discover when navigating from the widget\n  const fields =\n    widgetType === DisplayType.WORLD_MAP\n      ? ['geo.country_code', ...query.fields]\n      : query.fields;\n  const conditions =\n    widgetType === DisplayType.WORLD_MAP\n      ? `${query.conditions} has:geo.country_code`\n      : query.conditions;\n\n  return EventView.fromSavedQuery({\n    id: undefined,\n    name: title,\n    version: 2,\n    fields,\n    query: conditions,\n    orderby: query.orderby,\n    projects,\n    range: statsPeriod,\n    start: start ? getUtcDateString(start) : undefined,\n    end: end ? getUtcDateString(end) : undefined,\n    environment: environments,\n  });\n}\n\nfunction coerceStringToArray(value?: string | string[] | null) {\n  return typeof value === 'string' ? [value] : value;\n}\n\nexport function constructWidgetFromQuery(query?: Query): Widget | undefined {\n  if (query) {\n    const queryNames = coerceStringToArray(query.queryNames);\n    const queryConditions = coerceStringToArray(query.queryConditions);\n    const queryFields = coerceStringToArray(query.queryFields);\n    const queries: WidgetQuery[] = [];\n    if (\n      queryConditions &&\n      queryNames &&\n      queryFields &&\n      typeof query.queryOrderby === 'string'\n    )\n      queryConditions.forEach((condition, index) => {\n        queries.push({\n          name: queryNames[index],\n          conditions: condition,\n          fields: queryFields,\n          orderby: query.queryOrderby as string,\n        });\n      });\n    if (query.title && query.displayType && query.interval && queries.length > 0) {\n      const newWidget: Widget = {\n        ...(pick(query, ['title', 'displayType', 'interval']) as {\n          title: string;\n          displayType: DisplayType;\n          interval: string;\n        }),\n        queries,\n      };\n      return newWidget;\n    }\n  }\n  return undefined;\n}\n"],"names":["DashboardWidgetQuerySelectorModal","React","renderQueries","organization","widget","selection","this","props","queries","map","query","index","eventView","eventViewFromWidget","title","displayType","discoverLocation","getResultsViewUrlTarget","slug","yAxisOptions","getYAxisOptions","value","yAxis","fields","filter","field","includes","slice","QueryContainer","Container","SearchLabel","htmlFor","t","StyledInput","conditions","disabled","OpenInDiscoverButton","priority","icon","size","direction","onClick","trackAdvancedAnalyticsEvent","widget_type","browserHistory","render","Body","Header","closeButton","Input","space","Button","p","theme","border","dropShadowLight","backgroundSecondary","borderRadius","gray300","modalCss","withApi","withGlobalSelection","MAX_WIDGETS","DisplayType","DashboardState","cloneDashboard","dashboard","cloneDeep","widgetType","start","end","period","statsPeriod","datetime","projects","environments","EventView","id","undefined","name","version","orderby","range","getUtcDateString","environment","coerceStringToArray","constructWidgetFromQuery","queryNames","queryConditions","queryFields","queryOrderby","forEach","condition","push","interval","length","pick"],"sourceRoot":""}