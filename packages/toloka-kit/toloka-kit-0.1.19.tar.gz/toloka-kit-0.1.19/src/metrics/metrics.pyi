__all__ = [
    'AssignmentEventsInPool',
    'AssignmentsInPool',
    'Balance',
    'bind_client',
    'PoolCompletedPercentage',
]
import toloka.client
import toloka.client.operations
import typing


def bind_client(metrics: typing.List['BaseMetric'], toloka_client: toloka.client.TolokaClient) -> typing.List['BaseMetric']:
    """Sets/updates toloka_client for all metrics in list.

    Examples:
        How to bind same client for all metrics:
        >>> import toloka.client as toloka
        >>> from toloka.metrics import AssignmentsInPool, Balance, bind_client, MetricCollector
        >>>
        >>> toloka_client = toloka.TolokaClient(auth_token, 'PRODUCTION')
        >>>
        >>> collector = MetricCollector(
        >>>     [
        >>>         Balance(),
        >>>         AssignmentsInPool(pool_id),
        >>>     ],
        >>> )
        >>> bind_client(collector.metrics, toloka_client)
        ...

        How to bind several clients:
        >>> metrics_1 = bind_client([Balance(), AssignmentsInPool(pool_id_1)], toloka_client_1)
        >>> metrics_2 = bind_client([Balance(), AssignmentsInPool(pool_id_2)], toloka_client_2)
        >>> collector = MetricCollector(metrics_1 + metrics_2)
        ...
    """
    ...


class BaseMetric:
    """Base class for all metrics.

    Stores TolokaClient instance for this metric.
    """

    def get_lines(self) -> typing.Dict[str, typing.List[typing.Tuple[typing.Any, typing.Any]]]:
        """Gather and return metrics

        All metrics returned in the same format: named list, contain pairs of: datetime of some event, metric value.
        Could not return some metrics in dict on iteration or return it with empty list:
        means that is nothing being gathered on this step. This is not zero value!

        Return example:
        {
            'rejected_assignments_in_pool': [(datetime.datetime(2021, 8, 12, 10, 4, 44, 895232), 0)],
            'submitted_assignments_in_pool': [(datetime.datetime(2021, 8, 12, 10, 4, 45, 321904), 75)],
            'accepted_assignments_in_pool': [(datetime.datetime(2021, 8, 12, 10, 4, 45, 951156), 75)],
            'accepted_events_in_pool': [(datetime.datetime(2021, 8, 11, 15, 13, 3, 65000), 1), ... ],
            'rejected_events_in_pool': [],
            # no toloka_requester_balance on this iteration
        }
        """
        ...

    def get_line_names(self) -> typing.List[str]:
        """Returns a list of metric names that can be generated by this class instance.
        For example, if a class can generate 5 metrics, but some instance generate only 3 of them,
        this method will return a list with exactly 3 strings. If you call 'get_metrics' on this instance,
        it could return from 0 to 3 metrics.
        """
        ...

    def __init__(self, *, toloka_client: toloka.client.TolokaClient = None) -> None:
        """Method generated by attrs for class BaseMetric.
        """
        ...

    toloka_client: toloka.client.TolokaClient


class BasePoolMetric(BaseMetric):
    """Base class for all pool metrics
    """

    def __init__(
        self,
        pool_id: str,
        *,
        toloka_client: toloka.client.TolokaClient = None
    ) -> None:
        """Method generated by attrs for class BasePoolMetric.
        """
        ...

    toloka_client: toloka.client.TolokaClient
    pool_id: str


class AssignmentEventsInPool(BasePoolMetric):
    """Tracking the change of response statuses in the pool.
    The metric is convenient for tracking that the pool is generally "alive" and working.
    If you want to track assignments counts, it's better to use AssignmentsInPool.

    Metrics starts gathering if they name are set. If the metric name is set to None, they don't gathering.

    Args:
        pool_id: From which pool track metrics.
        created_name: Metric name for a count of created events. Default None.
        submitted_name: Metric name for a count of submitted events. Default 'submitted_events_in_pool'.
        accepted_name : Metric name for a count of accepted events. Default 'accepted_events_in_pool'.
        rejected_name : Metric name for a count of rejected events. Default 'rejected_events_in_pool'.
        skipped_name: Metric name for a count of skipped events. Default None.
        expired_name: Metric name for a count of expired events. Default None.
        join_events: Count all events in one point.  Default False.
        toloka_client: Client for connection to Toloka. You can set toloka_client for several vetrics via "bind_client" function.

    Raises:
        ValueError: If there are duplicate metric names.

    Example:
        How to collect this metrics:
        >>> collector = MetricCollector(AssignmentEventsInPool(pool_id, toloka_client=toloka_client))
        >>> metric_dict = collector.get_lines()
        {
            'submitted_events_in_pool': [(datetime.datetime(2021, 8, 11, 15, 13, 4, 31000), 5)],
            'accepted_events_in_pool': [(datetime.datetime(2021, 8, 11, 15, 13, 3, 65000), 1)],
            'rejected_events_in_pool': [],
        }
    """

    def get_line_names(self) -> typing.List[str]:
        """Returns a list of metric names that can be generated by this class instance.
        """
        ...

    def get_lines(self) -> typing.Dict[str, typing.List[typing.Tuple[typing.Any, typing.Any]]]: ...

    def __init__(
        self,
        pool_id: str,
        created_name: typing.Optional[str] = None,
        submitted_name: typing.Optional[str] = None,
        accepted_name: typing.Optional[str] = None,
        rejected_name: typing.Optional[str] = None,
        skipped_name: typing.Optional[str] = None,
        expired_name: typing.Optional[str] = None,
        join_events: bool = False,
        *,
        toloka_client: toloka.client.TolokaClient = None
    ) -> None:
        """Method generated by attrs for class AssignmentEventsInPool.
        """
        ...

    toloka_client: toloka.client.TolokaClient
    pool_id: str
    _created_name: typing.Optional[str]
    _submitted_name: typing.Optional[str]
    _accepted_name: typing.Optional[str]
    _rejected_name: typing.Optional[str]
    _skipped_name: typing.Optional[str]
    _expired_name: typing.Optional[str]
    _join_events: bool


class PoolCompletedPercentage(BasePoolMetric):
    """Track pool completion in percentage

    Args:
        pool_id: From which pool track metrics.
        percents_name: Metric name for pool completion percentage. Default 'completion_percentage'.
        toloka_client: Client for connection to Toloka. You can set toloka_client for several vetrics via "bind_client" function.

    Example:
        How to collect this metric:
        >>> collector = MetricCollector(PoolCompletedPercentage(pool_id, toloka_client=toloka_client))
        >>> metric_dict = collector.get_lines()
        {
            'completion_percentage': [(datetime.datetime(2021, 8, 11, 15, 13, 4, 31000), 55)],
        }
    """

    def get_line_names(self) -> typing.List[str]:
        """Returns a list of metric names that can be generated by this class instance.
        """
        ...

    def get_lines(self) -> typing.Dict[str, typing.List[typing.Tuple[typing.Any, typing.Any]]]: ...

    def __init__(
        self,
        pool_id: str,
        percents_name: typing.Optional[str] = None,
        *,
        toloka_client: toloka.client.TolokaClient = None
    ) -> None:
        """Method generated by attrs for class PoolCompletedPercentage.
        """
        ...

    toloka_client: toloka.client.TolokaClient
    pool_id: str
    _percents_name: typing.Optional[str]
    _previous_operation: typing.Optional[toloka.client.operations.Operation]


class AssignmentsInPool(BasePoolMetric):
    """Tracking the count of assignments in different states in the pool.

    Metrics starts gathering if they name are set. If the metric name is set to None, they don't gathering.
    This metric could "skip" get_metrics and return an empty list if the inner operation was still in progress.

    Args:
        pool_id: From which pool track metrics.
        submitted_name: Metric name for a count of submitted assignments. Default 'submitted_assignments_in_pool'.
        accepted_name : Metric name for a count of accepted assignments. Default 'accepted_assignments_in_pool'.
        rejected_name : Metric name for a count of rejected assignments. Default 'rejected_assignments_in_pool'.
        skipped_name: Metric name for a count of skipped assignments. Default None.

    Raises:
        ValueError: If all metric names are set to None.

    Example:
        How to collect this metrics:
        >>> collector = MetricCollector(AssignmentsInPool(pool_id, toloka_client=toloka_client))
        >>> metric_dict = collector.get_lines()
        {
            'rejected_assignments_in_pool': [(datetime.datetime(2021, 8, 12, 10, 4, 44, 895232), 0)],
            'submitted_assignments_in_pool': [(datetime.datetime(2021, 8, 12, 10, 4, 45, 321904), 75)],
            'accepted_assignments_in_pool': [(datetime.datetime(2021, 8, 12, 10, 4, 45, 951156), 75)],
        }
    """

    def get_line_names(self) -> typing.List[str]:
        """Returns a list of metric names that can be generated by this class instance.
        """
        ...

    def get_lines(self) -> typing.Dict[str, typing.List[typing.Tuple[typing.Any, typing.Any]]]: ...

    def __init__(
        self,
        pool_id: str,
        submitted_name: typing.Optional[str] = None,
        accepted_name: typing.Optional[str] = None,
        rejected_name: typing.Optional[str] = None,
        skipped_name: typing.Optional[str] = None,
        *,
        toloka_client: toloka.client.TolokaClient = None
    ) -> None:
        """Method generated by attrs for class AssignmentsInPool.
        """
        ...

    toloka_client: toloka.client.TolokaClient
    pool_id: str
    _submitted_name: typing.Optional[str]
    _accepted_name: typing.Optional[str]
    _rejected_name: typing.Optional[str]
    _skipped_name: typing.Optional[str]
    _previous_operation: typing.Optional[toloka.client.operations.Operation]


class Balance(BaseMetric):
    """Traking your Toloka balance.

    Returns only one metric: don't spend and don't reserved money on your acount.

    Args:
        balance_name: Metric name. Default 'toloka_requester_balance'.

    Raises:
        ValueError: If all metric names are set to None.

    Example:
        How to collect this metrics:
        >>> collector = MetricCollector(Balance(toloka_client=toloka_client))
        >>> metric_dict = collector.get_lines()
        {
            toloka_requester_balance: [(datetime.datetime(2021, 8, 30, 10, 30, 59, 628239), Decimal('123.4500'))],
        }
    """

    def get_line_names(self) -> typing.List[str]:
        """Returns a list of metric names that can be generated by this class instance.
        """
        ...

    def get_lines(self) -> typing.Dict[str, typing.List[typing.Tuple[typing.Any, typing.Any]]]: ...

    def __init__(
        self,
        balance_name: typing.Optional[str] = None,
        *,
        toloka_client: toloka.client.TolokaClient = None
    ) -> None:
        """Method generated by attrs for class Balance.
        """
        ...

    toloka_client: toloka.client.TolokaClient
    balance_name: typing.Optional[str]
