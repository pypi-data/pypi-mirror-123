# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['camundactl',
 'camundactl.cmd',
 'camundactl.cmd.openapi',
 'camundactl.cmd.openapi.openapi_specs',
 'camundactl.output']

package_data = \
{'': ['*']}

install_requires = \
['Jinja2>=3.0.1,<4.0.0',
 'PyYAML>=5.4.1,<6.0.0',
 'click>=8.0.1,<9.0.0',
 'jsonpath-ng>=1.5.3,<2.0.0',
 'jsonschema>=3.2.0,<4.0.0',
 'rainbow_logging_handler>=2.2.2,<3.0.0',
 'requests>=2.26.0,<3.0.0',
 'tabulate>=0.8.9,<0.9.0',
 'toolz>=0.11.1,<0.12.0',
 'types-requests>=2.25.6,<3.0.0']

entry_points = \
{'console_scripts': ['cctl = camundactl.__main__:_main']}

setup_kwargs = {
    'name': 'camundactl',
    'version': '0.1.0a4',
    'description': 'A Camunda cli that interacts with the rest api',
    'long_description': '# camundactl\n\ncamundactl (`cctl`) is a command line interface (cli) that interacts with the camunda rest api. It provides commands for all endpoints with the ability to filtes and different output format. The cli usaged is heavily inspired by [kubecl](https://kubernetes.io/) to work with kubernetes.\n\n**Features**\n\n- request all endpoints, defined in the camunda openapi.json\n- generate `get`, `delete` and `apply` commands from openapi.json\n- dedicated implementations for `describe`\n- multiple output formats: `table`, `json`, `jsonpath`, `template` (jinja2)\n- shell autocomplete for `zsh`, `bash`, `fish`)\n- shell autocomplete for processInstanceId, incidentIds, aso.\n- configuration for multipe camunda engines\n- ...\n\n**Contents**\n\n- [Examples](#examples)\n- [Installation](#installation)\n- [Configuration](#usage/configuration)\n  - [Format](#usage/configuration)\n  - [Add/Select/List/Remove Engine](#usage/configuration)\n  - [Autocomplete](#usage/configuration)\n- [Usage](#usage/configuration)\n  - [Global Options](#usage/configuration)\n  - [`get` Command](#usage/configuration)\n  - [`describe` Command](#usage/configuration)\n  - [`delete` Command](#usage/configuration)\n  - [`apply` Command](#usage/configuration)\n  - [`config` Command](#usage/configuration)\n  - [`output` Option](#usage/configuration)\n\n## Examples\n\nLoad two active process instances and use only the columns id and suspended\n\n```shell\n$ cctl get processInstances --max-results 2 -o table -oH id,suspended\nid                                    suspended\n------------------------------------  -----------\n0027da48-0a61-11ec-bd5f-0242ac120014  False\n003248e7-0b05-11ec-990f-0242ac12000d  False\n```\n\nLoad all active process instances and use the result in a jinja2 template.\n\n```bash\n$  cctl get processInstances -o template -oT \'{{result|length}}\'\n1337\n```\n\nLoad five active process instances and apply jsonpath formatting.\n\n```bash\n$ cctl get processInstances -o jsonpath -oJ \'$.[*].id\' --max-results 5\n0027da48-0a61-11ec-bd5f-0242ac120014\n003248e7-0b05-11ec-990f-0242ac12000d\n005ec7db-0a6c-11ec-bd5f-0242ac120014\n00957ceb-0b18-11ec-990f-0242ac12000d\n00f522c0-0b10-11ec-990f-0242ac12000d\n```\n\nLoad only one active process instance and ouput as json.\n\n```bash\n$ cctl get processInstances -o json --max-results 1\n[\n  {\n    "links": [],\n    "id": "0027da48-0a61-11ec-bd5f-0242ac120014",\n    "definitionId": "f87b25ce-0577-11ec-8801-0242ac12000a",\n    "businessKey": null,\n    "caseInstanceId": null,\n    "ended": false,\n    "suspended": false,\n    "tenantId": null\n  }\n]\n```\n\nPipe commands together. Get all active process instances by process defintion and delete them:\n\n```bash\n$ cctl get processInstances --process-definition-id f87b25ce-0577-11ec-8801-0242ac12000a -o jsonpath -oJ "$.[*].id" | xargs -n 1 cctl delete processInstance -o template -oT "Ok"\nOk\nOk\nOk\n...\n```\n\n## Installation\n\ncamundactl can be installed via pip.\n\n```bash\n$ pip install camundactl\n```\n\n## Configuration\n\ncamundactl uses a config file. The locations differ from os. If the configuration file does not it exists, it becomes created.\n\n- MacOS: `$HOME/Libarary/Application Support/camundactl/config.yml`\n- Linux: `$HOME/.config/camundactl/config.yml`\n- Windows: `$HOME/Appdata/Local/camundactl/config.yml`\n\n### Format\n\n```yaml\nversion: beta1\nextra_paths:\n  - module.to.my.plugin\ncurrent_engine: localhost\nengines:\n  - name: localhost\n    url: http://localhost:8080/engine-rest\n    auth:\n      user: camunda\n      password: camunda\n  - name: client-a\n    url: http://localhost:8080/engine-rest\n    auth:\n      user: camunda\n      password: camunda\n  - name: client-c\n    url: https://localhost:8080/engine-rest\n    verify: false\n    auth:\n      user: camunda\n      password: camunda\n```\n\n- `version` defines the current config file version for later update purpose\n- `extra_path` is a list of python modules that can be autodiscovered in command discovering to add user defined commands or plugins\n- `current_engine` is the currently selected engine to be used\n- `engine` contains a list of engines within you can switch witch `cctl config engines activate ANOTHER`.\n  - `name` the engines display name\n  - `url` the urls of the camunda engine rest api\n  - `auth` is an object of `user` and `password` for basic authentication\n  - `verify` is a boolen that ignores ssl verification (default `true`)\n\n### Add/List/Activate/Remove Engines\n\n**Add an engine**\n\nAdd a camunda engine to the list of engines and directly select it.\n\n```bash\n$ cctl config engines add local http://localhost:8080/engine-rest --select\n```\n\n**List all engines**\n\nList all engines that are configured. The `*` indicates the currently selected engine.\n\n```bash\n$ cctl config engines ls\nlocal *\nclient-a\n```\n\n**Activate an engine**\n\nActivates the `client-a` engine.\n\n```bash\n$ cctl config engines activate client-a\n```\n\n**Remove an engine**\n\nRemoves the `client-a` engine.\n\n```bash\n$ cctl config engines remove client-a\n```\n\n### Autocomplete\n\ncamundactl provides the functionality to autocomplete at the console.\n\ncamundactl bases on [click](http://click.parallelprojects.com/), which\nautocomplete method could be used.\n\n**Example for zsh**\n\n```bash\n$ _CCTL_COMPLETE=zsh_source cctl > $HOME/.cctl-completion.sh\n```\n\nYou can find more Details on the project-page: https://click.palletsprojects.com/en/8.0.x/shell-completion/\n\n## Usage\n\n### Gloabl options\n\n--help\n--log\n-e, --engine\n\n### `get` Resource Information\n\nGet commands provides the ability to request ressource information from a given engine. It contains all OpenAPI Operations of the Verb `get`.\n\n### `delete` Resource Information\n\nDelete commands provide the ability to delete specific ressources in the camunda engine.\n\n### `apply` Resource Information\n\nApply commands provide the ability to apply changes to the camunda engine. They combine the functionality of `put` and `post` verbs and these operations.\n\nAs `kubectl` you can use `apply` in combination with files that contains the payload.\n\nYou can use JSON or YAML payloads.\n\n```bash\n$ cat EOF>>\nvalue: hello-world\ntype: String\nEOF >> variable.yaml\n\n$ cctl apply processInstanceVariable foobar 0027da48-0a61-11ec-bd5f-0242ac120014 -y variable.yml\n```\n\n**Schema validation**\nIf provided, the given payload becomes validated against the openapi schema. The openapi documentation sometimes does not fully match the api. (e.g. while updating variables. The values is describes as `object` but values of primitive variables are also allowed.)\n\nTo skip this use the option `--skip-validation`.\n\n### `describe` Resource Information\n\n_not quite implemented_. It\'s planned to use this commands to collect and output complex informationations about a given ressoure including combining multiple endpoints (e.g. process instances with all occured incidents and variable information.)\n\n### `output` Option\n\nThe `-o/--output` option defines the output format. The default ist `table`. All other options are described in the following.\n\n#### Table Output\n\nThe camunda responses are nearly all of type `application/json`. If the response is of type `array` a table will be printed. If it\'s an `object` a table with `key` and `value` headers are used.\n\n**Options**\n\n- `-o table`\n- `-oH`, `--output-headers` gives the possibility to select the columns to show\n- `-oCL`, `--output-cell-length` cell values of type string are limited to `40` characters.\n\n_Example_\n\n```bash\n$ cctl get processInstances -o table -oH id,suspended\n```\n\n#### JSON Output\n\nPrints the json API response with end indent of 2.\n\n**Options**\n\n- `-o json`\n\n#### JSON-Path Output\n\n`-o jsonpath` activates a jsonpath output. With `-oJ` you can apply the jsonpath filter which will be applied. \nFor this [jsonpath-ng](https://pypi.org/project/jsonpath-ng/) is used. There you can find further information about the filter format.\n\n#### Template Output\n\n\n\n#### Raw Output\n\n### root command\n\n```bash\n\n$ python -m camundactl --help\n\nUsage: __main__.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  -l, --log-level TEXT  activates the logger with the given level\n  -e, --engine TEXT     define the engine name to be used\n  --help                Show this message and exit.\n\nCommands:\n  delete\n  describe\n  get\n\n```\n\n### delete command\n\n```bash\n\n$ python -m camundactl delete --help\n\nUsage: __main__.py delete [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  attachment                      Removes an attachment from a task by...\n  deployment                      Deletes a deployment by id.\n  processDefinition               Deletes a running process instance by...\n  processDefinitionsByKey         Deletes process definitions by a given...\n  processDefinitionsByKeyAndTenantId\n                                  Deletes process definitions by a given...\n  processInstance                 Deletes a running process instance by...\n  processInstanceVariable         Deletes a variable of a process...\n  task                            Removes a task by id.\n  taskLocalVariable               Removes a local variable from a task...\n  taskVariable                    Removes a variable that is visible to...\n\n\n```\n\n### get command\n\n```bash\n\n$ python -m camundactl get --help\n\nUsage: __main__.py get [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  activityInstanceTree            Retrieves an Activity...\n  activityStatistics              Retrieves runtime...\n  activityStatisticsByProcessDefinitionKey\n                                  Retrieves runtime...\n  activityStatisticsByProcessDefinitionKeyAndTenantId\n                                  Retrieves runtime...\n  attachment                      Retrieves a task...\n  attachmentData                  Retrieves the binary...\n  attachments                     Gets the attachments...\n  comment                         Retrieves a task...\n  comments                        Gets the comments for...\n  deployedForm                    Retrieves the...\n  deployedStartForm               Retrieves the...\n  deployedStartFormByKey          Retrieves the...\n  deployedStartFormByKeyAndTenantId\n                                  Retrieves the...\n  deployment                      Retrieves a...\n  deploymentResource              Retrieves a...\n  deploymentResourceData          Retrieves the binary...\n  deploymentResources             Retrieves all...\n  deploymentsCount                Queries for the...\n  eventSubscriptions              Queries for event...\n  eventSubscriptionsCount         Queries for the...\n  externalTask                    Retrieves an external...\n  externalTaskErrorDetails        Retrieves the error...\n  externalTasks                   Queries for the...\n  externalTasksCount              Queries for the...\n  form                            Retrieves the form...\n  formVariables                   Retrieves the form...\n  identityLinks                   Gets the identity...\n  interval                        Retrieves a list of...\n  latestProcessDefinitionByTenantId\n                                  Retrieves the latest...\n  metrics                         Retrieves the `sum`...\n  processDefinition               Retrieves a process...\n  processDefinitionBpmn20Xml      Retrieves the BPMN...\n  processDefinitionBpmn20XmlByKey\n                                  Retrieves latest...\n  processDefinitionBpmn20XmlByKeyAndTenantId\n                                  Retrieves latest...\n  processDefinitionByKey          Retrieves the latest...\n  processDefinitionDiagram        Retrieves the diagram...\n  processDefinitionDiagramByKey   Retrieves the diagram...\n  processDefinitionDiagramByKeyAndTenantId\n                                  Retrieves the diagram...\n  processDefinitionStatistics     Retrieves runtime...\n  processDefinitions              Queries for process...\n  processDefinitionsCount         Requests the number...\n  processEngineNames              Retrieves the names...\n  processInstance                 lists all active...\n  processInstanceVariable         Retrieves a variable...\n  processInstanceVariableBinary   Retrieves the content...\n  processInstanceVariables        Retrieves all...\n  processInstances                Queries for process...\n  processInstancesCount           Queries for the...\n  renderedForm                    Retrieves the...\n  renderedStartForm               Retrieves the...\n  renderedStartFormByKey          Retrieves the...\n  renderedStartFormByKeyAndTenantId\n                                  Retrieves the...\n  restAPIVersion                  Retrieves the version...\n  schemaLog                       Queries for schema...\n  startForm                       Retrieves the key of...\n  startFormByKey                  Retrieves the key of...\n  startFormByKeyAndTenantId       Retrieves the key of...\n  startFormVariables              Retrieves the start...\n  startFormVariablesByKey         Retrieves the start...\n  startFormVariablesByKeyAndTenantId\n                                  Retrieves the start...\n  task                            Retrieves a task by...\n  taskLocalVariable               Retrieves a variable...\n  taskLocalVariableBinary         Retrieves a binary...\n  taskLocalVariables              Retrieves all...\n  taskVariable                    Retrieves a variable...\n  taskVariableBinary              Retrieves a binary...\n  taskVariables                   Retrieves all...\n  tasks                           Queries for tasks...\n  tasksCount                      Retrieves the number...\n  topicNames                      Queries for distinct...\n\n\n```\n\n## autocomplete\n\n\\_CCTL_COMPLETE=zsh_source cctl\n\n# TODO / Ideas\n\n- output column length in options or parameter (currently hard 40)\n\n- display\n\n  - list of strings\n  - list of objects\n  - object with keys\n  - object with one value\n\n- use template loader to save and load templates somewhere and let use use them or save some for default\n- templates with more context variables. not just "result"\n',
    'author': 'Jens Blawatt',
    'author_email': 'jblawatt@googlemail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/jblawatt/camundactl',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.9,<4.0',
}


setup(**setup_kwargs)
