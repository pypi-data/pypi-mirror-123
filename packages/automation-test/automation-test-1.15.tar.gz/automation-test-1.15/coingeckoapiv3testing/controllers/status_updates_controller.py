# -*- coding: utf-8 -*-

"""
coingeckoapiv3testing

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from coingeckoapiv3testing.api_helper import APIHelper
from coingeckoapiv3testing.configuration import Server
from coingeckoapiv3testing.controllers.base_controller import BaseController


class StatusUpdatesController(BaseController):

    """A Controller to access Endpoints in the coingeckoapiv3testing API."""

    def __init__(self, config, call_back=None):
        super(StatusUpdatesController, self).__init__(config, call_back)

    def listallstatus_updateswithdata_description_category_created_at_user_user_titleandpin(self,
                                                                                            category=None,
                                                                                            project_type=None,
                                                                                            per_page=None,
                                                                                            page=None):
        """Does a GET request to /status_updates.

        List all status_updates with data (description, category, created_at,
        user, user_title and pin)

        Args:
            category (string, optional): Filtered by category (eg. general,
                milestone, partnership, exchange_listing, software_release,
                fund_movement, new_listings, event)
            project_type (string, optional): Filtered by Project Type (eg.
                coin, market). If left empty returns both status from coins
                and markets.
            per_page (int, optional): Total results per page
            page (int, optional): Page through results

        Returns:
            void: Response from the API. List all status_updates with data

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/status_updates'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'category': category,
            'project_type': project_type,
            'per_page': per_page,
            'page': page
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)
