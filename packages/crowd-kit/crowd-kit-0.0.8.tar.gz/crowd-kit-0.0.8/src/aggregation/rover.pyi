__all__ = [
    'ROVER',
]
import crowdkit.aggregation.base_aggregator
import pandas.core.frame
import typing


class ROVER(crowdkit.aggregation.base_aggregator.BaseAggregator):
    """Recognizer Output Voting Error Reduction (ROVER)

    J. G. Fiscus,
    "A post-processing system to yield reduced word error rates: Recognizer Output Voting Error Reduction (ROVER),"
    1997 IEEE Workshop on Automatic Speech Recognition and Understanding Proceedings, 1997, pp. 347-354.
    https://doi.org/10.1109/ASRU.1997.659110
    Attributes:
        results_ (typing.Optional[pandas.core.frame.DataFrame]): Tasks' label scores
            A pandas.DataFrame indexed by `task` such that `result.loc[task, text]`
            is the task's text.
    """

    def fit(self, data: pandas.core.frame.DataFrame) -> 'ROVER':
        """Args:
            data (DataFrame): Performers' text outputs
                A pandas.DataFrame containing `task`, `performer` and `text` columns.
        Returns:
            ROVER: self
        """
        ...

    def fit_predict(self, data: pandas.core.frame.DataFrame) -> pandas.core.frame.DataFrame:
        """Args:
            data (DataFrame): Performers' text outputs
                A pandas.DataFrame containing `task`, `performer` and `text` columns.
        Returns:
            DataFrame: Tasks' label scores
                A pandas.DataFrame indexed by `task` such that `result.loc[task, text]`
                is the task's text.
        """
        ...

    def __init__(
        self,
        tokenizer: typing.Callable[[str], typing.List[str]],
        detokenizer: typing.Callable[[typing.List[str]], str],
        silent: bool = True
    ) -> None:
        """Method generated by attrs for class ROVER.
        """
        ...

    tokenizer: typing.Callable[[str], typing.List[str]]
    detokenizer: typing.Callable[[typing.List[str]], str]
    silent: bool
    results_: typing.Optional[pandas.core.frame.DataFrame]
