__all__ = [
    'MajorityVote',
]
import crowdkit.aggregation.base_aggregator
import pandas.core.frame
import pandas.core.series
import typing


class MajorityVote(crowdkit.aggregation.base_aggregator.BaseAggregator):
    """Majority Vote - chooses the correct label for which more performers voted
    Attributes:
        skills_ (typing.Optional[pandas.core.series.Series]): Performers' skills
            A pandas.Series index by performers and holding corresponding performer's skill
        probas_ (typing.Optional[pandas.core.frame.DataFrame]): Tasks' label probability distributions
            A pandas.DataFrame indexed by `task` such that `result.loc[task, label]`
            is the probability of `task`'s true label to be equal to `label`. Each
            probability is between 0 and 1, all task's probabilities should sum up to 1

        labels_ (typing.Optional[pandas.core.frame.DataFrame]): Tasks' most likely true labels
            A pandas.Series indexed by `task` such that `labels.loc[task]`
            is the tasks's most likely true label.
    """

    def fit(
        self,
        data: pandas.core.frame.DataFrame,
        skills: pandas.core.series.Series = None
    ) -> 'MajorityVote':
        """Args:
            data (DataFrame): Performers' labeling results
                A pandas.DataFrame containing `task`, `performer` and `label` columns.
            skills (Series): Performers' skills
                A pandas.Series index by performers and holding corresponding performer's skill
        Returns:
            MajorityVote: self
        """
        ...

    def fit_predict_proba(
        self,
        data: pandas.core.frame.DataFrame,
        skills: pandas.core.series.Series = None
    ) -> pandas.core.frame.DataFrame:
        """Args:
            data (DataFrame): Performers' labeling results
                A pandas.DataFrame containing `task`, `performer` and `label` columns.
            skills (Series): Performers' skills
                A pandas.Series index by performers and holding corresponding performer's skill
        Returns:
            DataFrame: Tasks' label probability distributions
                A pandas.DataFrame indexed by `task` such that `result.loc[task, label]`
                is the probability of `task`'s true label to be equal to `label`. Each
                probability is between 0 and 1, all task's probabilities should sum up to 1
        """
        ...

    def fit_predict(
        self,
        data: pandas.core.frame.DataFrame,
        skills: pandas.core.series.Series = None
    ) -> pandas.core.frame.DataFrame:
        """Args:
            data (DataFrame): Performers' labeling results
                A pandas.DataFrame containing `task`, `performer` and `label` columns.
            skills (Series): Performers' skills
                A pandas.Series index by performers and holding corresponding performer's skill
        Returns:
            DataFrame: Tasks' most likely true labels
                A pandas.Series indexed by `task` such that `labels.loc[task]`
                is the tasks's most likely true label.
        """
        ...

    def __init__(self) -> None:
        """Method generated by attrs for class MajorityVote.
        """
        ...

    skills_: typing.Optional[pandas.core.series.Series]
    probas_: typing.Optional[pandas.core.frame.DataFrame]
    labels_: typing.Optional[pandas.core.frame.DataFrame]
