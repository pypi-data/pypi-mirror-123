# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['src']

package_data = \
{'': ['*']}

install_requires = \
['conan==1.41.0', 'packageurl-python>=0.9.6,<0.10.0']

entry_points = \
{'console_scripts': ['cyclonedx-conan = src.command:main']}

setup_kwargs = {
    'name': 'cyclonedx-conan',
    'version': '0.2.0',
    'description': 'Creates CycloneDX Software Bill of Materials (SBOM) documents for C/C++ projects using Conan',
    'long_description': "# CycloneDX Conan SBOM Generation Tool\n\n[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/CycloneDX/cyclonedx-conan/Python%20CI)](https://github.com/CycloneDX/cyclonedx-conan/actions/workflows/ci.yml)\n[![GitHub license](https://img.shields.io/github/license/CycloneDX/cyclonedx-conan)](https://github.com/CycloneDX/cyclonedx-conan/blob/main/LICENSE)\n[![Python Version Support](https://img.shields.io/badge/https://-cyclonedx.org-blue)](https://cyclonedx.org/)\n[![Slack Invite](https://img.shields.io/badge/Slack-Join-blue?logo=slack&labelColor=393939)](https://cyclonedx.org/slack/invite)\n![PyPI Version](https://img.shields.io/pypi/v/cyclonedx-conan?label=PyPI&logo=pypi)\n![Python Version Support](https://img.shields.io/badge/python-3.6+-blue)\n[![Group Discussion](https://img.shields.io/badge/discussion-groups.io-blue)](https://groups.io/g/CycloneDX)\n[![Twitter](https://img.shields.io/twitter/url/http/shields.io.svg?style=social&label=Follow)](https://twitter.com/CycloneDX_Spec)\n\n----\n\nThis project provides a tool for generating CycloneDX bill-of-material JSON documents for C/C++ projects using Conan.\n\nThe BOM will contain an aggregate of all your current project's dependencies, including a full dependency graph.\n\nCycloneDX is a lightweight BOM specification that is easily created, human-readable, and simple to parse.\n\nPlease note: This tool has only been tested with Conan 1.14 so far.\n\n## Installation\n\nInstall this from [PyPi.org](https://pypi.org/project/cyclonedx-conan/) using your preferred Python package manager.\n\nExample using `pip`:\n```\npip install cyclonedx-conan\n```\n\nExample using `poetry`:\n```\npoetry add cyclonedx-conan\n```\n\n## Usage\n\nOnce installed, you can access the full documentation by running `--help`:\n\nThe command line options are aligned to the standard Conan options.\n\n```\n$ cyclonedx-conan --help\nusage: command.py [-h] [-if INSTALL_FOLDER] [-db [DRY_BUILD]] [-b [BUILD]] [-r REMOTE] [-u] [-l LOCKFILE] [--lockfile-out LOCKFILE_OUT]\n                  [-e ENV_HOST] [-e:b ENV_BUILD] [-e:h ENV_HOST] [-o OPTIONS_HOST] [-o:b OPTIONS_BUILD] [-o:h OPTIONS_HOST]\n                  [-pr PROFILE_HOST] [-pr:b PROFILE_BUILD] [-pr:h PROFILE_HOST] [-s SETTINGS_HOST] [-s:b SETTINGS_BUILD]\n                  [-s:h SETTINGS_HOST] [-c CONF_HOST] [-c:b CONF_BUILD] [-c:h CONF_HOST]\n                  path_or_reference\n\nCycloneDX SBOM Generator\n\npositional arguments:\n  path_or_reference     Path to a folder containing a recipe (conanfile.py or conanfile.txt) or to a recipe file. e.g.,\n                        ./my_project/conanfile.txt. It could also be a reference\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -if INSTALL_FOLDER, --install-folder INSTALL_FOLDER\n                        local folder containing the conaninfo.txt and conanbuildinfo.txt files (from a previous conan install execution).\n                        Defaulted to current folder, unless --profile, -s or -o is specified. If you specify both install-folder and any\n                        setting/option it will raise an error.\n  -db [DRY_BUILD], --dry-build [DRY_BUILD]\n                        Apply the --build argument to output the information, as it would be done by the install command\n  -b [BUILD], --build [BUILD]\n                        Given a build policy, return an ordered list of packages that would be built from sources during the install\n                        command\n  -r REMOTE, --remote REMOTE\n                        Look in the specified remote server\n  -u, --update          Will check if updates of the dependencies exist in the remotes (a new version that satisfies a version range, a\n                        new revision or a newer recipe if not using revisions).\n  -l LOCKFILE, --lockfile LOCKFILE\n                        Path to a lockfile\n  --lockfile-out LOCKFILE_OUT\n                        Filename of the updated lockfile\n  -e ENV_HOST, --env ENV_HOST\n                        Environment variables that will be set during the package build (host machine). e.g.: -e CXX=/usr/bin/clang++\n  -e:b ENV_BUILD, --env:build ENV_BUILD\n                        Environment variables that will be set during the package build (build machine). e.g.: -e:b CXX=/usr/bin/clang++\n  -e:h ENV_HOST, --env:host ENV_HOST\n                        Environment variables that will be set during the package build (host machine). e.g.: -e:h CXX=/usr/bin/clang++\n  -o OPTIONS_HOST, --options OPTIONS_HOST\n                        Define options values (host machine), e.g.: -o Pkg:with_qt=true\n  -o:b OPTIONS_BUILD, --options:build OPTIONS_BUILD\n                        Define options values (build machine), e.g.: -o:b Pkg:with_qt=true\n  -o:h OPTIONS_HOST, --options:host OPTIONS_HOST\n                        Define options values (host machine), e.g.: -o:h Pkg:with_qt=true\n  -pr PROFILE_HOST, --profile PROFILE_HOST\n                        Apply the specified profile to the host machine\n  -pr:b PROFILE_BUILD, --profile:build PROFILE_BUILD\n                        Apply the specified profile to the build machine\n  -pr:h PROFILE_HOST, --profile:host PROFILE_HOST\n                        Apply the specified profile to the host machine\n  -s SETTINGS_HOST, --settings SETTINGS_HOST\n                        Settings to build the package, overwriting the defaults (host machine). e.g.: -s compiler=gcc\n  -s:b SETTINGS_BUILD, --settings:build SETTINGS_BUILD\n                        Settings to build the package, overwriting the defaults (build machine). e.g.: -s:b compiler=gcc\n  -s:h SETTINGS_HOST, --settings:host SETTINGS_HOST\n                        Settings to build the package, overwriting the defaults (host machine). e.g.: -s:h compiler=gcc\n  -c CONF_HOST, --conf CONF_HOST\n                        Configuration to build the package, overwriting the defaults (host machine). e.g.: -c\n                        tools.cmake.cmaketoolchain:generator=Xcode\n  -c:b CONF_BUILD, --conf:build CONF_BUILD\n                        Configuration to build the package, overwriting the defaults (build machine). e.g.: -c:b\n                        tools.cmake.cmaketoolchain:generator=Xcode\n  -c:h CONF_HOST, --conf:host CONF_HOST\n                        Configuration to build the package, overwriting the defaults (host machine). e.g.: -c:h\n                        tools.cmake.cmaketoolchain:generator=Xcode\n```\n\n\n## Python Support\n\nWe endeavour to support all functionality for all [current actively supported Python versions](https://www.python.org/downloads/).\nHowever, some features may not be possible/present in older Python versions due to their lack of support.\n\n## Copyright & License\n\nCycloneDX BOM is Copyright (c) OWASP Foundation. All Rights Reserved.\n\nPermission to modify and redistribute is granted under the terms of the Apache 2.0 license.",
    'author': 'Patrick Dwyer',
    'author_email': 'patrick.dwyer@owasp.org',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/CycloneDX/cyclonedx-conan',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
