"""
    Planetary Data System API

    Federated PDS API which provides actionable end points standardized between the different nodes.   # noqa: E501

    The version of the OpenAPI document: 0.5.0-SNAPSHOT
    Contact: pds-operator@jpl.nasa.gov
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from pds.api_client.api_client import ApiClient, Endpoint as _Endpoint
from pds.api_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from pds.api_client.model.products import Products


class CollectionsProductsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __products_of_a_collection(
            self,
            identifier,
            **kwargs
        ):
            """get producs belonging to a given collection  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.products_of_a_collection(identifier, async_req=True)
            >>> result = thread.get()

            Args:
                identifier (str): lidvid or lid

            Keyword Args:
                start (int): offset in matching result list, for pagination. [optional] if omitted the server will use the default value of 0
                limit (int): maximum number of matching results returned, for pagination. [optional] if omitted the server will use the default value of 100
                fields ([str]): returned fields, syntax field0,field1. [optional]
                sort ([str]): sort results, syntax asc(field0),desc(field1). [optional]
                only_summary (bool): only return the summary, useful to get the list of available properties. [optional] if omitted the server will use the default value of False
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Products
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['identifier'] = \
                identifier
            return self.call_with_http_info(**kwargs)

        self.products_of_a_collection = _Endpoint(
            settings={
                'response_type': (Products,),
                'auth': [],
                'endpoint_path': '/collections/{identifier}/products',
                'operation_id': 'products_of_a_collection',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'identifier',
                    'start',
                    'limit',
                    'fields',
                    'sort',
                    'only_summary',
                ],
                'required': [
                    'identifier',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'identifier':
                        (str,),
                    'start':
                        (int,),
                    'limit':
                        (int,),
                    'fields':
                        ([str],),
                    'sort':
                        ([str],),
                    'only_summary':
                        (bool,),
                },
                'attribute_map': {
                    'identifier': 'identifier',
                    'start': 'start',
                    'limit': 'limit',
                    'fields': 'fields',
                    'sort': 'sort',
                    'only_summary': 'only-summary',
                },
                'location_map': {
                    'identifier': 'path',
                    'start': 'query',
                    'limit': 'query',
                    'fields': 'query',
                    'sort': 'query',
                    'only_summary': 'query',
                },
                'collection_format_map': {
                    'fields': 'multi',
                    'sort': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__products_of_a_collection
        )

        def __products_of_a_collection_all(
            self,
            identifier,
            **kwargs
        ):
            """get producs belonging to a given collection  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.products_of_a_collection_all(identifier, async_req=True)
            >>> result = thread.get()

            Args:
                identifier (str): lidvid or lid

            Keyword Args:
                start (int): offset in matching result list, for pagination. [optional] if omitted the server will use the default value of 0
                limit (int): maximum number of matching results returned, for pagination. [optional] if omitted the server will use the default value of 100
                fields ([str]): returned fields, syntax field0,field1. [optional]
                sort ([str]): sort results, syntax asc(field0),desc(field1). [optional]
                only_summary (bool): only return the summary, useful to get the list of available properties. [optional] if omitted the server will use the default value of False
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Products
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['identifier'] = \
                identifier
            return self.call_with_http_info(**kwargs)

        self.products_of_a_collection_all = _Endpoint(
            settings={
                'response_type': (Products,),
                'auth': [],
                'endpoint_path': '/collections/{identifier}/products/all',
                'operation_id': 'products_of_a_collection_all',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'identifier',
                    'start',
                    'limit',
                    'fields',
                    'sort',
                    'only_summary',
                ],
                'required': [
                    'identifier',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'identifier':
                        (str,),
                    'start':
                        (int,),
                    'limit':
                        (int,),
                    'fields':
                        ([str],),
                    'sort':
                        ([str],),
                    'only_summary':
                        (bool,),
                },
                'attribute_map': {
                    'identifier': 'identifier',
                    'start': 'start',
                    'limit': 'limit',
                    'fields': 'fields',
                    'sort': 'sort',
                    'only_summary': 'only-summary',
                },
                'location_map': {
                    'identifier': 'path',
                    'start': 'query',
                    'limit': 'query',
                    'fields': 'query',
                    'sort': 'query',
                    'only_summary': 'query',
                },
                'collection_format_map': {
                    'fields': 'multi',
                    'sort': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__products_of_a_collection_all
        )

        def __products_of_a_collection_latest(
            self,
            identifier,
            **kwargs
        ):
            """get producs belonging to a given collection  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.products_of_a_collection_latest(identifier, async_req=True)
            >>> result = thread.get()

            Args:
                identifier (str): lidvid or lid

            Keyword Args:
                start (int): offset in matching result list, for pagination. [optional] if omitted the server will use the default value of 0
                limit (int): maximum number of matching results returned, for pagination. [optional] if omitted the server will use the default value of 100
                fields ([str]): returned fields, syntax field0,field1. [optional]
                sort ([str]): sort results, syntax asc(field0),desc(field1). [optional]
                only_summary (bool): only return the summary, useful to get the list of available properties. [optional] if omitted the server will use the default value of False
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Products
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['identifier'] = \
                identifier
            return self.call_with_http_info(**kwargs)

        self.products_of_a_collection_latest = _Endpoint(
            settings={
                'response_type': (Products,),
                'auth': [],
                'endpoint_path': '/collections/{identifier}/products/latest',
                'operation_id': 'products_of_a_collection_latest',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'identifier',
                    'start',
                    'limit',
                    'fields',
                    'sort',
                    'only_summary',
                ],
                'required': [
                    'identifier',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'identifier':
                        (str,),
                    'start':
                        (int,),
                    'limit':
                        (int,),
                    'fields':
                        ([str],),
                    'sort':
                        ([str],),
                    'only_summary':
                        (bool,),
                },
                'attribute_map': {
                    'identifier': 'identifier',
                    'start': 'start',
                    'limit': 'limit',
                    'fields': 'fields',
                    'sort': 'sort',
                    'only_summary': 'only-summary',
                },
                'location_map': {
                    'identifier': 'path',
                    'start': 'query',
                    'limit': 'query',
                    'fields': 'query',
                    'sort': 'query',
                    'only_summary': 'query',
                },
                'collection_format_map': {
                    'fields': 'multi',
                    'sort': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__products_of_a_collection_latest
        )
